[{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回(今回)  今回はHugoテーマを改造するためHugoのコンテンツ管理・各種テンプレートについて調べた内容をまとめました。少々長いですが1つのページにまとめたかったのでどうかお許しを。\nテーマをカスタマイズする前に  早速前回の記事で採用した Hugo Classic | Hugo Themes\rをいじって行きたいのですが、Hugoには独特の Shortcode , Partial Template などの概念があります。\nHugo公式ではこの仕組みを Template と呼んでいます。\nまずはこれらをきちんと理解しないとテーマのカスタマイズは難しそうだなと感じたので少し調べてみました。\nHugoのコンテンツ管理について  Hugoはテーマによって\n どのテンプレートを使用するか どのようなファイル/ディレクトリ構成にするのか テンプレートにどのようなファイル名を採用するか1  がかなり異なっている為、カスタマイズしたい場合は自分で選んだテーマに合わせて適宜調べる必要があります。\nHugo公式Docsに関しては下記2つの中で必要になった部分を見ていくと良いです。\n Content Management\r Templates\r  また、少し上で「テンプレートにどのようなファイル名を採用するかがテーマによって異なる」と書きましたが、これが意外と重要です。\nHugoは基本的に各テンプレートファイルを 決められた順番・決められたファイルパスで探索 します。その優先順位について書かれているのがこちらです。ここは軽く目を通しておいた方が後々助かると思います。\n Hugo‘s Lookup Order\r  日本語でしっかりとした解説をして下さっているgarretlabさんのサイトもおすすめです。\n ショートコード\r 構成\r 決定規則(検索順序)\r  こちらの記事も参考にさせて頂きました。\n HUGO のディレクトリ構成\r  Hugo Templatingの記法について  公式Docsより: Introduction to Hugo Templating\r Hugo uses Go’s html/template and text/template libraries as the basis for the templating.\nThe following is only a primer on Go Templates. For an in-depth look into Go Templates, check the official Go docs\r.\n 上記にもあるように、Hugoでは基本的にGoのhtml/templateとtext/templateライブラリを踏襲した記法を採用していて、Hugo公式Docsの解説内容もGoテンプレートの入門に過ぎないので詳しくはGo言語自体のDocsをあたってくれ、だそうです。\nただこれだけだとちょっと不親切なので、日本語でざっくり説明します。\n HTMLファイルやMarkdownファイルの中でHugoテンプレートを呼び出す為の記法 基本的に{{と}}でテンプレートを囲み、呼び出す テンプレート名の直後に引数(Arguments)を与える事でそれぞれのテンプレートに見合った挙動をさせる仕組み  \u0026lt;!-- これは一つの例です --\u0026gt; {{ template \u0026#34;ARGUMENTS\u0026#34; . }} ※ 例えば{{と}} に\u0026lt; \u0026gt;が挟まれている場合は、外側の{{と内側の\u0026lt;の間に スペースを空けずに記述するのが正しい記法 です。\nHugoサイトの全体像と概念  Hugoのサイト構成に関して自分なりに理解した内容をざっくりと書いておきます。\n Hugoの静的サイトは ページ(Page) と テンプレート(Template) から生成される ページ内で呼び出せるテンプレートが ショートコード(Shortcodes) テンプレート内で呼び出せるテンプレートが インクルード(Includes) 変数と関数はこれらの内部で呼び出したり条件分岐させたりするのに使う 各ページ・テンプレートから呼び出す画像・動画などの リソース(Resources)  その他の重要な概念がこちらです。\n index.mdあるいは_index.mdという特殊な名前のファイルを含むディレクトリを認識して木のようなディレクトリ構造を実現する仕組みが ページバンドル(Page Bundle)  各記事にあたるディレクトリが リーフバンドル(Leaf Bundle) 各セクションにあたるディレクトリが ブランチバンドル(Branch Bundle)   各タグ・カテゴリーなどの総称である タクソノミー(Taxonomy)  ページとテンプレートについて    ページ(Page)について\n contentディレクトリ以下に置かれる 基本的にMarkdownとHTMLに対応  AsciiDoc、RST、Pandocも利用可能 詳しくはこちら: Content Formats\r      テンプレート(Templates)について\n layoutsディレクトリ以下に置かれる 基本的にHTMLで表現される  XMLやJSONを利用することもある   Markdown中に埋め込んでしまうと事実上 Hugo用のファイル となってしまうので汎用性を持たせたい場合は注意    ページを構成する代表的なテンプレートファイルは3種類ある\n 記事 (layouts/_default/single.html) セクション (layouts/_default/list.html) タクソノミー (layouts/_default/terms.html)   Hugoのテーマで中心になるのはこの3ファイル であることが多い なお、前述のように記事はLeaf BundleでセクションはBranch Bundleでもある    ページとテンプレートの関係をまとめるとこうなります。\n 各種ページと基本3種テンプレートの対応関係  各タクソノミー(タグ・カテゴリー)用テンプレートがterms.html  https://snagimmo.net/categories/\r: カテゴリー一覧 https://snagimmo.net/tags/\r: タグ一覧   各セクション・各タクソノミー要素の記事一覧用テンプレートがlist.html  https://snagimmo.net/dev/\r: devセクションの記事一覧 https://snagimmo.net/categories/website/\r: websiteカテゴリの記事一覧 https://snagimmo.net/tags/hugo\r: Hugoタグの記事一覧   各記事用テンプレートがsingle.html  https://snagimmo.net/dev/build-website-using-hugo2/\r: 記事      その他のテンプレートについて    ショートコード(Shortcodes)について\n ページ(大抵Markdown)の中で Hugo Templateを呼び出す為の機能 {{\u0026lt; shortcode \u0026quot;ARGUMENTS\u0026quot; \u0026gt;}}のような記法で文中に埋め込む  前述の通り{{と\u0026lt;の間には半角スペースを入れずに書く      インクルード(Includes)について\n テンプレート(大抵HTML)の中で 別のHugo Templateを呼び出す為の機能 インクルードの種類にはpartial, templateなどがある  partialは ユーザーが定義した Partial Template をインクルードする templateは Hugoが内部で用意している Internal Template などをインクルードする   例えば下記のような形  {{ partial \u0026quot;header.html\u0026quot; . }} {{ template \u0026quot;_internal/opengraph.html\u0026quot; . }}      変数(Variables)と関数(Functions)について\n 基本的に Goのtext/templateの文法\rと変わらず 変数(Variables) とはHugoがページ生成時に保持している値のこと  .Site.XXXや.Page.XXXなどがある  config.tomlに記述した値(サイト全体で保持される)にアクセスするのが.Site.XXX 各ページ内で設定・保持された値にアクセスするのが.Page.XXXや.Params.XXX     関数(Functions) はif, slice, rangeなど他の言語でよく見るもの これらも前述のHugo(Go) Templatingの記法に則ってソース中で呼び出す  {{ if eq xxx \u0026quot;yyy\u0026quot; }}のような形      ブランチバンドルとリーフバンドルについて  サイト全体の記事構造を一つの木に見立て、各記事を葉っぱ(Leaf)、それらを束ねる各セクションを枝(Branch)と見なしたもの\n ブランチバンドル(Branch Bundles)について  content以下にあるディレクトリは_index.mdという特殊ファイルがある場合 Branch Bundles として扱われる 要するに セクション(Section) のこと2 セクションというのはcontentディレクトリ以下に置かれた サブディレクトリ のことで、基本的にローカルディレクトリの構造にサイト側のパスも追従する セクションは多重化可能 (content/section1/sub-section1 のような形)     リーフバンドル(Leaf Bundles)について  content以下にあるディレクトリはindex.md3という特殊ファイルがある場合 Leaf Bundles として扱われる 要するに 記事 のこと Branch Bundlesに比べて直感的でないが、こちらの Leaf Bundlesも主にディレクトリのことを指す 点に注意 つまり、ページ(Page) は実はpage-desu.mdのような単一Markdownファイルとしてだけでなく、index.mdという特殊ファイルを含んだディレクトリpage-desuとしても配置することが出来る 特殊ファイルとは言うものの、名前を変えるだけでOK 中身はpage-desu.mdとpage-desu/index.mdとで変える必要はない    公式Docs: Page Bundles\rページリソースについて  これは上記のLeaf Bundlesについて理解できていれば簡単です。\n  ページリソース(Page Resources) とは、各ページ内で使用する画像・動画などの リソース(Resources) 管理に関する仕組み\n  ページリソース(Page Resources)機能があると何が嬉しいか\n Hugoのリソース管理は元々staticディレクトリで全て行われており、その事にユーザーから不満が出ていた 各ページ内のリソースをstatic/images/gazou.pngとしてcontentとは全く別のディレクトリで管理する必要があった このPage Resourcesという仕組みによって各Leaf Bundles(ディレクトリ)内でリソース管理を行うことが可能になった    Leaf Bundlesとして認識されたディレクトリ内、つまりindex.mdと同じ階層以下にその記事から読み込むファイル群を配置できる\n page-desuディレクトリをLeaf Bundlesとすると、page-desu/gazou.pngとして配置することもpage-desu/img/gazou.pngとして配置することも可能 index.mdと同じ階層以下であればどの深さでもリソースを配置することが出来る    公式Docsはこちら: Page Resources\rタクソノミー(Taxonomy)について  実は上記2つのBundles以外に、もう一つHugoのページ(Page)の中核を成す概念があります。\nそれが タクソノミー(Taxonomy) です。\nよくブログなどで各記事に設定された「タグ」や「カテゴリ」があると思いますが、あれらをまとめてHugoではタクソノミーという名前で呼び、管理しています。\nこのタクソノミー内のタグやカテゴリなどの要素ごとにページが自動生成されます。その際に呼び出されるのがlayouts/_default/terms.htmlという訳です。\nタクソノミーに関する公式Docsはこちらです。\n Taxonomies\r Taxonomy Templates\r Taxonomy Variables\r  日本語解説に関してもgarretlabさんの記事がよくまとまっていて参考になります。\n コンテンツ分類(Taxonomy)\r  タクソノミーテンプレートの注意点  タクソノミーに関するテンプレートを タクソノミーテンプレート(Taxonomy Template) と言いますが、これを扱う際は注意が必要です。\nタクソノミー内の値には.Data.Termsや.Data.Pagesといった形でアクセスします。\nつまり.Dataの下にぶら下がる.Data.XXXといった形で記述するのですが、これは似たような.Site.Data.XXXといった形を持つ データテンプレート(Data Template) とは似て非なる 全くの別物 です。\n先に書いたように.Site.XXXというのは基本的に config.tomlファイルに書かれたサイト全体で共有可能な設定値 を読み込むのに使います。\nこの.Site.Data.XXXも似たようなもので、data/data-area/data-desu.toml内に記述した値をデータテンプレートから取り出す為に使います。\nですので繰り返しになりますが、タクソノミーがデフォルトで保持する.Data.Termsは.Site.Data.XXXとは全くの別物なわけです。\n公式ではタクソノミーテンプレート用の変数を.Data.Termsではなく.Site.Taxonomies.XXXとして扱う方法も紹介されています。\n Taxonomy Templates #render-a-sites-taxonomies\r   If you wish to display the list of all keys for your site’s taxonomy, you can retrieve them from the .Site variable available on every page.\n こちらも公式からの引用ですが、例えば下の.Site.Taxonomies.tagsを利用した例ではサイト全体のタグ一覧を表示することが出来ます。\n\u0026lt;ul\u0026gt; {{ range .Site.Taxonomies.tags }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Page.Permalink }}\u0026#34;\u0026gt;{{ .Page.Title }}\u0026lt;/a\u0026gt; {{ .Count }}\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 次回へ続く  今回はHugoサイトの全体像とHugoテンプレートに関する話でした。\n次回はテーマ改良を予定しています。\n  例えばタクソノミーに関してはlayouts/_default/terms.html, layouts/_default/terms.html.html, layouts/category/terms.htmlなどのバリエーションが存在する (詳細: Taxonomy Templates\r)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 厳密には違うものの、セクション以外のBranch Bundleはホームやタクソノミーしかないので事実上セクションを指しているようなものとした (詳細: Page Bundles\r)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 頭にアンダースコア_が付いていない点に注意\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo2/","tags":["Hugo"],"title":"Hugoで個人サイト制作(2) Hugoのコンテンツ管理とテンプレート"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回(今回) 第2回: Hugoで個人サイト制作(2) Hugoのコンテンツ管理とテンプレート\r  今回は静的サイトジェネレータHugoの導入がメインです。\nHugoを導入する  OSがWindows10 Homeなので、Hugo公式のインストールガイド\rに沿って パッケージマネージャのScoop でインストールしました。\n上記インストールガイド内にHomebrewやMacPortsやChocolateyを利用したインストール方法も載っているのでHugoのインストールで悩む方はそんなにいないと思います。\nScoop自体のインストール方法は Scoopの公式サイト\rに載っているのでそちらを参照しました。\nscoop install hugo 上記インストール作業の後にPSやGit Bashなどからhugoコマンドが叩ければ無事インストール完了です。自分の場合はインストール後にOSごと一応再起動しておきました。\nサイト/ファイルの新規作成  Hugoでは新規にサイトを作成する際hugo new siteコマンドを実行することでディレクトリが自動生成されます。\nhugo new site \u0026lt;SITE_NAME\u0026gt; また、hugo newコマンドによってファイルを新規作成することも可能で、その場合は下記を実行するとnew-dirディレクトリの直下にnew_contents.mdが生成されます。\nhugo new new_dir/new_contents.md Hugoディレクトリの構造  例えば、hugo new site hogeとして作成されたhogeディレクトリには下記のディレクトリ群がデフォルトで含まれています。\n$ hugo new site hoge #(省略) $ ls -A ./hoge archetypes config.toml content data layouts static themes Hugoディレクトリの構造に関しては下記リンクが参考になります。\n Directory Structure\r HUGO のディレクトリ構成\r  このhoge/themes以下にHugoテーマ用のリポジトリをcloneしたりsubmodule addしたりして置いておくとテーマが適用されてプレビュー可能になります。\nテーマを選ぶ  Hugo用のテーマは Hugo themes\rというサイトから選びました。\n最初に気に入ったテーマが8つありましたが、自分はその中でもこちらの Hugo Classic なるテーマのシンプルさに惹かれました。\n  Hugo Classic | Hugo Themes\r goodroot/hugo-classic\r  選んだテーマをどのようにして自分のサイトに取り入れるかは様々です。\n Hugoテーマのリポジトリを直接clone Hugoテーマのリポジトリをforkしてカスタマイズ Hugoテーマのリポジトリをサブモジュール化 (git submodule add)  自分は上記Hugo Classicを下記リポジトリへforkした後にカスタマイズして使っています。(CSSなど汚い部分がありますがご容赦下さい)\n snagimmo/hugo-classic\r  なお、Hugoテーマの設定などに関しては「Hugo themes setting」やら「Hugo テーマ submodule」やらでググり、それで出て来た情報を元に進めました。\nサイトのプレビュー  Hugoにはサイト上のファイル群を編集する度に自動でプレビュー\u0026amp;更新が行われる LiveReload 機能があります。\nhugo server というコマンドをターミナルから実行することで、http://localhost:1313をデフォルトURLとしてHugo用プレビューサーバが立ち上がります。\nDraft(下書き記事)1を含めたプレビューをするためには-Dオプションを付けて\nhugo server -D などとする必要があります。この-Dオプションが無い場合は 公開設定をしたファイルしかプレビューされない 仕組みになっています。\nhugo serverにはその他に様々なオプションがあり、\n --buildDrafts, -D: 下書き(draft)記事も含めてプレビューする --ignoreCache: キャッシュを無視してプレビュー --noHTTPCache: HTTPキャッシュを作成しない --disableFastRender: ファイル変更がある度にサイト全体をリビルド --buildFuture, -F: 作成日時が現在時刻より進んだ記事もプレビュー --port \u0026lt;PORT\u0026gt;, -p \u0026lt;PORT\u0026gt;: プレビューサーバがlistenするポートを指定2  などを使い分けることで自分の望んだ状態でサイトプレビューを利用することが可能です。便利ですね。\nこれらのオプションはhugo server --helpでヘルプとして一覧表示することが出来ます。\nまたは公式Docsだとこちらのページに書いてあります。\n hugo server\r  ちなみに自分はいつも下記コマンドを実行しています。\nhugo server -D --ignoreCache --noHTTPCache --disableFastRender --buildFuture サイトのビルドと公開  公開用ファイルのビルドはserver等オプションなしの\nhugo で実行できます。Hugo用ディレクトリに移動後hugoの4文字を入力してEnterを押すだけです。\nhugoコマンドでビルドを実行するとhoge/publicディレクトリ以下に全てのビルド済みファイル群が出力されます。ホスティングサービスや各公開用サーバにはこのpublicディレクトリ以下の公開用ファイルのみを配置すれば良い、というわけです。\nなお、公開までの大まかな流れはQiitaのこの記事が分かりやすいと思います。\n Hugo で静的なサイト・ブログを構築しよう - Qiita\r  次回へ続く  今回はHugoの導入と簡単な説明をしました。\n次回はテーマ改良に向けてHugoサイトの全体像を把握し、Hugo Templateを理解します。\n  各MarkdownのFrontMatter内にdraft: trueと記述することで下書き扱いになり、draft: falseか無指定の場合は公開される\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Hugoサーバが使うデフォルトのポート番号は1313\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo1/","tags":["Hugo"],"title":"Hugoで個人サイト制作(1) Hugo導入"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回(今回) 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回: Hugoで個人サイト制作(2) Hugoのコンテンツ管理とテンプレート\r  なお、今回はHugo導入以前のMarkdown管理体制への移行に際して考えた事などがメインです。\nHugoを導入したきっかけ  実はHugoを導入した背景には、テキストファイル管理体制の変更がありました。\n昔からPC上にメモを残すようにはしていたのですが、長い間管理する手間に悩んでいました。\n最初はtxtファイルに殴り書きしていたのですがそれは流石に非効率が過ぎるということで、iOSからクラウドで同期できる Simplenote\rというアプリをtxtと並行して3年ほど使っていました。\nSimplenoteは使いやすく軽量で良いアプリではあるものの、データが全てクラウド上で保管されてしまうのです。\nつまり、直接アプリ上でローカルファイルとして文書を管理する事が出来ないのです。\nこれでは、例えばgrepなどで内容を横断検索した時のような効率が損なわれます。\n確かにSimplenoteにもエクスポート機能はあるのですが、書いたその時点で自動的にローカルファイルと同期される状態が望ましいなと思い、代替となるテキスト管理手段を探していました。\n全てMarkdownへ移行  色々と調べる中で、「txtやアプリ上で管理する体制をやめ、全てMarkdownにしてしまおう」と思いつきました。\nというのも、例えばtxtファイルにメモを取りためると出てくる問題の一つとして、\n記法が統一されなくなりがち\nといった問題点があったからです。\nつまり、ファイル形式によって記法が予め決められている方が助かるな、と思った訳です。そこで記法が決まっているMarkdownが候補に挙がりました。\n実は「Markdownは箇条書きスタイルに向いている」ぐらいの認識しか持っていなかったので全てのメモをMarkdownにしてしまうのも考え物だなと思ったのですが、冷静に考えると\n 元々HTMLを簡易的に記述する目的で開発された言語  HTMLタグも埋め込んで利用可能   GitHubでよく見るREADME.mdなどもMarkdown TrelloやSlack1などの有名なツール群も軒並みMarkdown記法に対応 YAMLなどのFrontMatterも使える(場合がある)  などなどメリットがかなりあることに気付き、思いきって手元のローカルファイルのメモを全てMarkdownに置き換えることにしました。\nMarkdownつながりでHugoへ到達  以前から、個人で何かやるなら「ブログではなくサイトにしたい」と考えていました。記事も記事以外も載せられるメディアの方が良いなと思っていたので、ここは余り悩まずWebサイトにしようと決めました。\nそうした中で、色々現在の制作ツールを調べていきました。\nまた、ネット上で情報発信しているエンジニア諸氏の記事などをよく読んでいた影響か、「あまりゴチャゴチャしていないスッキリとした テキスト主体 のサイトが良いな」と思うようになっていました。\n「この人のサイト良いな」と思う度にWappalyzerやWhatRunsなどのChrome拡張機能を通じてどんなツールでそのサイトを構築したのかを何となく把握していたので、静的サイトジェネレータ という単語に辿り着くまでそう時間はかかりませんでした。\n静的サイトジェネレータは基本的にMarkdownなどのファイルから静的ファイル(動的な生成過程のないhtmlなど)を生成するのに使います。\nそして生成されたファイル群をNetlifyやGitHub Pagesなどのホスティングサービスで公開する、というのがサイト公開までの一連の流れです。\n他にも静的サイトジェネレータの候補はGatsby.jsやNext.jsやHexoやJekyllなど幾つかありました2が、Goで書かれていて一番高速とのことで Hugo\r を選ぶ事にしました。\n 次回へ続く  今回は導入以前の流れを振り返っただけでした。\n次回以降はHugoの導入やテーマ改良など具体的な話をしていきます。\n  厳密にはMarkdown記法とは異なりますが\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n ここに一通り載ってます→ Static Site Generators - Top Open Source SSGs | Jamstack\r\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo0/","tags":["Hugo"],"title":"Hugoで個人サイト制作(0) Hugo導入以前"}]