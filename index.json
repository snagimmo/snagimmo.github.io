[{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回(今回)  今回もHugoテーマをカスタマイズしていきます。前回記事ではシンタックスハイライトを直した程度で終わりましたが今回はもう少し細かいところの話です。\nFontAwesomeでSVG表示 ヘッダやフッタ周りのデザイン変更が一段落したので、次に画像ファイルとしてSVGを表示出来る FontAwesome を使いたいなと思いました。\nFontAwesomeのGitHub: FortAwesome/Font-Awesome: The iconic SVG, font, and CSS toolkit\r調べてみると、どうやらHugo用にFontAwesomeのPartial Template1を作成することで簡単にテンプレート内からSVGの埋め込みタグを挿入できる事が分かりました。\n ローカルにSVGファイルを用意 それを呼び出す為のFontAwesome用Partial Templateを作成 layouts/以下のテンプレート内から2.のPartial Templateを呼び出し  以上でSVGが簡単に表示出来るわけです。\nSVGのRAWデータDL用スクリプトの作成 最初にまずFontAwesomeのRAWデータをダウンロードするスクリプトを書きました。\nダウンロードしたいSVGファイル名をそれぞれbrands, regular, solidの各種ページを参考に予めicons_*という変数群に文字列として格納しておく必要があります。\nSVGファイル一覧: https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/svgs/\r#!/bin/sh set -ex icons_b=\u0026#34;facebook get-pocket github soundcloud twitter\u0026#34; icons_r=\u0026#34;calendar clipboard\u0026#34; icons_s=\u0026#34;arrow-circle-left arrow-circle-right folder search tag clock rss share-alt\u0026#34; url_b=https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/svgs/brands url_r=https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/svgs/regular url_s=https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/svgs/solid dest=../content/fontawesome mkdir -p \u0026#34;${dest}\u0026#34; cd \u0026#34;${dest}\u0026#34; for icon in $icons_b; do curl -O \u0026#34;${url_b}/${icon}.svg\u0026#34; done for icon in $icons_r; do curl -O \u0026#34;${url_r}/${icon}.svg\u0026#34; done for icon in $icons_s; do curl -O \u0026#34;${url_s}/${icon}.svg\u0026#34; done スクリプトの置き場所がROOT/bin/直下なので途中にあるdest(ダウンロード先)のパスも../content/fontawesomeになっています。もし利用される場合、ここは各自のディレクトリ構造に合わせて下さい。\nテンプレートの復習 第2回目でも紹介したように、自作したHugoテンプレートを呼び出したい場合は どこから呼び出すか によってテンプレートの種類を変える必要があります。\n公式Docs: Shortcodes | Hugo\r他のテンプレート (e.g. layouts/_default/single.html, layouts/partials/header.html) から呼び出したい時は Partial Template として作成し、下記の形で呼び出します。\n{{ partial \u0026#34;TEMPLATE_NAME\u0026#34; \u0026#34;ARGS\u0026#34; }} 記事 (e.g. content/hoge/fuga.md, content/blog/2021/test.md) から呼び出したい時は Shortcode として作成し、下記の形で呼び出します。\n{{\u0026lt; TEMPLATE_NAME \u0026#34;ARGS\u0026#34; \u0026gt;}}ここの文字列はMarkdownとして解釈されない{{\u0026lt; /TEMPLATE_NAME \u0026gt;}} {{% TEMPLATE_NAME \u0026#34;ARGS\u0026#34; %}}ここの文字列はMarkdownとして解釈される{{% /TEMPLATE_NAME %}} この際、区切り文字(delimiter)に\u0026lt;を使うか%を使うかで挙動が変わります。Shortcode内部でHTMLタグなど使いたい場合には\u0026lt;を用いる事でMarkdown用のレンダラーが正しくHTMLタグを読み取れるようになるようです。\nPartial Templateの作成 実は参考記事のリンク先にもあるようにFontAwesome用のShortcodeを作成することも出来るのですが、今回はテンプレート内部でSVGを表示したいので、FontAwesome用のPartial Templateを作成します。\n\u0026lt;span class=\u0026#34;inline-svg\u0026#34;\u0026gt; {{- $fname:=print \u0026#34;fontawesome/\u0026#34; . \u0026#34;.svg\u0026#34; -}} {{- $path:=\u0026#34;\u0026lt;path\u0026#34; -}} {{- $fill:=\u0026#34;\u0026lt;path fill=\\\u0026#34;currentColor\\\u0026#34;\u0026#34; -}} {{ replace (readFile $fname) $path $fill | safeHTML }} \u0026lt;/span\u0026gt; 記法や文法などは省略しますが、これをROOT/layouts/partials/fontawesome.htmlとして配置すれば使えるようになります。\n上記にある{{}}内部のハイフン-はそれぞれ直前・直後の空白文字を削除する為のもので、HTMLのDOM構造を改行・空白なしで保つためのものです(削除しなくても大抵機能します)。\n参考記事  Hugo テンプレートをカスタマイズする前に知っておきたいハイフン“-”の意味 | exlair.net\r  テンプレート内からSVGを呼び出す 例えばローカルのROOT/content/fontawesome/clock.svgを下記のようにROOT/layouts/partials/header.htmlから呼び出す事が出来ます。\n{{ partial \u0026#34;fontawesome.html\u0026#34; \u0026#34;clock\u0026#34; }} 改造したHugo Classic(テーマ)の実例を載せておきますが、ヘッダ部分では下記のように 変数 としてFontAwesome用のファイル名を渡しています。このhead_custom.htmlをheader.htmlから読み込んでいます。\n\u0026lt;header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; {{ $title := lower .Title }} {{ $section := lower .Section }} \u0026lt;!-- 省略 --\u0026gt; {{ range .Site.Menus.main }} {{ $name := lower .Name }} \u0026lt;li class=\u0026#34;pull-left {{ if eq $name $title }}current{{ else if eq $section $name }}current{{ else if eq $title (pluralize $name) }}current{{ end }}\u0026#34;\u0026gt; {{ if eq $name $title }}\u0026lt;span class=\u0026#34;current-header\u0026#34;\u0026gt;{{ partial \u0026#34;fontawesome.html\u0026#34; $name }}\u0026lt;/span\u0026gt;{{ else }}\u0026lt;a href=\u0026#34;{{ .URL }}\u0026#34;\u0026gt;{{ partial \u0026#34;fontawesome.html\u0026#34; $name }}\u0026lt;/a\u0026gt;{{ end }} \u0026lt;/li\u0026gt; {{end}} \u0026lt;!-- 省略 --\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; 上記の例で言うと、変数名で渡しているのは\n{{ partial \u0026#34;fontawesome.html\u0026#34; $name }} の部分です。慣れればすぐに読めると思いますが、\n{{ range .Site.Menus.main }} の行からはじまるrangeブロック内部で.Nameを取得し、そのそれぞれをlower関数で小文字化することでタイトル・セクション・タクソノミーの相互一致判定を行っています。そして、その結果を$name変数に格納し、FontAwesomeに渡しているという流れです。\n{{ $name := lower .Name }} Hugo Classic + FontAwesomeの注意点 なお、Hugo Classicでは下記のようにconfig.tomlで設定しているタクソノミーの各種ページ名とURLが 複数形(plural) になっています。\n[[menu.main]] name = \u0026#34;Categories\u0026#34; url = \u0026#34;/categories/\u0026#34; weight = 1 [[menu.main]] name = \u0026#34;Tags\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 2 これに合わせ、FontAwesomeのSVGファイル名も次のようにリネームして読み込んでいます。\n folder.svgからcategories.svgへリネーム tag.svgからtags.svgへリネーム  FontAwesomeデフォルトのファイル名をリネームしないと、テンプレートから渡される$nameがtagsのままなのに実ファイル名がtag.svgのままで読み込まれないという訳です。\nTOMLの方を書き変えるかSVGファイル名を変えるかは人それぞれでしょうが、一応書いておきます。\n参考記事  Using Font Awesome Icons in Hugo | Nick Galbreath\r Hugo | solareenlo\r  各種Shortcodeの追加 上で書いたFontAwesome以外にも幾つか役立ちそうなShortcodeなどを追加してみました。\n private.html: Hugo側でプレビュー状態の時のみ表示するコメントブロックを挿入 colored.html: Markdownの文中で背景色と文字色を部分的に変更 image.html: Markdown内に画像を貼り付ける(Lightbox2を利用) steam.html: Steamのストアページへのリンクを自動でいい感じにしてくれる  private.htmlについて 下記のようなShortcodeを作成し, ローカル環境のサーバ上でのみ表示したいテキストを囲むと色々と捗ります。 例えばまだ公開したくない記事の一部などをそのままprivateな状態でHugoにビルドしてもらう、といった事も可能です。\nファイルはROOT/layouts/shortcodes/private.htmlとして作成しました。\n{{ if .Site.IsServer }} \u0026lt;div class=\u0026#34;private\u0026#34;\u0026gt;{{ .Inner }}\u0026lt;/div\u0026gt; {{ end }} これに合わせてCSSも設定しておきました。\n.private { background: #2e2222; color: #f11; padding: 0.5em; border: solid 1px #f11; } .private::before { content: \u0026#34;------Private------\u0026#34;; display: block; font-weight: bolder; } 使い方は下記の通りです。\n{{\u0026lt; private \u0026gt;}} これは非公開なメモ {{\u0026lt; /private \u0026gt;}} これは公開されるメモ 例えば上のように書くと、このような表示になります。\n\r\r\r参考記事  ローカルサーバで動作させているとき（開発時）のみ内容を出力する private ショートコードを作成する | まくまくHugo/Goノート\r  colored.htmlについて これは自作しました。文中で自由に背景色と文字色を変える為の簡単な1行Shortcodeです(シンタックスハイライトがちょっと崩れてて見にくいですが)。\nこれも勿論ROOT/layouts/shortcodesに置いて使います。\n\u0026lt;span class=\u0026#34;colored\u0026#34; style=\u0026#34;background:{{ .Get \u0026#34;bg\u0026#34; }};color:{{ .Get \u0026#34;color\u0026#34; }};\u0026#34;\u0026gt;{{- .Inner -}}\u0026lt;/span\u0026gt; 例えばMarkdown中ではこのように使います。こうして複数の引数を渡す事も出来るのでShortcodeは慣れてしまえば便利です。\n{{\u0026lt; colored bg=\u0026#34;#00f\u0026#34; color=\u0026#34;#fff\u0026#34; \u0026gt;}}青{{\u0026lt; /colored \u0026gt;}} {{\u0026lt; colored bg=\u0026#34;#fff\u0026#34; color=\u0026#34;#000\u0026#34; \u0026gt;}}白{{\u0026lt; /colored \u0026gt;}} 青\r白\rimage.htmlについて これも自作です。サムネイルを表示してクリック・タップされると元画像が拡大表示されるように Lightbox2 を利用しています(有名なのでLightbox2の説明は省略)。\n\u0026lt;figure class=\u0026#34;{{ .Get \u0026#34;class\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;img-wrapper\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ .Get \u0026#34;link\u0026#34; }}\u0026#34; data-lightbox=\u0026#34;{{ .Get \u0026#34;data-lightbox\u0026#34; }}\u0026#34; data-title=\u0026#34;{{ .Get \u0026#34;data-title\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}\u0026#34; width=\u0026#34;{{ .Get \u0026#34;width\u0026#34; }}\u0026#34;/\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/figure\u0026gt; Markdown中ではこのように使います。\n{{% image src=\u0026#34;resize/thumbnail.png\u0026#34; link=\u0026#34;gazou.png\u0026#34; class=\u0026#34;\u0026#34; data-lightbox=\u0026#34;images\u0026#34; data-title=\u0026#34;caption\u0026#34; %}} srcでサムネイルの場所を指定、linkで大きいサイズの画像を指定します。パスはそれぞれPage Resourcesの仕様に則っているので記事ファイル(.md)と同じ階層からの相対パスです。\nclassの有無を問わず機能するので、CSSなどで何か表示を変えたい時だけclass=\u0026quot;fuga\u0026quot;などと指定すればOKです。\nsteam.htmlについて Steamのストアページをインライン表示できるShortcodeです。\nTwitterやYouTubeなどはHugo側にデフォルトで用意されているのですがSteamは無かったので用意しました(参考記事のものをそのまま利用)。\n\u0026lt;div class=\u0026#34;embed steam-link\u0026#34;\u0026gt; \u0026lt;iframe class=\u0026#34;steam-link\u0026#34; src=\u0026#34;https://store.steampowered.com/widget/{{ index .Params 0 }}/\u0026#34; frameborder=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; CSSも弄っておきました。\n.steam-link { width: 450px; height: 200px; } Markdownの中ではこう使います。\n{{\u0026lt; steam 814380 \u0026gt;}} 実際に使うとこんな感じになります。\n\r\r参考記事  Hugoの記事にコンテンツを埋め込む – ふぉれすけ広場\r  TOC(目次)を追加 サイトを作って記事を幾つか書いてみたところ、テキスト量の多い記事が増えてきたので目次を追加してみました。\n正直無くても良いかなと思っていたのですが特にそんな事はなかったですね。あった方が良いです。\n下記Hugo公式Docsにもあるように、元々 TOC(Table of Contents) はHugo側の機能としてデフォルトで存在しているため、ユーザーは 機能を呼び出すだけで利用可能 です。\n公式Docs: Table of Contents | Hugo\rこれを利用すれば、見出しとして## 見出し2や### 見出し3のようにMarkdown中に記述するだけで自動でHugoがTOCを出力してくれます。\n各記事の中に目次を追加したかったので、記事用テンプレートのROOT/layouts/_default/single.htmlを下記のように編集しました。\n\u0026lt;!-- 省略 --\u0026gt; \u0026lt;div class=\u0026#34;content-wrapper\u0026#34;\u0026gt; {{- if .Params.toc }} {{- with .TableOfContents }} \u0026lt;aside class=\u0026#34;xToc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;xToc_title\u0026#34;\u0026gt;目次\u0026lt;/div\u0026gt; {{ . }} \u0026lt;/aside\u0026gt; {{- end }} {{- end }} \u0026lt;main\u0026gt; {{ with .Content }}{{ . }}{{ else }}This content is empty. {{ end }} \u0026lt;/main\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 省略 --\u0026gt; 実を言うと、\n{{ .TableOfContents }} この1行だけでもTOCは呼び出せます。しかし各記事のFrontMatter内でtoc: trueを設定した場合のみ目次が表示されるように\n{{- if .Params.toc }} という行で条件分岐をしています。\nまた、CSSに関しては次のように設定しました。\n.xToc { background: #282C34; border: 1px solid #D0AF4C; border-radius: .3em; padding: 1.2em 1.5em .8em 1.5em; line-height: 1.7em; width: 70%; margin: auto; font-size: 1.1em; } .xToc_title { font-size: 1.2em; font-weight: bolder; } .xToc ul { list-style-type: none; padding-left: 0.8em; } .xToc li { padding-top: 0 !important; } .xToc li:hover { border-left: .3em solid #D0AF4C; margin-left: -.3em; } .xToc li \u0026gt; ul { padding-left: 1em; width: 100%; } .xToc a { color: #c0c0c0 !important; font-weight: normal; display: block; border-bottom: dashed 1px #999; margin-left: .5em; } .xToc a:hover { color: #FFD700 !important; } Hugo側が自動で出力してくれるTOCは\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;と\u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;によって構成されていますので、それに合わせてCSSを編集する必要があります。\n参考記事  各ページに目次を表示する (.TableOfContents) | まくまくHugo/Goノート\r  faviconを設定 Hugo Classicにはデフォルトでstatic/images/site.webmanifestファイルがあります(exampleSiteというディレクトリの中にあります)。\n従って、やることと言えばfavicon用.pngファイルの作成とheader.htmlへの追記のみですね。faviconに関しては特に言う事は無いです。\n.pngファイルは自前のアイコン(トップページに表示されるやつです)をリサイズしただけですね。\n\u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;180x180\u0026#34; href=\u0026#34;/images/apple-touch-icon.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;16x16\u0026#34; href=\u0026#34;/images/favicon-16x16.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;32x32\u0026#34; href=\u0026#34;/images/favicon-32x32.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;64x64\u0026#34; href=\u0026#34;/images/favicon-64x64.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;128x128\u0026#34; href=\u0026#34;/images/favicon-128x128.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;manifest\u0026#34; href=\u0026#34;/images/site.webmanifest\u0026#34;\u0026gt; 参考リンク  Favicon ジェネレーター\r ウェブアプリマニフェスト | MDN\r  次回へ続く 今回はHugoテーマカスタマイズの2回目でした。\n次回はテーマカスタマイズの続き(機能面寄り)を予定しています。\n  この記事\rで説明\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo4/","tags":["Hugo"],"title":"Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回(今回) 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r  今回はHugoテーマをカスタマイズしていきます。前回までの記事がある程度汎用性のある記事だったのに対し、ここからは個人的・個別具体的な話になると思います。\nサイト管理用リポジトリについて 第1回の記事\rでも紹介した通り、このサイトではHugo Classic (goodroot/hugo-classic)\rというテーマをカスタマイズして使っています。\n全体としては、下記のように3つのリポジトリを用意してサイト関連のファイル群を管理しています。(恐らくもっと良い管理法はあると思うのですが暫定的にこうしています)\n fork済みテーマリポジトリ(公開): snagimmo/hugo-classic\r サイト編集用リポジトリ(非公開): snagimmo/hugo-neoclassic サイト公開用リポジトリ(公開): snagimmo/snagimmo.github.io\r  テーマ用リポジトリはforkなので勿論publicリポジトリですが、このHugoサイト編集用のリポジトリは非公開(private)です。編集途中のファイルやHugoサイトのビルドに関係ないスクリプト(.bat, .shなど)も置いているので非公開にしてあります。\n編集用リポジトリの名前についてはhugo-classicをベースにしようと決めたので hugo-neoclassic にしました。\nまた、非公開の編集用リポジトリから公開用リポジトリ(GitHub Pages)へCircleCIを使って自動pushされるようにしていますが、この話はまた別の記事に載せることとします。\nテーマ用ファイルのコピーと上書き HugoではテーマファイルをROOT/themes/\u0026lt;THEME\u0026gt;からROOT/直下にコピーしてから編集することで、テーマファイルよりも自分の編集したファイルが優先してビルドされるような仕組みになっています。\n従って、いきなりサイト用ディレクトリ直下(ROOT/)にテーマをcloneするよりもROOT/themes以下にテーマリポジトリをcloneしてからROOT/にコピーし、サイト用ファイルとして編集した方が後々楽になると思います。\nサイトの新規作成時には下記コマンド群を実行することで\n テーマファイル(ROOT/themes以下のファイル)群 それらの上書きファイル・追加ファイル(ROOT/直下にあるthemes 以外 のファイル)群  の棲み分けが出来るようになります。\n# Hugoコマンドで新規サイト作成\u0026amp;Gitリポジトリ化 hugo new site SITE_NAME cd SITE_NAME git init # themesディレクトリ直下にテーマをclone cd themes git clone git@github.com:USER_NAME/THEME_NAME.git # cloneしたテーマ内のファイルをサイト用ディレクトリへコピー cd .. cp -v -R ./themes/THEME_NAME/* ./ 手を加えるべきファイル 実際にテーマを編集する前にHugo Classicテーマのどの部分を弄れば良いかあたりをつけました。\n結果、大体下記のファイルを編集すればHugo Classicテーマが改造出来るらしいことが分かりました。構造が分かってしまえば簡単1ですね。\n テーマ全体の設定(config.toml) テーマ全体のCSS(static/css/style.css) フォントのCSS(static/css/fonts.css) ヘッダとフッタ関連  layouts/partials/header.html layouts/partials/head_custom.html layouts/partials/footer.html layouts/partials/foot_custom.html   ページ新規作成2時のテンプレート(archetypes/default.md) その他各種テンプレート(前回記事で解説)  layouts/_default/single.html layouts/_default/list.html layouts/_default/terms.html   ドキュメントルートの各種ファイル  layouts/404.html: 404ページ設定 layouts/robots.txt: クローラ用設定  これstatic/robots.txtへ移動することに   static/CNAME: 独自ドメインを追加したいのでCNAMEファイルを追加    テーマを弄る前に Hugoの過去のバージョンアップでMarkdown用のレンダラーが Goldmark に変更された影響で、デフォルトではHugo用のMarkdownファイル内にHTMLを書いても読み込まれない3設定になっています。\nまずはROOT/config.toml(YAMLの場合もあります)を編集して下記の項目を追加し、Markdown内のHTMLが読み込まれるようにします。\n[markup] [markup.goldmark.renderer] unsafe = true ヘッダや背景や文字の色を変更 最初に一番分かりやすいヘッダの色と全体(\u0026lt;body\u0026gt;など)の背景色・文字色を変えて雰囲気を確認したいなと思い、layouts/partials以下のファイル群とstyle.cssを編集しました。\n私はダークモードでWebサイトを見ることが多く、手元の各種ソフト・ツールもほぼ暗色系や紺色の背景で統一しています。そこでWebサイトも暗い色の背景にしたいなと思っていました。\n一方で暗色系の背景に対して文字やその他の色も暗色系にしてしまうと見辛くなってしまうと思った4ので、思い切って紺色に対してコントラストのある黄色を採用することにしました。\n夜空と月をイメージして辛子色の#d0af4c\rと濃紺色の#0f0f1f\rをベースカラーにしてみました。\n下記のコミット等で弄っています。テーマ・デザイン弄りの試行錯誤は正直面白くない上に役立たないと思うので省略します。\n modified some colors and header design · snagimmo/hugo-classic@a2bd3f8\r change colors and so on · snagimmo/hugo-classic@1f92cd9\r change header colors · snagimmo/hugo-classic@8d0aeaa\r  シンタックスハイライトを改良 デフォルトのままだとフォントの大きさやらデザインやらが気になったので、ここも変えることに。\n初めに行番号の表示をしたり偶数行だけ背景色変更したりスクロールバー改造や左上にQiita風の言語\u0026amp;ファイル名表示を施したりなど色々と弄りました。\n change highlighting · snagimmo/hugo-classic@e7a8283\r finished editing code, pre · snagimmo/hugo-classic@eb35e23\r changed even-numbered rows‘ color · snagimmo/hugo-classic@a61cc16\r added filename to code blocks · snagimmo/hugo-classic@13bc748\r fixed line-height for blocks · snagimmo/hugo-classic@2bb2ac6\r finished code blocks · snagimmo/hugo-classic@59dbfab\r  この途中でJavaScriptの簡易スクリプトを追加し、ファイルタイプやファイル名を自動判別してQiita風5に表示してくれるよう改良しました。\nvar list = document.body.getElementsByClassName(\u0026#34;highlight\u0026#34;); for(i = 0; i \u0026lt;= list.length - 1; i++){ var code = list[i].firstElementChild.firstElementChild; if(code){ var codeType = code.className.split(\u0026#34;:\u0026#34;)[1] ? code.className.split(\u0026#34;:\u0026#34;)[1] : code.className.split(\u0026#34;:\u0026#34;)[0].replace(/language-/, \u0026#39;\u0026#39;); } if(codeType){ var div = document.createElement(\u0026#39;div\u0026#39;); div.textContent = codeType; div.classList.add(\u0026#39;code-name\u0026#39;); code.parentNode.insertBefore(div, code); } } var codeBlocks = document.body.getElementsByClassName(\u0026#39;highlight\u0026#39;); for(i = 0; i \u0026lt;= codeBlocks.length - 1; i++){ var code = codeBlocks[i].firstElementChild.firstElementChild; if (!/lang/.test(code.className)){ break; } if(code){ var lines = code.innerHTML.split(/\\n/); var codeLine = \u0026#34;\u0026#34;; lines.forEach(function(line){ if(line != \u0026#34;\u0026#34;){ codeLine += \u0026#39;\u0026lt;div class=\u0026#34;code-line\u0026#34;\u0026gt;\u0026#39; + line + \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; } }) code.innerHTML = codeLine; } } こちらのcodeblock-filename.jsはファイル名表示用のスクリプトで、codeblock-to-line.jsはPygments(後述)で表示する際に行番号を追加する為のスクリプトです。\nちなみにここでHugo側からのスクリプト呼び出しに失敗し、少し詰まりました。\n結論から言えば、Hugoのテンプレート内でROOT/static/js/hoge.jsといったローカルスクリプトを呼び出す時は下記のように記述するのが正しいらしいです。\n呼び出し元はフッター用テンプレートのROOT/layouts/partials/footer.htmlです。\n\u0026lt;!-- 良い例 --\u0026gt; \u0026lt;script src=\u0026#34;/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 悪い例 --\u0026gt; \u0026lt;script src=\u0026#34;./js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/static/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;./static/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;static/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;../static/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/../static/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ROOT/static直下に居ることが前提で尚且つ/から始めるのが正しい記法のようです。悪い例の方では全てスクリプト読み込みに失敗しました。\n少し古め(2018年頃)の記事ではsrc=\u0026quot;js/hoge.js\u0026quot;としている記事も見かけるのですが、少なくとも私が使っているHugo ver0.80においてはエラーになるようでした。\nシンタックスハイライトを更に改良 また、良い機会なのでシンタックスハイライターも色々試してみました。\n Pygments (Hugoデフォルト) highlight.js Prism.js  色々試した中で厄介だったのは、HugoデフォルトのPygmentsとhighlight.jsの衝突です。\n当然のことですが、ハイライターによって挿入されるHTMLタグ構造がまちまちなのでROOT/static/css/style.cssなどのCSSもハイライター毎にブランチ等切って個別対処する必要があります。\n added prism.js and removed highlight.js · snagimmo/hugo-classic@6cf1457\r finished pygments and added prism files · snagimmo/hugo-classic@9be5e21\r current best settings for prism.js · snagimmo/hugo-classic@284a158\r Merge branch ‘modified-prism‘ into modified · snagimmo/hugo-classic@d1c13a3\r merged some changes of descendant file · snagimmo/hugo-classic@19c7267\r  結果、最終的には Prism.js をメインとして採用しました。 構文解析がそこそこ優れている事と、スキンが豊富でCSSを編集すれば自由に色設定可能なのと、何より扱いやすいのが主な理由です。\nというわけで、暫定的ではありますがPrism.jsに関しては下記のような形に落ち着きました。ちょっと細かいデザインに時間を掛けすぎてしまったかなという気がしますが……(この記事書きながらまたstatic/css/prism.cssを微調整していました)。\n#ifndef TEST_CPP #define TEST_CPP  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main(){ int N; cin \u0026gt;\u0026gt; N; for(int i = 0; i \u0026lt; N; i++){ string S; cin \u0026gt;\u0026gt; S; } return 0; } #endif //TEST_CPP import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print i  adopted changes of style.css on private repo · snagimmo/hugo-classic@3e44a8c\r merged ‘modified‘ · snagimmo/hugo-classic@e09ff66\r  一応Hugoデフォルトの Pygments によるハイライトも可能になるようブランチを切っておきました。……が、Prism.jsで十分なので多分使わないですね。\n参考記事  ソースコードの右上に言語名を表示するやつ - Object.create(null)\r はてなブログのコードブロックをカスタマイズする | 前菜の備忘録\r HugoのコードブロックにQiitaのようなTitleをつける | AABrain\r Hugoのシンタックスハイライトを設定する\r 【Hugo】コードブロック内にファイル名を表示する | みどりみちのブログ\r Hugo, Github Pages, CircleCIつかってブログ構築 • abekoh‘s tech note\r CSSでスクロールバーのデザインをカスタマイズする。 | WEMO\r  次回へ続く 今回はHugoテーマカスタマイズの1回目でした。\n次回はテーマカスタマイズの続きを予定しています。\n  テーマによってファイルパス・ファイル名が異なるのでテーマ毎に調べる必要あり\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n hugo new new_contents.mdコマンド等で記事を新規作成した場合\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n ローカルファイルに悪意あるHTMLを自ら書き込むことも書き込まれることもほぼあり得ないと考えた為、ここではunsafe = trueにしています\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n いまだにリンクの色が#a0a0a0\rというグレーなので他の色にしようか迷っている\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n コードブロックの言語指定でJavaScriptとだけ書けばJavaScriptと表示され、js:hoge.jsと書けばhoge.jsと表示される\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo3/","tags":["Hugo"],"title":"Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回(今回) 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r  今回はHugoテーマを改造するためHugoのコンテンツ管理・各種テンプレートについて調べた内容をまとめました。少々長いですが1つのページにまとめたかったのでどうかお許しを。\nテーマをカスタマイズする前に 早速前回の記事で採用した Hugo Classic | Hugo Themes\rをいじって行きたいのですが、Hugoには独特の Shortcode , Partial Template などの概念があります。\nHugo公式ではこの仕組みを Template と呼んでいます。\nまずはこれらをきちんと理解しないとテーマのカスタマイズは難しそうだなと感じたので少し調べてみました。\nHugoのコンテンツ管理について Hugoはテーマによって\n どのテンプレートを使用するか どのようなファイル/ディレクトリ構成にするのか テンプレートにどのようなファイル名を採用するか1  がかなり異なっている為、カスタマイズしたい場合は自分で選んだテーマに合わせて適宜調べる必要があります。\nHugo公式Docsに関しては下記2つの中で必要になった部分を見ていくと良いです。\n Content Management\r Templates\r  また、少し上で「テンプレートにどのようなファイル名を採用するかがテーマによって異なる」と書きましたが、これが意外と重要です。\nHugoは基本的に各テンプレートファイルを 決められた順番・決められたファイルパスで探索 します。その優先順位について書かれているのがこちらです。ここは軽く目を通しておいた方が後々助かると思います。\n Hugo‘s Lookup Order\r  日本語でしっかりとした解説をして下さっているgarretlabさんのサイトもおすすめです。\n ショートコード\r 構成\r 決定規則(検索順序)\r  こちらの記事も参考にさせて頂きました。\n HUGO のディレクトリ構成\r  Hugo Templatingの記法について 公式Docsより: Introduction to Hugo Templating\r Hugo uses Go’s html/template and text/template libraries as the basis for the templating.\nThe following is only a primer on Go Templates. For an in-depth look into Go Templates, check the official Go docs\r.\n 上記にもあるように、Hugoでは基本的にGoのhtml/templateとtext/templateライブラリを踏襲した記法を採用していて、Hugo公式Docsの解説内容もGoテンプレートの入門に過ぎないので詳しくはGo言語自体のDocsをあたってくれ、だそうです。\nただこれだけだとちょっと不親切なので、日本語でざっくり説明します。\n HTMLファイルやMarkdownファイルの中でHugoテンプレートを呼び出す為の記法 基本的に{{と}}でテンプレートを囲み、呼び出す テンプレート名の直後に引数(Arguments)を与える事でそれぞれのテンプレートに見合った挙動をさせる仕組み  \u0026lt;!-- これは一つの例です --\u0026gt; {{ template \u0026#34;ARGUMENTS\u0026#34; . }} ※ 例えば{{と}} に\u0026lt; \u0026gt;が挟まれている場合は、外側の{{と内側の\u0026lt;の間に スペースを空けずに記述するのが正しい記法 です。\nHugoサイトの全体像と概念 Hugoのサイト構成に関して自分なりに理解した内容をざっくりと書いておきます。\n Hugoの静的サイトは ページ(Page) と テンプレート(Template) から生成される ページ内で呼び出せるテンプレートが ショートコード(Shortcodes) テンプレート内で呼び出せるテンプレートが インクルード(Includes) 変数と関数はこれらの内部で呼び出したり条件分岐させたりするのに使う 各ページ・テンプレートから呼び出す画像・動画などの リソース(Resources)  その他の重要な概念がこちらです。\n index.mdあるいは_index.mdという特殊な名前のファイルを含むディレクトリを認識して木のようなディレクトリ構造を実現する仕組みが ページバンドル(Page Bundle)  各記事にあたるディレクトリが リーフバンドル(Leaf Bundle) 各セクションにあたるディレクトリが ブランチバンドル(Branch Bundle)   各タグ・カテゴリーなどの総称である タクソノミー(Taxonomy)  ページとテンプレートについて   ページ(Page)について\n contentディレクトリ以下に置かれる 基本的にMarkdownとHTMLに対応  AsciiDoc、RST、Pandocも利用可能 詳しくはこちら: Content Formats\r      テンプレート(Templates)について\n layoutsディレクトリ以下に置かれる 基本的にHTMLで表現される  XMLやJSONを利用することもある   Markdown中に埋め込んでしまうと事実上 Hugo用のファイル となってしまうので汎用性を持たせたい場合は注意    ページを構成する代表的なテンプレートファイルは3種類ある\n 記事 (layouts/_default/single.html) セクション (layouts/_default/list.html) タクソノミー (layouts/_default/terms.html)   Hugoのテーマで中心になるのはこの3ファイル であることが多い なお、前述のように記事はLeaf BundleでセクションはBranch Bundleでもある    ページとテンプレートの関係をまとめるとこうなります。\n 各種ページと基本3種テンプレートの対応関係  各タクソノミー(タグ・カテゴリー)用テンプレートがterms.html  https://snagimmo.net/categories/\r: カテゴリー一覧 https://snagimmo.net/tags/\r: タグ一覧   各セクション・各タクソノミー要素の記事一覧用テンプレートがlist.html  https://snagimmo.net/dev/\r: devセクションの記事一覧 https://snagimmo.net/categories/website/\r: websiteカテゴリの記事一覧 https://snagimmo.net/tags/hugo\r: Hugoタグの記事一覧   各記事用テンプレートがsingle.html  https://snagimmo.net/dev/build-website-using-hugo2/\r: 記事      その他のテンプレートについて   ショートコード(Shortcodes)について\n ページ(大抵Markdown)の中で Hugo Templateを呼び出す為の機能 {{\u0026lt; shortcode \u0026quot;ARGUMENTS\u0026quot; \u0026gt;}}のような記法で文中に埋め込む  前述の通り{{と\u0026lt;の間には半角スペースを入れずに書く      インクルード(Includes)について\n テンプレート(大抵HTML)の中で 別のHugo Templateを呼び出す為の機能 インクルードの種類にはpartial, templateなどがある  partialは ユーザーが定義した Partial Template をインクルードする templateは Hugoが内部で用意している Internal Template などをインクルードする   例えば下記のような形  {{ partial \u0026quot;header.html\u0026quot; . }} {{ template \u0026quot;_internal/opengraph.html\u0026quot; . }}      変数(Variables)と関数(Functions)について\n 基本的に Goのtext/templateの文法\rと変わらず 変数(Variables) とはHugoがページ生成時に保持している値のこと  .Site.XXXや.Page.XXXなどがある  config.tomlに記述した値(サイト全体で保持される)にアクセスするのが.Site.XXX 各ページ内で設定・保持された値にアクセスするのが.Page.XXXや.Params.XXX     関数(Functions) はif, slice, rangeなど他の言語でよく見るもの これらも前述のHugo(Go) Templatingの記法に則ってソース中で呼び出す  {{ if eq xxx \u0026quot;yyy\u0026quot; }}のような形      ブランチバンドルとリーフバンドルについて サイト全体の記事構造を一つの木に見立て、各記事を葉っぱ(Leaf)、それらを束ねる各セクションを枝(Branch)と見なしたもの\n ブランチバンドル(Branch Bundles)について  content以下にあるディレクトリは_index.mdという特殊ファイルがある場合 Branch Bundles として扱われる 要するに セクション(Section) のこと2 セクションというのはcontentディレクトリ以下に置かれた サブディレクトリ のことで、基本的にローカルディレクトリの構造にサイト側のパスも追従する セクションは多重化可能 (content/section1/sub-section1 のような形)     リーフバンドル(Leaf Bundles)について  content以下にあるディレクトリはindex.md3という特殊ファイルがある場合 Leaf Bundles として扱われる 要するに 記事 のこと Branch Bundlesに比べて直感的でないが、こちらの Leaf Bundlesも主にディレクトリのことを指す 点に注意 つまり、ページ(Page) は実はpage-desu.mdのような単一Markdownファイルとしてだけでなく、index.mdという特殊ファイルを含んだディレクトリpage-desuとしても配置することが出来る 特殊ファイルとは言うものの、名前を変えるだけでOK 中身はpage-desu.mdとpage-desu/index.mdとで変える必要はない    公式Docs: Page Bundles\rページリソースについて これは上記のLeaf Bundlesについて理解できていれば簡単です。\n  ページリソース(Page Resources) とは、各ページ内で使用する画像・動画などの リソース(Resources) 管理に関する仕組み\n  ページリソース(Page Resources)機能があると何が嬉しいか\n Hugoのリソース管理は元々staticディレクトリで全て行われており、その事にユーザーから不満が出ていた 各ページ内のリソースをstatic/images/gazou.pngとしてcontentとは全く別のディレクトリで管理する必要があった このPage Resourcesという仕組みによって各Leaf Bundles(ディレクトリ)内でリソース管理を行うことが可能になった    Leaf Bundlesとして認識されたディレクトリ内、つまりindex.mdと同じ階層以下にその記事から読み込むファイル群を配置できる\n page-desuディレクトリをLeaf Bundlesとすると、page-desu/gazou.pngとして配置することもpage-desu/img/gazou.pngとして配置することも可能 index.mdと同じ階層以下であればどの深さでもリソースを配置することが出来る    公式Docsはこちら: Page Resources\rタクソノミー(Taxonomy)について 実は上記2つのBundles以外に、もう一つHugoのページ(Page)の中核を成す概念があります。\nそれが タクソノミー(Taxonomy) です。\nよくブログなどで各記事に設定された「タグ」や「カテゴリ」があると思いますが、あれらをまとめてHugoではタクソノミーという名前で呼び、管理しています。\nこのタクソノミー内のタグやカテゴリなどの要素ごとにページが自動生成されます。その際に呼び出されるのがlayouts/_default/terms.htmlという訳です。\nタクソノミーに関する公式Docsはこちらです。\n Taxonomies\r Taxonomy Templates\r Taxonomy Variables\r  日本語解説に関してもgarretlabさんの記事がよくまとまっていて参考になります。\n コンテンツ分類(Taxonomy)\r  タクソノミーテンプレートの注意点 タクソノミーに関するテンプレートを タクソノミーテンプレート(Taxonomy Template) と言いますが、これを扱う際は注意が必要です。\nタクソノミー内の値には.Data.Termsや.Data.Pagesといった形でアクセスします。\nつまり.Dataの下にぶら下がる.Data.XXXといった形で記述するのですが、これは似たような.Site.Data.XXXといった形を持つ データテンプレート(Data Template) とは似て非なる 全くの別物 です。\n先に書いたように.Site.XXXというのは基本的に config.tomlファイルに書かれたサイト全体で共有可能な設定値 を読み込むのに使います。\nこの.Site.Data.XXXも似たようなもので、data/data-area/data-desu.toml内に記述した値をデータテンプレートから取り出す為に使います。\nですので繰り返しになりますが、タクソノミーがデフォルトで保持する.Data.Termsは.Site.Data.XXXとは全くの別物なわけです。\n公式ではタクソノミーテンプレート用の変数を.Data.Termsではなく.Site.Taxonomies.XXXとして扱う方法も紹介されています。\n Taxonomy Templates #render-a-sites-taxonomies\r   If you wish to display the list of all keys for your site’s taxonomy, you can retrieve them from the .Site variable available on every page.\n こちらも公式からの引用ですが、例えば下の.Site.Taxonomies.tagsを利用した例ではサイト全体のタグ一覧を表示することが出来ます。\n\u0026lt;ul\u0026gt; {{ range .Site.Taxonomies.tags }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Page.Permalink }}\u0026#34;\u0026gt;{{ .Page.Title }}\u0026lt;/a\u0026gt; {{ .Count }}\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 次回へ続く 今回はHugoサイトの全体像とHugoテンプレートに関する話でした。\n次回はテーマ改良を予定しています。\n  例えばタクソノミーに関してはlayouts/_default/terms.html, layouts/_default/terms.html.html, layouts/category/terms.htmlなどのバリエーションが存在する (詳細: Taxonomy Templates\r)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 厳密には違うものの、セクション以外のBranch Bundleはホームやタクソノミーしかないので事実上セクションを指しているようなものとした (詳細: Page Bundles\r)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 頭にアンダースコア_が付いていない点に注意\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo2/","tags":["Hugo"],"title":"Hugoで個人サイト制作(2) コンテンツ管理とテンプレート"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回(今回) 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r  今回は静的サイトジェネレータHugoの導入がメインです。\nHugoを導入する ということで、早速本題に入っていきます。\nOSがWindows10 Homeなので、Hugo公式のインストールガイド\rに沿って パッケージマネージャのScoop でインストールしました。\n上記インストールガイド内にHomebrewやMacPortsやChocolateyを利用したインストール方法も載っているのでHugoのインストールで悩む方はそんなにいないと思います。\nScoop自体のインストール方法は Scoopの公式サイト\rに載っているのでそちらを参照しました。\nscoop install hugo 上記インストール作業の後にPSやGit Bashなどからhugoコマンドが叩ければ無事インストール完了です。自分の場合はインストール後にOSごと一応再起動しておきました。\nサイト/ファイルの新規作成 Hugoでは新規にサイトを作成する際hugo new siteコマンドを実行することでディレクトリが自動生成されます。\nhugo new site \u0026lt;SITE_NAME\u0026gt; また、hugo newコマンドによってファイルを新規作成することも可能で、その場合は下記を実行するとnew-dirディレクトリの直下にnew_contents.mdが生成されます。\nhugo new new_dir/new_contents.md Hugoディレクトリの構造 例えば、hugo new site hogeとして作成されたhogeディレクトリには下記のディレクトリ群がデフォルトで含まれています。\n$ hugo new site hoge #(省略) $ ls -A ./hoge archetypes config.toml content data layouts static themes Hugoディレクトリの構造に関しては下記リンクが参考になります。\n Directory Structure\r HUGO のディレクトリ構成\r  このhoge/themes以下にHugoテーマ用のリポジトリをcloneしたりsubmodule addしたりして置いておくとテーマが適用されてプレビュー可能になります。\nテーマを選ぶ Hugo用のテーマは Hugo themes\rというサイトから選びました。\n最初に気に入ったテーマが8つありましたが、自分はその中でもこちらの Hugo Classic なるテーマのシンプルさに惹かれました。\n  Hugo Classic | Hugo Themes\r goodroot/hugo-classic\r  選んだテーマをどのようにして自分のサイトに取り入れるかは様々です。\n Hugoテーマのリポジトリを直接clone Hugoテーマのリポジトリをforkしてカスタマイズ Hugoテーマのリポジトリをサブモジュール化 (git submodule add)  自分は上記Hugo Classicを下記リポジトリへforkした後にカスタマイズして使っています。(CSSなど汚い部分がありますがご容赦下さい)\n snagimmo/hugo-classic\r  サイトのプレビュー Hugoにはサイト上のファイル群を編集する度に自動でプレビュー\u0026amp;更新が行われる LiveReload 機能があります。\nhugo server というコマンドをターミナルから実行することで、http://localhost:1313をデフォルトURLとしてHugo用プレビューサーバが立ち上がります。\nDraft(下書き記事)1を含めたプレビューをするためには-Dオプションを付けて\nhugo server -D などとする必要があります。この-Dオプションが無い場合は 公開設定をしたファイルしかプレビューされない 仕組みになっています。\nhugo serverにはその他に様々なオプションがあり、\n --buildDrafts, -D: 下書き(draft)記事も含めてプレビューする --ignoreCache: キャッシュを無視してプレビュー --noHTTPCache: HTTPキャッシュを作成しない --disableFastRender: ファイル変更がある度にサイト全体をリビルド --buildFuture, -F: 作成日時が現在時刻より進んだ記事もプレビュー --port \u0026lt;PORT\u0026gt;, -p \u0026lt;PORT\u0026gt;: プレビューサーバがlistenするポートを指定2  などを使い分けることで自分の望んだ状態でサイトプレビューを利用することが可能です。便利ですね。\nこれらのオプションはhugo server --helpでヘルプとして一覧表示することが出来ます。\nまたは公式Docsだとこちらのページに書いてあります。\n hugo server\r  ちなみに自分はいつも下記コマンドを実行しています。\nhugo server -D --ignoreCache --noHTTPCache --disableFastRender --buildFuture サイトのビルドと公開 公開用ファイルのビルドはserver等オプションなしの\nhugo で実行できます。Hugo用ディレクトリに移動後hugoの4文字を入力してEnterを押すだけです。\nhugoコマンドでビルドを実行するとhoge/publicディレクトリ以下に全てのビルド済みファイル群が出力されます。ホスティングサービスや各公開用サーバにはこのpublicディレクトリ以下の公開用ファイルのみを配置すれば良い、というわけです。\nなお、公開までの大まかな流れはQiitaのこの記事が分かりやすいと思います。\n Hugo で静的なサイト・ブログを構築しよう - Qiita\r  次回へ続く 今回はHugoの導入と簡単な説明をしました。\n次回はテーマ改良に向けてHugoサイトの全体像を把握し、Hugo Templateを理解します。\n  各MarkdownのFrontMatter内にdraft: trueと記述することで下書き扱いになり、draft: falseか無指定の場合は公開される\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Hugoサーバが使うデフォルトのポート番号は1313\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo1/","tags":["Hugo"],"title":"Hugoで個人サイト制作(1) Hugo導入"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回(今回) 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r  なお、今回はHugo導入以前のMarkdown管理体制への移行に際して考えた事などがメインです。\nHugoを導入したきっかけ 実はHugoを導入した背景には、テキストファイル管理体制の変更がありました。\n昔からPC上にメモを残すようにはしていたのですが、長い間管理する手間に悩んでいました。\n最初はtxtファイルに殴り書きしていたのですがそれは流石に非効率が過ぎるということで、iOSからクラウドで同期できる Simplenote\rというアプリをtxtと並行して3年ほど使っていました。\nSimplenoteは使いやすく軽量で良いアプリではあるものの、データが全てクラウド上で保管されてしまうのです。\nつまり、直接アプリ上でローカルファイルとして文書を管理する事が出来ないのです。\nこれでは、例えばgrepなどで内容を横断検索した時のような効率が損なわれます。\n確かにSimplenoteにもエクスポート機能はあるのですが、書いたその時点で自動的にローカルファイルと同期される状態が望ましいなと思い、代替となるテキスト管理手段を探していました。\n全てMarkdownへ移行 色々と調べる中で、「txtやアプリ上で管理する体制をやめ、全てMarkdownにしてしまおう」と思いつきました。\nというのも、例えばtxtファイルにメモを取りためると出てくる問題の一つとして、\n記法が統一されなくなりがち\nといった問題点があったからです。\nつまり、ファイル形式によって記法が予め決められている方が助かるな、と思った訳です。そこで記法が決まっているMarkdownが候補に挙がりました。\n実は「Markdownは箇条書きスタイルに向いている」ぐらいの認識しか持っていなかったので全てのメモをMarkdownにしてしまうのも考え物だなと思ったのですが、冷静に考えると\n 元々HTMLを簡易的に記述する目的で開発された言語  HTMLタグも埋め込んで利用可能   GitHubでよく見るREADME.mdなどもMarkdown TrelloやSlack1などの有名なツール群も軒並みMarkdown記法に対応 YAMLなどのFrontMatterも使える(場合がある)  などなどメリットがかなりあることに気付き、思いきって手元のローカルファイルのメモを全てMarkdownに置き換えることにしました。\nMarkdownつながりでHugoへ到達 以前から、個人で何かやるなら「ブログではなくサイトにしたい」と考えていました。記事も記事以外も載せられるメディアの方が良いなと思っていたので、ここは余り悩まずWebサイトにしようと決めました。\nそうした中で、色々現在の制作ツールを調べていきました。\nまた、ネット上で情報発信しているエンジニア諸氏の記事などをよく読んでいた影響か、「あまりゴチャゴチャしていないスッキリとした テキスト主体 のサイトが良いな」と思うようになっていました。\n「この人のサイト良いな」と思う度にWappalyzerやWhatRunsなどのChrome拡張機能を通じてどんなツールでそのサイトを構築したのかを何となく把握していたので、静的サイトジェネレータ という単語に辿り着くまでそう時間はかかりませんでした。\n静的サイトジェネレータは基本的にMarkdownなどのファイルから静的ファイル(動的な生成過程のないhtmlなど)を生成するのに使います。\nそして生成されたファイル群をNetlifyやGitHub Pagesなどのホスティングサービスで公開する、というのがサイト公開までの一連の流れです。\n他にも静的サイトジェネレータの候補はGatsby.jsやNext.jsやHexoやJekyllなど幾つかありました2が、Goで書かれていて一番高速とのことで Hugo\r を選ぶ事にしました。\n 次回へ続く 今回は導入以前の流れを振り返っただけでした。\n次回以降はHugoの導入やテーマ改良など具体的な話をしていきます。\n  厳密にはMarkdown記法とは異なりますが\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n ここに一通り載ってます→ Static Site Generators - Top Open Source SSGs | Jamstack\r\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo0/","tags":["Hugo"],"title":"Hugoで個人サイト制作(0) Hugo導入以前"}]