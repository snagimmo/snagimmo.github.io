[{"categories":["diy_keyboard"],"contents":"表題の通り、自作キーボード 1 上で動作する某ゲーム風のプログラムを作った。\nせっかく作ったので、下記の通りTwitterでプチ宣伝してみたところ……\n自作キーボード(Claw44など)で動く某インベーダー風のゲームを作った。微妙にアニメーションにも拘ってみた pic.twitter.com/qw6wlxtUus\n\u0026mdash; すなぎも (@snagimmo) September 17, 2021  こんな感じでそれなりにリアクションを頂きました。何だか結構な数の方々に見て頂いて恐縮です。\n自分は金曜夜にツイートを放り投げただけで完全放置状態だったのですが、自作キーボード界隈の先輩諸氏が自ら見つけて下さった2おかげで多くの方々に見て頂けました。ありがとうございました。\nCで書いたソースも一応GitHubの方で公開しているので、もし良かったら遊んでみて下さい。\n GitHub: snagimmo/qmk_shooter\r  ちなみに自分が Claw44 というキーボードを使っている関係で、同じClaw44をお使いの方は上記リポジトリに含まれるパッチファイル (diff.patch) を当てるだけで簡単に遊べるようになっています。\nという話でした。\n  自作PCしかり、コンピューターやデバイスで「自作」と自分で言い切るのは兎角憚られる気がするものの、実際半田付けとファーム改良程度は自分でやっているのでここでは「自作」と言わせていただく所存\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 余談ですが、自作キーボード界隈のアンテナ感度の高さはかなりのものだと思います\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/blog/2021/09/gaming-on-qmk/","tags":["電子工作","C言語","ゲーム"],"title":"自作キーボードで動くゲームを作った"},{"categories":null,"contents":"最近WSL2を弄って遊んでいる。\nどうせならGitHubに置いてあるdotfilesリポジトリ\rも洗練させたいなと思っていたので、WSL2のUbuntu環境にNeovimを導入するついでにdotfilesを弄ってみた。\n改行コードをLFに統一 まず以前から放置していたdotfilesリポジトリ全体のCR/LF改行を全て LFに統一 した(README.md以外)。\n b413e41\r  NeovimをWSL2環境に移す為あれこれ変更 自分はNeovimのプラグイン管理をdein.vim\rで行っている。\ndein側で読み込むinit.vim等の設定ファイルに必要な環境変数を.bashrcにセットした。\n e587688\r  次に、ローカルのWSL2でNeovim用の環境構築をあれこれ済ませた。\nあまりにあれこれ過ぎるので詳細は書かないが、とりあえずメモ代わりにinstall-nvim.shなどの適当な名前を付け、Neovimインストールと周辺Vimプラグインの利用に必要なパッケージ・ライブラリ・ツール群の導入作業をまとめておいた。\n 88b7c8f\r(install-nvim.shのコミット) 6164bd3\r(英語表現が間違ってたので修正)  上記コミットからも分かるように、Neovimの方は本家Vimと違って多くの外部ツールに依存していて結構厄介だ。\nnvim-treesitterを使っているのでtree-sitterとnode(Node.js)とgitとgccがまず必要だし、\ncoc-fzfを使っているのでfzfが必要だし、\ndenite.nvimを使っているのでPython3とmsgpack(バージョン1.0.0以上)が必要だ。\ngitやgccなど他のツールでも使う定番ものも多いとはいえ、改めて見るとやや繁雑だ。\nREADME.mdも更新 README.mdだけ改行がLFになっていないのも気になっていたのでNeovimの導入に必要なツール群を追加するついでにこちらの改行も変更した。\n 601814d\r  おわり 我ながら、環境構築やdotfiles弄りは デジタル盆栽 みたいなものだなと思う。\n生えて来る枝葉を剪定しているだけで時間が溶けてしまうので手際よく済ませたいところだ。\n","href":"/blog/2021/07/updated-nvim-dotfiles/","tags":["CLI","WSL2","Vim","Neovim"],"title":"dotfilesを更新してNeovimをWSL2でも使えるようにした"},{"categories":["tips"],"contents":"最近とある用事でDDNSを使い始めた。\nが、面倒で自動通知まわりの設定をせずに使ってしまっていたのでちゃんとやることにした。ついでにSlackにも自動で通知を送るようにしてみた。\nこの手の雑務はLinuxでcronを使うのが一般的だとは思うものの、 敢えてWindowsのタスクスケジューラでやってみた。\nシェルスクリプトの自動実行 Windows環境で Git for Windows を入れている場合、 下記コマンドを タスクスケジューラ に登録すればシェルスクリプトが自動実行できる\nC:\\Windows\\System32\\cmd.exe /c \u0026quot;\u0026quot;C:\\Program Files\\Git\\bin\\sh.exe\u0026quot; --login -i -- D:\\temp\\test.sh\u0026quot; bash.exeを呼び出してターミナル上でshコマンドを使うのではなくsh.exeを最初から呼び出すのがコツらしい\n参考  shell - Windows shortcut to run a Git Bash script - Stack Overflow\r  MyDNS.jpへの自動IP通知 公式\rにもあるようにMyDNS.jpはcurlコマンドを使って特定URLにアクセス(POST)する事でIP通知を行う事が出来る。\nIPv4だけ行うようにした。\n#!/bin/sh set -ex ## Load old IP address if [ ! -e ./old_ipv4 ]; then touch ./old_ipv4 fi old_ipv4=$(cat ./old_ipv4) ## Notify MyDNS.jp ipv4=$(curl -4s ifconfig.io) curl \u0026#34;https://www.mydns.jp/directip.html?MID=${MYDNS_MID}\u0026amp;PWD=${MYDNS_PASSWD}\u0026amp;IPV4ADDR=${ipv4}\u0026#34; ## Post JSON to a Slack webhook url msg=\u0026#39;{\u0026#34;blocks\u0026#34;: [{\u0026#34;type\u0026#34;: \u0026#34;section\u0026#34;,\u0026#34;text\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;,\u0026#34;text\u0026#34;: \u0026#34;📡DDNS Info📡\\n\\n\u0026lt;https://www.mydns.jp/|MyDNS.jp\u0026gt; was notified of your IP addresses successfully!\\n\\nOld IPv4: \u0026#39;${old_ipv4}\u0026#39;\\n*New* IPv4: *\u0026#39;${ipv4}\u0026#39;*\u0026#34;}}]}\u0026#39; echo ${msg} \u0026gt; msg.json curl -X POST -H \u0026#39;Content-type: application/json\u0026#39; -d @msg.json ${SLACK_WEBHOOK_NOTICE} rm ./msg.json ## Update old IP address echo $ipv4 \u0026gt; ./old_ipv4 $MYDNS_MID、 $MYDNS_PASSWD, $SLACK_WEBHOOK_NOTICEに関してはWindows側のユーザ環境変数を利用している。\nMyDNS.jp利用者であればMIDとパスワードの詳細は説明不要だと思うので省略。\nSlackへの自動通知について メッセージをJSONとして中間ファイルにし、それをcurlでSlack AppのIncoming Webhook URLにPOSTしている。\nJSON内にある\u0026quot;blocks\u0026quot;だが、これはSlackの Block Kit の仕組みを利用している。確か2019年頃から公式で扱われ始めた機能だったと思う1が、2018年以前に主流だった\u0026quot;attachments\u0026quot;の方が個人的には好きな見た目をしている2。\nタスクスケジューラに登録 あとは下記コマンドを各自のパスに合わせつつタスクスケジューラに登録すれば完了。\n通知タイミングは2日に1回・早朝にした。朝4時ごろにWindowsをスリープから叩き起こして活を入れている。\nC:\\Windows\\System32\\cmd.exe /c \u0026quot;\u0026quot;C:\\Program Files\\Git\\bin\\sh.exe\u0026quot; --login -i -- D:\\hoge\\notify_mydns.sh\u0026quot;   ここ参照: Slack Block Kitはめっちゃ使いやすいけど使いまくると怒られる｜daharas｜note\r\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n でも非推奨っぽいので使えない\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/blog/2021/07/notify-mydns/","tags":["CLI","DDNS"],"title":"タスクスケジューラでMyDNS.jpとSlackに自動通知"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3\r 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4\r 第7回(今回)  今回でこのシリーズは 終わり です。最後にCircleCIとGitHub Pagesで自動ビルド・自動デプロイを行い、Hugoサイトを公開します。\nCircleCI + GitHub Pagesによるサイト公開の流れ CircleCIとGitHub Pagesを使ったサイト公開までの大まかな流れは下記の通りです。\n CircleCIのアカウント作成、GitHubのHugo編集用リポジトリを紐づけておく GitHub Pages用リポジトリも作成しておく SSHキーを生成してCircleCIに秘密鍵、 GitHubに公開鍵をそれぞれ登録 Hugo編集用リポジトリに下記タスクを実行するROOT/.circleci/config.yml作成  Hugo編集用リポジトリへのpushをトリガーとしてCircleCIがビルドを実行 自動ビルドしたファイル群をCircleCIがGitHub Pages用リポジトリへ自動push(デプロイ)   Hugo編集用リポジトリにcommit\u0026amp;pushするとCircleCIのジョブが開始  ※CircleCIとGitHub Pagesのアカウント作成・リポジトリ設定はここでは省略します。\nHugoのビルドについて publicディレクトリについて Hugoは静的サイトをビルドする際、サイト用ディレクトリのルート直下(ROOT/)に\npublic\rというディレクトリを作成し、その直下に ビルド済みファイル群を配置 します。\npublicディレクトリの中身 例えば、2021年6月現在の当サイトのpublicディレクトリは大体こんな感じの構造です。\nD:\\proj\\hugo\\neoclassic\\public\u0026gt;tree D:. ├─blog │ └─2021 │ └─06 │ └─about-this-site ├─categories │ └─website ├─contact ├─css ├─dev │ ├─build-website-using-hugo0 │ ├─(中略) │ ├─build-website-using-hugo6 │ │ └─resize │ └─website ├─fontawesome ├─fonts ├─images ├─js ├─privacy ├─tags │ └─hugo └─updates ROOT/static直下のファイル群もROOT/public直下に配置される点が重要です。\nROOT/static/css/hoge.cssはそのままROOT/public/css/hoge.cssとして配置されます。\n公開範囲とpublicリポジトリについて 多くのHugoユーザーはこのROOT/publicディレクトリをそのまま(サイト編集用とは)別のリポジトリとして管理し、各種ホスティングサービス・サーバ上で公開しています。\nリポジトリ・ブランチをどのように設定・公開するかは人それぞれであり様々な方法があるので詳しくはここでは触れませんが、master(main)ブランチをそのまま公開する方法やgh-pagesブランチのみを公開する方法など、多岐にわたっています。\n私はサイト編集用リポジトリのmainブランチをそのままCircleCI上でビルドしてもらい、更に生成されたROOT/publicディレクトリを丸ごとGitHub Pages用リポジトリにpushしてもらうことにしました。\n参考記事\r Circle CIを使用したWebページのGitHub Pagesへのデプロイ\r  SSHキーを生成してCircleCIに登録 SSHの詳しい解説は他のサイトでもあるので省略します。\n下記コマンド実行でOKです。\nssh-keygen -t rsa -b 4096 -m pem -C \u0026#34;CircleCI\u0026#34; -f id_rsa_circleci -N \u0026#34;\u0026#34; これでid_rsa_circleciとid_rsa_circleci.pubのペアが作成されます。\n詳しくは下記公式Docsに載っています。「Cloud 版 CircleCI の場合」という項目が今回該当する説明だと思います。\n CircleCI に SSH 鍵を登録する - CircleCI\r  config.ymlの実例 次にビルド\u0026amp;デプロイタスクを設定するためのコンフィグファイルを作成します。\ncimg/goの例 (駄目な例) 色々試しましたが、cimg/goというDockerイメージを使ってあれこれやっている内に自動ビルドとデプロイに成功しました。そのconfig.ymlがこちら(無意味なキャッシュ操作も含まれていますが)。\nversion: 2.1 jobs: build: working_directory: ~/repo docker: - image: cimg/go:1.16 steps: - add_ssh_keys: fingerprints: - \u0026#34;YO:UR:FI:NG:ER:PR:IN:TS\u0026#34; - run: name: Clone hugo command: |mkdir ~/src; cd $_ git clone https://github.com/gohugoio/hugo.git - restore_cache: keys: - go-mod-v4-{{ checksum \u0026#34;~/src/hugo/go.sum\u0026#34; }} - run: name: Install hugo command: |cd ~/src/hugo go install - save_cache: key: go-mod-v4-{{ checksum \u0026#34;~/src/hugo/go.sum\u0026#34; }} paths: - \u0026#34;/go/pkg/mod\u0026#34; - checkout - run: name: Hugo build command: |rm -rf public git clone git@github.com:snagimmo/snagimmo.github.io public hugo - run: name: Push repo to github.io command: |cd public git config --global user.name \u0026#34;CircleCI\u0026#34; git config --global user.email \u0026#34;circleci@example.com\u0026#34; git add . msg=\u0026#34;rebuild... `TZ=\u0026#39;Asia/Tokyo\u0026#39; date -Iseconds | sed -e \u0026#39;s/+09:00//g\u0026#39; | sed -e \u0026#39;s/T/ /g\u0026#39;`\u0026#34; git commit -m \u0026#34;$msg\u0026#34; git push origin main workflows: version: 2.1 main: jobs: - build: filters: branches: only: main 参考: CircleCIでHugoのビルドを自動化した話 - 行けたら行く\r……が、この設定では駄目でした。\nやり方がまずいのかも知れませんが、とにかくこの設定では 毎回Hugoをインストールするのに1分20～1分30秒 ほどかかっていました。何とかHugoインストールの工程をキャッシュに保存して読み出せないかなと考えたのですが、CircleCIやこの周辺の設定に疎く、数日の間はこれで騙し騙しやっていました。\n\r\r\rそれでも、上記画像のように余りにも遅すぎるので、違う方法を採用することにしました。\nOrb(circleci/hugo)の例 (完成例) 調べた結果、CircleCIの Orb というビルド用テンプレートのようなものが実行速度などに優れているらしい事を知り、早速CircleCIのドキュメントなどを読みつつconfig.ymlを下記の通り書き換えました。\nversion: 2.1 orbs: hugo: circleci/hugo@1.2.2 jobs: deploy: docker: - image: cimg/base:stable steps: - add_ssh_keys: fingerprints: - \u0026#34;YO:UR:FI:NG:ER:PR:IN:TS\u0026#34; - attach_workspace: at: . - run: name: Copy built public to cloned public command: |echo \u0026#34;Hostname github.com\u0026#34; \u0026gt;\u0026gt; ~/.ssh/config echo \u0026#34;StrictHostKeyChecking no\u0026#34; \u0026gt;\u0026gt; ~/.ssh/config git config --global user.name \u0026#34;CircleCI\u0026#34; git config --global user.email \u0026#34;circleci@example.com\u0026#34; git clone git@github.com:snagimmo/snagimmo.github.io deploy cd deploy rm -vrf ./* cp -v -R ../public/* ./ - run: name: Push repo to github.io command: |cd deploy git add . -f msg=\u0026#34;rebuild... `TZ=\u0026#39;Asia/Tokyo\u0026#39; date -Iseconds | sed -e \u0026#39;s/+09:00//g\u0026#39; | sed -e \u0026#39;s/T/ /g\u0026#39;`\u0026#34; git commit -m \u0026#34;$msg\u0026#34; git push origin main -f workflows: version: 2.1 main: jobs: - hugo/build: html-proofer: false filters: branches: only: main - deploy: requires: - hugo/build filters: branches: only: main 参考: Hugo, Github Pages, CircleCIつかってブログ構築 - abekoh’s tech note\r結果、全てのタスクが 10～30秒 程度で終わるようになりました。Orb様様です。\n\r\r\r\r\r\rそして同時に、このconfig.ymlの完成を以て、Hugoサイト更新用の準備は整ったという訳です。あとは記事を書いてHugo編集用リポジトリの変更をcommit\u0026amp;pushするだけで、自動でCircleCIがビルドとデプロイを行ってくれます。\nconfig.ymlの注意点 上記のYAMLを作成する上で詰まったポイントなどをメモしておきます。\nDeploy KeyとAdditional SSH Keysについて 色々と調べものをしている際、\n デフォルトのCircleCI側で用意されたSSHキーはRead Onlyなので削除するべきだ\n と書いている記事を多く見かけましたが、結論を書くと2021年6月時点では デフォルトのSSHキー(Deploy Key)を削除しなくても大丈夫 でした(むしろ削除したら紐づけたリポジトリからのcloneが動作しなかった)。\nデフォルトのSSHキーは残したままで別途自分で作成したSSHキー(Additional SSH Keys)を登録しただけですが、CircleCI上のビルド・デプロイタスクは正常に動作しています。\n\r\r\r\r\r\rその代わりと言いますか、SSHキーは削除しなくても良かったのですが、上記の実例にもあるように StrictHostKeyChecking=noというオプションを~/.ssh/configに追記する必要がありました。\necho \u0026#34;Hostname github.com\u0026#34; \u0026gt;\u0026gt; ~/.ssh/config echo \u0026#34;StrictHostKeyChecking no\u0026#34; \u0026gt;\u0026gt; ~/.ssh/config この行が 重要 です。これを追加するまではリポジトリからのcloneに失敗します。\n参考記事\r Hugo, Github Pages, CircleCIつかってブログ構築 - abekoh’s tech note\r こちらにStrictHostKeyChecking=noの話が載っています   CircleCIでHugoのビルドを自動化した話 - 行けたら行く\r  CircleCIのExecutorについて 実は、cimg/goよりも更に前は下記のようなGo言語用イメージなどを使っていました。\ndocker: - image: circleci/golang:1.15.8 ドキュメントを読み、これが 古いCircleCI用のイメージ だと知り、cimg/goを使うようになりました(最終的にOrbに移行するのでこれも使わなくなりますが)。\ndocker: - image: cimg/go:1.16 下記の通りcircleci/golangに関しては完全に公式でも旧式のものとして扱われています。\ncimg/go - CircleCI\rより引用\n This image is designed to supercede the legacy CircleCI Go image, circleci/golang.\n CircleCI側が用意する新しいGo言語用のDockerイメージはcimg/goになっているので、Orbでないとしてもcimgの使用をおすすめします。\nOrbについて 前述の通り最終的にはcircleci/golangもcimg/goもやめて、CircleCIの Orb を使うことにした訳ですが、理由はビルドにかかる 時間が圧倒的に短縮出来る からです。\nざっくりとした理解ですが、Orbを使うとどうやらHugoのインストール処理もcheckoutジョブもhugoコマンドによるビルドも無しで、自動的にバックグラウンド処理としてCircleCIに紐づけたプロジェクト(Hugo編集用リポジトリ)をcloneし、それに対してHugoがビルドを行ってくれるらしいです。\nしかもその工程が 数秒から十数秒程度 で終わります。\n\r\r\r\r\r\r至れり尽くせりです。\nまた、2020年の記事にも下記のような記述があります。\nHugo が動く最小構成の Docker イメージを作る - Qiita\rより引用\n 現在 Hugo 公式 (gohugoio) が提供する Docker image はありません。\nDocker Hub に gohugoio のアカウントがありますが、あれは GoHugoIO が管理しているものではありません。\n最近の Hugo は連携できる外部ツールも増えて、すべての機能を利用する場合にはイメージサイズを小さくすることが難しくなりました。\nv0.56 から導入された Hugo Modules は Go Modules と Git に依存しています。従って Hugo Modules が利用できる Docker image にはGo言語の環境を含めなければなりません。この時点でイメージサイズは alpine 系でも 417MB 近くになります。\n ですので、これからCircleCIでHugoを利用される場合、Executorをどうするか悩むよりも初めからOrbを使うのが速くて\u0026amp;早くて良いのではないかと思います。\n2回もcd deployしている理由 気付いた方がおられると思いますが、上記実例では2回cd deployしています。\n- run: name: Copy built public to cloned public command: |# 省略 cd deploy # 省略 - run: name: Push repo to github.io command: |cd deploy # 省略 git commit -m \u0026#34;$msg\u0026#34; git push origin main -f これは何故かと言うと、Orb使用時にrunジョブを跨ぐとどうやら下記のattach_workspaceジョブで移動(指定)したディレクトリにもう一度移動するらしく、2度目のcdコマンドで移動しないと最後のgitコマンドがエラーになるからです。\n- attach_workspace: at: . 個人的にはpush用のrunジョブは名前を付けて分けておきたかったので、こういった形で2回cdする事になりました。\nconfig.ymlの構文チェッカーを使う 公式が用意したValidatorのようなものがあるのでそれを使うのも良いと思います。\nこちらからDLしてパスを通せば使えます。\nリンク: Releases · CircleCI-Public/circleci-cli\rインストール後、ROOT/.circleciディレクトリに移動して下記コマンドを実行すると.circleci/config.ymlが文法的に正しいかどうかチェックすることが出来ます。\ncd .circleci circleci config validate config.yml 独自ドメインを利用する 私の場合はサイト公開後にGoogle Domainsで取得した独自ドメインを設定しました。\nGitHub PagesデフォルトのURLsnagimmo.github.ioでも良いのですが、取ってしまったドメインを活用しようかなと。\nまずGitHub Pages公式の説明にもあるように、Windows環境1だとdigコマンドがデフォルトで使えない為、BIND をインストールしておきました。\nリンク: Downloads - ISC\rちょっと分かりにくいですが、Current-Stable と書いてあるリンクからDL出来ます。\n\r\r\r\r\r\rBINDの設定に関してはここを参考にしました。\nリンク: Windowsでdigコマンドを使えるようにする – TakeNotes.JP\rあとは下記の記事群を読みつつGitHub Pagesに独自ドメインを設定しました。\n GitHub Pages サイトのカスタムドメインを管理する - GitHub Docs\r HTTPS で GitHub Pages サイトを保護する - GitHub Docs\r GitHub Pages に Google Domains で購入した独自ドメインを設定する - もやし丸の備忘録\r  21/07/02追記 GitHub Pages上でのHTTPS化設定が煩雑だったのでCloudflareを利用してHTTPS化しました。\n GitHub Pages \u0026#43; CloudFlare で独自ドメインをSSL化する - Qiita\r  最後に さて、これまでの記事でHugoの導入からHugoサイトの構築・公開までを一通り扱いました。\nこのシリーズはこれにて終了です。\nここまでお読みいただき、誠にありがとうございました。また同時に、元がメモという事もあり冗長かつ雑然とした記事になってしまい申し訳なく思います。\n検索エンジンなどから辿り着く方を想定して書いているのですが、何らかの疑問やトラブル解決の一助になれば幸いです。\nそれでは。\n  導入時の環境はWindows10 Home (バージョン20H2 )\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo7/","tags":["Hugo"],"title":"Hugoで個人サイト制作(7) Hugoサイトの公開"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3\r 第6回(今回) 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開\r  今回でHugoテーマのカスタマイズは終了です。今回も機能面の追加などをしていきます。\nサイト内全文検索としてLunrを導入 全文検索用のJSONファイルを生成 サイト内全文検索を行うには、まずその対象となるテキスト群を含んだJSONなどのファイルを生成しておく必要があります。\nHugoの場合は予め 全文検索用JSONファイル出力機能 が存在しています。詳しくは下記公式Docsに書いてあります。\n公式Docs: Custom Output Formats | Hugo\r Hugo can output content in multiple formats, including calendar events, e-book formats, Google AMP, and JSON search indexes, or any custom text format.\n 「 JSON search indexes 」とありますね。これの事です。ROOT/config.toml内に下記項目を追加することで自動生成することが出来ます。\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] この設定により、自動でindex.htmlファイル1とindex.xmlファイル2とindex.jsonファイルがドキュメントルートに生成されます。\n実ファイルがローカルに生成されるのではなくURL上でhttp(s)://DOMAIN/XXX.htmlなどの形でアクセス出来るようになる、という点に注意です。\nこの際、ROOT/layouts/_default直下に同名のindex.jsonというテンプレートファイルを作成することで、Hugoによって自動生成されたindex.jsonファイルの内容を制御・変更することが可能になります。\n私が作成したindex.jsonのテンプレートは下記の通りです。\n{{- $.Scratch.Add \u0026#34;index\u0026#34; slice -}} {{- $section := $.Site.GetPage \u0026#34;section\u0026#34; .Section -}} {{- range .Site.RegularPages -}} {{- if and (.IsDescendant $section) (not .Params.private) -}} {{- $.Scratch.Add \u0026#34;index\u0026#34; (dict \u0026#34;title\u0026#34; .Title \u0026#34;tags\u0026#34; .Params.tags \u0026#34;categories\u0026#34; .Params.categories \u0026#34;contents\u0026#34; .Plain \u0026#34;href\u0026#34; .URL ) -}} {{- end -}} {{- end -}} {{- $.Scratch.Get \u0026#34;index\u0026#34; | jsonify -}} private: trueでない時は全て全文検索用のJSONに含めるという設定です。下記の参考記事群に大分助けられました。感謝です。\n参考記事\r Hugo で全記事いりの JSON ファイルをつくる - blog.8-p.info\r hugoで作ったblogにalgoliaで全文検索機能を追加する | uni-3 log\r  Lunrのソース群を配置 色々と調べたところ、Hugoで全文検索を導入するにはTinysearchやLunrが良いらしいとの情報を得ました。結果的に Lunr に決めました。\nさて、参考にさせて頂いた記事のリンク先(後述)には\n lunr.jsはolivernn/lunr.js \rに、lunr.jp.js, lunr.multi.js, lunr.stemmer.support.js, tinyseg.jsはMihaiValentin/lunr-languages \rにある。\n とあるのですが、Lunr側のスクリプトを読むと事情が少し異なっています。\n// jp is the country code, while ja is the language code // a new lunr.ja.js has been created, but in order to // keep the backward compatibility, we\u0026#39;ll leave the lunr.jp.js // here for a while, and just make it use the new lunr.ja.js 「後方互換性の為にlunr.jp.jsを残しておくが、本来jpはカントリーコードであり言語コードはjaなので正式にはjaの方が最適な表現だ」ということらしいです。\n要するに、後から作成されたlunr.ja.jsの方を使ってくれ、という事でしょう。\nということで、必要なスクリプト群は下記 5つ と判明しました(動作検証済み)。\n lunr.js\r lunr.ja.js\r ←これ1つで動作するのでlunr.jp.jsは不要です lunr.multi.js\r lunr.stemmer.support.js\r tinyseg.js\r  全てDLしてきたら、例によってROOT/static/js直下に置いておきます。\n参考記事\r Hugo \u0026#43; Lunrによる日本語全文検索 | Unigiri\r  検索用スクリプト作成 引き続き、下記の記事を参考にROOT/static/js/search.jsを作成します。\nこちら: Hugo \u0026#43; Lunrによる日本語全文検索 | Unigiri\r素晴らしいスクリプトを公開して下さって大変有難いのですが、ここで一点だけ詰まったので注意点を書いておきます。\n下記のようにgetJSON()の引数にindex.jsonが指定されている部分が4行目にあるのですが、ここで頭に/を付けないとスクリプトが読み込まれずエラーになります。ここさえ変更すれば動作すると思います。\n// 変更前 $.getJSON(\u0026#34;index.json\u0026#34;).done(function(index) { // 変更後 $.getJSON(\u0026#34;/index.json\u0026#34;).done(function(index) { 後はこれをlayouts/partials/footer.htmlから呼び出せばスクリプトの読み込み自体はOKです。\n\u0026lt;!-- search scripts with Lunr \u0026amp; jQuery --\u0026gt; \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.3.1.min.js\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/js/lunr.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/js/lunr.stemmer.support.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/js/tinyseg.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/js/lunr.ja.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/js/lunr.multi.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/js/search.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 検索窓設置用のPartial Template作成 さて、スクリプトを機能させる為の 検索窓 を付けます。\n私はROOT/layouts/partials/search.htmlというPartial Templateとして作成しました。このテンプレートは自作です。\n\u0026lt;div class=\u0026#34;search-area\u0026#34;\u0026gt; \u0026lt;form class=\u0026#34;search-form\u0026#34; action=\u0026#34;{{ .Permalink | safeURL }}\u0026#34; onkeyup=\u0026#34;search()\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;search-text\u0026#34; id=\u0026#34;search-query\u0026#34; placeholder=\u0026#34;Search this site\u0026#34; autocomplete=\u0026#34;off\u0026#34;/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div class=\u0026#34;search-button\u0026#34;\u0026gt; {{ partial \u0026#34;fontawesome.html\u0026#34; \u0026#34;search\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026#34;search-results\u0026#34; id=\u0026#34;results\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; 途中まで試行錯誤していた残骸として使っていないonkeyupなども残っていますが、このPartial Templateを下記の通りROOT/layouts/_default/single.html(各記事用テンプレートファイル)の冒頭で呼び出しています。\n{{ partial \u0026#34;header.html\u0026#34; . }} {{ partial \u0026#34;search.html\u0026#34; . }} \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;article\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;article-meta\u0026#34;\u0026gt; \u0026lt;!-- 以下省略 --\u0026gt; 以上でHugoとLunr.jsを組み合わせた全文検索用の簡易検索窓がサイト上部に設置できます。\n参考記事\r 検索窓をデザインする\r  OGPに対応させる サイトを Open Graph Protocol(OGP) に対応させていきます。\nURLがSlackやTwitterなどに貼られると自動でサイトカードなどとして変換されるあの仕組みの事ですね。\nHugoではデフォルトでOGP用のテンプレートが用意されており、以下の2行を\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;内部に追記するだけで使えるようになっています。\n\u0026lt;head\u0026gt; \u0026lt;!-- 省略 --\u0026gt; {{ template \u0026#34;_internal/opengraph.html\u0026#34; . }} {{ template \u0026#34;_internal/twitter_cards.html\u0026#34; . }} \u0026lt;!-- 省略 --\u0026gt; \u0026lt;/head\u0026gt; ただ、このテンプレートでは背後でどのような動作をしているか今一つ分からないので、自分で追加する事にしました。\n\u0026lt;head\u0026gt; \u0026lt;!-- 省略 --\u0026gt; \u0026lt;meta property=\u0026#34;og:type\u0026#34; content=\u0026#34;{{ if .IsHome }}blog{{ else }}article{{ end }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:url\u0026#34; content=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;{{ .Site.BaseURL }}images/profile.png\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;{{ if .IsHome }}{{ $.Site.Title }}{{ else }}{{ .Title }}{{ end }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:site_name\u0026#34; content=\u0026#34;{{ $.Site.Title }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:description\u0026#34; content=\u0026#34;{{ if .IsHome }}{{ $.Site.Params.Description }}{{ else }}{{ .Description }}{{ end }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:card\u0026#34; content=\u0026#34;summary\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:site\u0026#34; content=\u0026#34;@{{ .Site.Params.author }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:creator\u0026#34; content=\u0026#34;@{{ .Site.Params.author }}\u0026#34;\u0026gt; \u0026lt;!-- 省略 --\u0026gt; \u0026lt;/head\u0026gt; また、ROOT/config.tomlには下記のように.Site.Params.XXXの設定をしてあります。\n[params] description = \u0026#34;snagimmo(すなぎも)の個人サイト\u0026#34; author = \u0026#34;snagimmo\u0026#34; # 以下省略 IsHomeで場合分けをして無駄にog:typeをblogかarticleかで分けたりもしていますが、とにかく無事にOGPが適用されてカードが表示されているのは確認したのでそれで良しとしました。\nOGPの厄介だなと思うところはローカルでの確認が難しいところです。デプロイしてから下記の定番ツールで色々検証させて貰いました。\n参考リンク\r OGP確認：facebook、twitter、LINE、はてなのシェア時の画像・文章を表示 | ラッコツールズ🔧\r Card Validator | Twitter Developers\r  RSSフィードの改良 RSS用のテンプレート デフォルトではRSSフィード用の出力ファイル名はindex.xmlとなっています。\n公式Docs: RSS Templates #Lookup Order for RSS Templates | Hugo\r上記公式Docsにもある通り、Hugoは「探索順序」通りにファイルパスを探索します。このHugoが探索するファイルパスのいずれかにRSS用のテンプレートファイルを設置することでRSSフィードの内容を変える事が出来ます。\n私の場合はROOT/layouts/_default/rss.xmlとして下記の通りテンプレートを作成しています(長いのでGitHubへのリンクにしました)。\n hugo-classic/rss.xml at modified · snagimmo/hugo-classic\r  RSSファイルのリネーム 次のようにROOT/config.tomlでRSSフィード用の出力ファイル名をfeedに指定することでURL上はrss.xmlではなくfeed.xmlがRSS用URLとなるようにしています。\n[outputFormats] [outputFormats.RSS] mediaType = \u0026#34;application/rss+xml\u0026#34; baseName = \u0026#34;feed\u0026#34; protocol = \u0026#34;https://\u0026#34; 注意すべき点は、繰り返しになりますが Hugoの探索順序(Lookup Order) です。\nローカルのファイル名をいきなりfeed.xmlとしても、その feed.xmlを含む探索パスをHugoは持たない 為に、URLにも反映されずRSSフィードの名前はrss.xmlから変わりません。\nよって、一度テンプレート用ファイル名を上記のLookup Order内のいずれかから選択しておき、同時にconfig.toml内で出力名を指定することでしかRSSフィード名を任意の名前にすることは出来ないわけです。\n参考記事\r Customize RSS in Hugo Website - Coding N Concepts\r  RSSフィードの情報量を制限 RSSではdescriptionという項目内に要約文が載っていますが、サイトによってほぼコンテンツ全文を載せるか、要約文のみ載せるか、一行コメントだけ載せるか、やり方は様々だと思います。\n私の場合は、下記のように\u0026lt;content:encoded\u0026gt;へコンテンツ内容を載せてみました。\n実例がこちらです。descriptionは500字程度にまとめつつ、Feedlyなどで見た時には記事内容が表示されるようにしました。\n\u0026lt;description\u0026gt;{{ if .Description }}{{ .Description }}{{ else }}{{ substr .Summary 0 500 | safeHTML }}{{ if gt (len .Summary) 500 }}...{{ end }}{{ end }}\u0026lt;/description\u0026gt; \u0026lt;content:encoded\u0026gt; {{ `\u0026lt;![CDATA[` | safeHTML }} {{ .Content }} {{ `]]\u0026gt;` | safeHTML }} \u0026lt;/content:encoded\u0026gt; Hugoがデフォルトで用意している.Summaryという要約文用の変数があるのですが、こちらを更にsubstrという関数で500文字以下に短くしています。\n仮に500文字をSummaryが超過していた場合のみ、行末に省略記号...を付ける事にしています。\nもし記事のFrontMatterに個別のdescriptionが設定されていた場合はそちらを.Summaryよりも優先して載せるようにしました。\nフォントの見直し Hugo Classicには元々ROOT/static/css/fonts.cssというフォント用CSSファイルがあるのでそれを編集しました。\n最終的には下記のようになりました。\nGitHub: hugo-classic/fonts.css at modified · snagimmo/hugo-classic\rそれぞれの部分についてはこれから触れていきます。\nヘッダとフッタのフォント header, footer { font-family: \u0026#39;Inter\u0026#39; !important; } Hugo Classicで元々利用されていた Inter というフォントが気に入ったのでこれはこのまま使うことにしました。このサイトではヘッダとフッタの英字部分(home, contactなど)にこのフォントを利用しています。\nリンク\r Inter font family\r  コードブロックのフォント pre, code { font-family: \u0026#39;Consolas\u0026#39;, \u0026#39;Ricty Diminished\u0026#39;, \u0026#39;Inconsolata\u0026#39;, Meiryo, \u0026#34;メイリオ\u0026#34;, \u0026#39;Noto Sans JP\u0026#39;, \u0026#39;Kosugi\u0026#39; !important; } コードブロック系は Consolas, Consolasが無い環境では Inconsolata を使うようにしました。 Ricty Diminishedも好きなフォントなので気が変わった時の為に一応加えておきました。\nブロック内の和文フォントに関しては基本的にメイリオで、メイリオが無ければ Noto Sans JP を使うようにしています。Kosugi は上のRicty Diminishedと同じ位置づけです。\nリンク\r Inconsolata | google webfonts helper\r edihbrandon/RictyDiminished: Ricty Diminished \u0026amp;mdash; fonts for programming\r Noto Sans JP - Google Fonts\r Kosugi - Google Fonts\r google webfonts helper\r Google Fonts - Attribution\r  メインフォントをWebフォント化 一番気に入ってメインにしたいと思ったのが Segoe UI というフォントだったのですが、Windows以外のiOSなどの環境だと読み込まれなかったのでWebフォントとしてどの環境でも表示されるようにしました。\nこちらの Andrew CraswellさんのGist\rに情報があり、下記の通り何とかSegoe UIをWebフォント化することが出来ました。\n/* Segoe UI */ @font-face { font-family: SegoeUI; src: local(\u0026#34;Segoe UI\u0026#34;), url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.woff2) format(\u0026#34;woff2\u0026#34;), url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.woff) format(\u0026#34;woff\u0026#34;), url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.ttf) format(\u0026#34;truetype\u0026#34;); font-weight: 400; } 共有ボタン設置 SNS用の共有ボタンも一応付けておこうということで下記の通り用意してみました。\nGitHub: hugo-classic/share.html at modified · snagimmo/hugo-classic\rCSSはこの通りです。\n/* Sharing buttons */ .sharing-buttons { display: inline-block; margin-bottom: -1.5em; } .sharing-buttons-area { float: left; margin-top: 0em; margin-right: 0.5em; } .sharing-buttons .inline-svg { float: left; padding: 0.1em 1em 0.1em 1em; margin-left: 0.9em; margin-right: 0.9em; background-color: #ddd; border-radius: 8px; border-color: #fff; } .sharing-buttons .inline-svg:hover { background-color: #fff; } .sharing-button-twitter .inline-svg:hover { color: #1d9bf0 !important; } .sharing-button-facebook .inline-svg:hover { color: #1778f2 !important; } .sharing-button-hatena .inline-svg:hover { color: #00a4de !important; } .sharing-button-pocket .inline-svg:hover { color: #ee4056 !important; } 出来栄えはこんな感じです。\n※画像をクリックorタップするとgifアニメが表示されます\n\r\r\rSVGとして各社のロゴを使わせてもらう過程でちょっと調べ物をしたのですが、Twitterのブランドカラーが数年毎に微妙に変化していたりFacebookのブランドロゴが刷新されていたりと個人的に色々と驚きがありました。ボーっとしているとサイトで使っているロゴやカラーがいつの間にか過去のものになっている、という事になりそうです。\n参考記事\r Hugoにシェアボタンを追加する-色々な設定の記録たち\r  次回へ続く\r今回はHugoテーマカスタマイズの最終回でした。\n次回はCircleCI + GitHub Pagesによる自動デプロイを予定しています。\n  通常は自動生成されたhttp(s)://DOMAIN/index.html にアクセスするとhttp(s)://DOMAIN/へ飛ばされます。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n これに関してはRSSフィードの項目でまた触れますが、実は別の設定によりRSSフィード用XMLファイル名も自由に変更出来ます。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo6/","tags":["Hugo"],"title":"Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r 第5回(今回) 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4\r 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開\r  今回もHugoテーマをカスタマイズしていきます。前回記事まではシンタックスハイライトやSVGファイルなどの見た目を直して来ましたが、今回は機能面の追加をしていきます。\nディレクトリ構成とパーマリンクの設定 これはHugoのようなツールを長期的に使っていく場合に極めて重要になる話です。ファイルとディレクトリの構造は最初に決めておくと後がラクなので、最初にしっかりと考えておく必要があると思います。\nローカルディレクトリとURLの関係 さて、まずはURLに関してですが、Hugoでも通常の(SSG1を使わない)サイトと同様、ローカルディレクトリの構造とURLがほぼそのまま一致します。\n例えばROOT/content/blog/2020/に置いたhoge.mdという記事は\nhttp(s)://DOMAIN/blog/2020/hoge/\rといったURLになります。\nパーマリンクについて この パーマリンク(Permalinks) はユーザ側で変更することが出来ます。詳しくは公式Docsに書いてあります。\n公式Docs: URL Management #Permalinks | Hugo\rHugo Classicではテーマデフォルトのパーマリンクが下記のように設定されています。\n[permalinks] post = \u0026#34;/blog/:year/:month/:day/:slug\u0026#34; post =から始まる行は postというディレクトリ(セクション)以下に置かれたコンテンツファイル に関する設定です。\n例えば上記のような設定でローカルにROOT/content/post/2021/hoge.mdというコンテンツを作るとします。更にこの記事の編集された日付がMarkdown内部で1999/01/31に設定されているとします。\nこの時/blog/:year/:month/:day/:slugという パーマリンク設定が実ファイルのローカルディレクトリ構造よりも優先 して読み込まれます。\nその結果、URLは\nhttp(s)://DOMAIN/blog/1999/01/31/hoge/\rとなります。\nslugについて :slugというのは記事タイトルの代わりにURLの一部とする為の文字列のことで、Hugoに限らずよく利用されています。\nHugoでは一応 日本語の マルチバイト文字も:slugとしてURLの一部にする事が可能 です。\nまた、上記のconfig.tomlの例において:slugだけをパーマリンク設定から削除すると、:year/:month/:dayが重複する他の記事と同じURLが生成されてしまいます。その場合のURLは下記のようになります。\nhttp(s)://DOMAIN/blog/1999/01/30/\rよって、:slugはパーマリンクを設定するなら事実上必須だと言えます。\n一方で、パーマリンクの方に:slugはあるもののFrontMatterに:slugを設定していない場合、記事タイトルが自動でURLとして利用 されることになっています。\nパーマリンク設定そのものが存在しない場合は冒頭で説明した通り、ほぼローカルディレクトリの構造通りにURLが生成されます。\nディレクトリ構成を決める 自分の場合は下記のようにしました。第2回目の記事\rでも説明したように、content直下のディレクトリ群はそのままセクション(≒Branch Bundle)として機能します。\ncontent ├─blog ├─dev ├─draft └─fontawesome パーマリンクを設定 私は下記のように設定しました。\n[permalinks] blog = \u0026#34;/:section/:year/:month/:slug/\u0026#34; dev = \u0026#34;/:section/:slug/\u0026#34; draft = \u0026#34;/:section/:year/:month/:slug/\u0026#34; 他のサイトの設定例も幾つか見ましたが、下記のパターンが多かったです。\n /blog/:year/:month/:day/:slug/ /posts/:section/:slug/ /posts/:slug/ /post/:slug/  サブセクションをカテゴリ化 エイリアス(Aliases)について パーマリンクを設定した状態でも、各Markdown内のFront Matterに エイリアス(Aliases) を設定すれば自由にURLを設定する事も可能です。\n公式Docs: URL Management #Aliases | Hugo\r私はこれを利用し、サブセクション(ROOT/content/dev/website/)のページURL\nhttp(s)://DOMAIN/dev/website/\rからHugoが自動生成したカテゴリーページ\nhttp(s)://DOMAIN/categories/website/\rに自動遷移するように設定しました。\nエイリアスを利用した自動遷移 実例を載せておきます。ROOT/content/dev/website/_index.mdのFrontMatterに下記のようなエイリアスを設定することでカテゴリーページへの遷移が可能になります(他に良いやり方があるかも知れませんが現時点ではこうしています)。\n--- title: \u0026#39;website\u0026#39; url: /categories/website/ aliases: - /dev/website/ - /categories/website/ # 省略 --- 自動遷移の注意点 当初詰まったのは、urlにカテゴリーページへのリンクを設定する必要がある事です。 これが無いと 遷移が機能しません ので注意して下さい。\naliasesの設定だけでurlの設定が無いと、遷移が発生せずカテゴリーページとサブセクションページが別々に存在する状態になります。\n逆にurlの設定だけでaliasesが無いと、サブセクションページが404になり、カテゴリーページだけ存在する状態になります。\nこの 両方が揃った時のみ遷移が機能 します。\n試しにこちらのリンク\rを踏めばお分かり頂けると思います。 https://snagimmo.net/dev/website/ から https://snagimmo.net/categories/website/ へ自動で遷移するはずです。\n自動遷移させたかった理由 何故このような設定が必要だったかと言うと、ROOT/content以下の全てのMarkdownファイルとディレクトリ構造をチェックして各セクション・サブセクションへのリンクを含んだROOT/content/_index.mdを自動生成するスクリプト2を手元で書いていたのですが、\nこのスクリプトによって自動生成された 相対パス がローカルディレクトリをそのまま追従した サブセクションへのリンク となってしまい、カテゴリーページとの論理的重複が発生した為です。\nローカルでのディレクトリ構成は出来るだけHugoのセクション・サブセクションと連動させてシンプルにしておきつつ、それでいて各ディレクトリをサブセクションとして機能させるのもカテゴリーとして機能させるのも自由に選択したいと考えていた為、このような手段を採用しました。\nFrontMatterにあれこれ追加 各記事の FrontMatter は前述のパーマリンク設定も含めて色々融通が利くので便利です。\n例えばデフォルトでは\ndraft: true といった項目が用意されており、この設定によってHugo側が「下書き記事」と見なしてビルドしないでスルーしてくれる訳ですが、これ以外にもユーザが自由に値を追加してHugo側の挙動を変える事が出来ます。\n私は下記のような値を追加しました。詳しくはそれぞれ後述の項目で触れます。\n toc: 記事にTOC(目次)を表示するか否か math: 記事内でTeX表記をするか否か private: 記事をサイト内の検索候補に入れるか否か rss_ignore: 記事をRSSフィードに載せるか否か share: ページ内に共有ボタンを表示するか否か pagelink: ページ内に前後ページへのリンクを表示するか否か  TeXを使えるようにMathJaxを導入 文中で数式を扱う際に最も困るのが「分数表記」だと個人的には思っています。\nちょっとした確率や微積などの基本的な分野でさえ、分数表記が出来ないだけで括弧記号などの入れ子が多発して物凄く見辛くなってしまいます。頻繁には書かないかも知れませんが、やはり一応機能としては持たせておきたいなと思ったので対応する事にしました。\nさて、Hugo ClassicのexampleSiteではデフォルトで一応 TeX3 表記が行われているのですが、テーマを弄る内にTeX表記が崩れ無効化されてしまっていました。\nそこであれこれ探した結果、MathJax と呼ばれるスクリプトを導入する事にしました。自分が探した範囲内では、下の参考記事にある中国の方の記事が最も参考になりました。日本語の記事も幾つかあったのですが、そちらは情報が少し古く2020年以降のMathJaxのバージョンアップに非対応でした。\n早速、当該記事を参考に下記のPartial Templateを作成しました。CDN経由なのでローカルへの保存は不要です。\n{{ if .Params.math }} \u0026lt;script\u0026gt; MathJax = { tex: { inlineMath: [[\u0026#34;$\u0026#34;, \u0026#34;$\u0026#34;]], }, displayMath: [ [\u0026#34;$$\u0026#34;, \u0026#34;$$\u0026#34;], [\u0026#34;\\[\\[\u0026#34;, \u0026#34;\\]\\]\u0026#34;], ], svg: { fontCache: \u0026#34;global\u0026#34;, }, }; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; {{ end }} これをROOT/layouts/partials/mathjax.htmlとして保存すれば、各Markdown内のFrontMatterに追加したmath: true (ここ\rで前述) の設定によって記事内のTeX表記が実現出来ます。\n使い方は下記の通り通常の(?)TeX記法でOKです。とりあえず信号処理で必須の複素フーリエ係数を載せてみました。\n$$ C_k = \\langle f(t), e^{jkt} \\rangle = \\frac{1}{2\\pi} \\int_{-\\pi}^{\\pi} f(t)e^{-jkt} dt $$ $$ C_k = \\langle f(t), e^{jkt} \\rangle = \\frac{1}{2\\pi} \\int_{-\\pi}^{\\pi} f(t)e^{-jkt} dt $$\n参考記事\r 在Hugo中使用MathJax · 零壹軒·笔记\r  次回へ続く\r今回はHugoテーマカスタマイズの3回目でした。\n次回はテーマカスタマイズ最終回(全文検索・OGP・フォント変更など)を予定しています。\n  SSG = 静的サイトジェネレータ(Static Site Generator)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n この自作スクリプトを実行するだけで特定階層のサブセクション内にある_index.mdにカテゴリーへのエイリアスが自動設定されるようにしています\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n TeXとは数式などを簡易表示する組版処理システムのこと(詳細: TeX入門\r)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo5/","tags":["Hugo"],"title":"Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回(今回) 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3\r 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4\r 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開\r  今回もHugoテーマをカスタマイズしていきます。前回記事ではシンタックスハイライトを直した程度で終わりましたが今回はもう少し細かいところの話です。\nFontAwesomeでSVG表示 ヘッダやフッタ周りのデザイン変更が一段落したので、次に画像ファイルとしてSVGを表示出来る FontAwesome を使いたいなと思いました。\nFontAwesomeのGitHub: FortAwesome/Font-Awesome: The iconic SVG, font, and CSS toolkit\r調べてみると、どうやらHugo用にFontAwesomeのPartial Template1を作成することで簡単にテンプレート内からSVGの埋め込みタグを挿入できる事が分かりました。\n ローカルにSVGファイルを用意 それを呼び出す為のFontAwesome用Partial Templateを作成 layouts/以下のテンプレート内から2.のPartial Templateを呼び出し  以上でSVGが簡単に表示出来るわけです。\nSVGのRAWデータDL用スクリプトの作成 最初にまずFontAwesomeのRAWデータをダウンロードするスクリプトを書きました。\nダウンロードしたいSVGファイル名をそれぞれbrands, regular, solidの各種ページを参考に予めicons_*という変数群に文字列として格納しておく必要があります。\nSVGファイル一覧: https://github.com/FortAwesome/Font-Awesome/tree/master/svgs\r#!/bin/sh set -ex icons_b=\u0026#34;facebook get-pocket github soundcloud twitter\u0026#34; icons_r=\u0026#34;calendar clipboard\u0026#34; icons_s=\u0026#34;arrow-circle-left arrow-circle-right folder search tag clock rss share-alt\u0026#34; url_b=https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/svgs/brands url_r=https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/svgs/regular url_s=https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/svgs/solid dest=../content/fontawesome mkdir -p \u0026#34;${dest}\u0026#34; cd \u0026#34;${dest}\u0026#34; for icon in $icons_b; do curl -O \u0026#34;${url_b}/${icon}.svg\u0026#34; done for icon in $icons_r; do curl -O \u0026#34;${url_r}/${icon}.svg\u0026#34; done for icon in $icons_s; do curl -O \u0026#34;${url_s}/${icon}.svg\u0026#34; done スクリプトの置き場所がROOT/bin/直下なので途中にあるdest(ダウンロード先)のパスも../content/fontawesomeになっています。もし利用される場合、ここは各自のディレクトリ構造に合わせて下さい。\nテンプレートの復習 第2回目でも紹介したように、自作したHugoテンプレートを呼び出したい場合は どこから呼び出すか によってテンプレートの種類を変える必要があります。\n公式Docs: Shortcodes | Hugo\r他のテンプレート (e.g. layouts/_default/single.html, layouts/partials/header.html) から呼び出したい時は Partial Template として作成し、下記の形で呼び出します。\n{{ partial \u0026#34;TEMPLATE_NAME\u0026#34; \u0026#34;ARGS\u0026#34; }} 記事 (e.g. content/hoge/fuga.md, content/blog/2021/test.md) から呼び出したい時は Shortcode として作成し、下記の形で呼び出します。\n{{\u0026lt; TEMPLATE_NAME \u0026#34;ARGS\u0026#34; \u0026gt;}}ここの文字列はMarkdownとして解釈されない{{\u0026lt; /TEMPLATE_NAME \u0026gt;}} {{% TEMPLATE_NAME \u0026#34;ARGS\u0026#34; %}}ここの文字列はMarkdownとして解釈される{{% /TEMPLATE_NAME %}} この際、区切り文字(delimiter)に\u0026lt;を使うか%を使うかで挙動が変わります。Shortcode内部でHTMLタグなど使いたい場合には\u0026lt;を用いる事でMarkdown用のレンダラーが正しくHTMLタグを読み取れるようになるようです。\nPartial Templateの作成 実は参考記事のリンク先にもあるようにFontAwesome用のShortcodeを作成することも出来るのですが、今回はテンプレート内部でSVGを表示したいので、FontAwesome用のPartial Templateを作成します。\n\u0026lt;span class=\u0026#34;inline-svg\u0026#34;\u0026gt; {{- $fname:=print \u0026#34;fontawesome/\u0026#34; . \u0026#34;.svg\u0026#34; -}} {{- $path:=\u0026#34;\u0026lt;path\u0026#34; -}} {{- $fill:=\u0026#34;\u0026lt;path fill=\\\u0026#34;currentColor\\\u0026#34;\u0026#34; -}} {{ replace (readFile $fname) $path $fill | safeHTML }} \u0026lt;/span\u0026gt; 記法や文法などは省略しますが、これをROOT/layouts/partials/fontawesome.htmlとして配置すれば使えるようになります。\n上記にある{{}}内部のハイフン-はそれぞれ直前・直後の空白文字を削除する為のもので、HTMLのDOM構造を改行・空白なしで保つためのものです(削除しなくても大抵機能します)。\n参考記事\r Hugo テンプレートをカスタマイズする前に知っておきたいハイフン“-”の意味 | exlair.net\r  テンプレート内からSVGを呼び出す 例えばローカルのROOT/content/fontawesome/clock.svgを下記のようにROOT/layouts/partials/header.htmlから呼び出す事が出来ます。\n{{ partial \u0026#34;fontawesome.html\u0026#34; \u0026#34;clock\u0026#34; }} 改造したHugo Classic(テーマ)の実例を載せておきますが、ヘッダ部分では下記のように 変数 としてFontAwesome用のファイル名を渡しています。このhead_custom.htmlをheader.htmlから読み込んでいます。\n\u0026lt;header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; {{ $title := lower .Title }} {{ $section := lower .Section }} \u0026lt;!-- 省略 --\u0026gt; {{ range .Site.Menus.main }} {{ $name := lower .Name }} \u0026lt;li class=\u0026#34;pull-left {{ if eq $name $title }}current{{ else if eq $section $name }}current{{ else if eq $title (pluralize $name) }}current{{ end }}\u0026#34;\u0026gt; {{ if eq $name $title }}\u0026lt;span class=\u0026#34;current-header\u0026#34;\u0026gt;{{ partial \u0026#34;fontawesome.html\u0026#34; $name }}\u0026lt;/span\u0026gt;{{ else }}\u0026lt;a href=\u0026#34;{{ .URL }}\u0026#34;\u0026gt;{{ partial \u0026#34;fontawesome.html\u0026#34; $name }}\u0026lt;/a\u0026gt;{{ end }} \u0026lt;/li\u0026gt; {{end}} \u0026lt;!-- 省略 --\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; 上記の例で言うと、変数名で渡しているのは\n{{ partial \u0026#34;fontawesome.html\u0026#34; $name }} の部分です。慣れればすぐに読めると思いますが、\n{{ range .Site.Menus.main }} の行からはじまるrangeブロック内部で.Nameを取得し、そのそれぞれをlower関数で小文字化することでタイトル・セクション・タクソノミーの相互一致判定を行っています。そして、その結果を$name変数に格納し、FontAwesomeに渡しているという流れです。\n{{ $name := lower .Name }} Hugo Classic + FontAwesomeの注意点 なお、Hugo Classicでは下記のようにconfig.tomlで設定しているタクソノミーの各種ページ名とURLが 複数形(plural) になっています。\n[[menu.main]] name = \u0026#34;Categories\u0026#34; url = \u0026#34;/categories/\u0026#34; weight = 1 [[menu.main]] name = \u0026#34;Tags\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 2 これに合わせ、FontAwesomeのSVGファイル名も次のようにリネームして読み込んでいます。\n folder.svgからcategories.svgへリネーム tag.svgからtags.svgへリネーム  FontAwesomeデフォルトのファイル名をリネームしないと、テンプレートから渡される$nameがtagsなのに実ファイル名がtag.svgのままで読み込まれないという訳です。\nTOMLの方を書き変えるかSVGファイル名を変えるかは人それぞれでしょうが、一応書いておきます。\n参考記事\r Using Font Awesome Icons in Hugo | Nick Galbreath\r Hugo | solareenlo\r  各種Shortcodeの追加 上で書いたFontAwesome以外にも幾つか役立ちそうなShortcodeなどを追加してみました。\n private.html: Hugo側でプレビュー状態の時のみ表示するコメントブロックを挿入 colored.html: Markdownの文中で背景色と文字色を部分的に変更 image.html: Markdown内に画像を貼り付ける(Lightbox2を利用) steam.html: Steamのストアページへのリンクを自動でいい感じにしてくれる  private.htmlについて 下記のようなShortcodeを作成し, ローカル環境のサーバ上でのみ表示したいテキストを囲むと色々と捗ります。 例えばまだ公開したくない記事の一部などをそのままprivateな状態でHugoにビルドしてもらう、といった事も可能です。\nファイルはROOT/layouts/shortcodes/private.htmlとして作成しました。\n{{ if .Site.IsServer }} \u0026lt;div class=\u0026#34;private\u0026#34;\u0026gt;{{ .Inner }}\u0026lt;/div\u0026gt; {{ end }} これに合わせてCSSも設定しておきました。\n.private { background: #2e2222; color: #f11; padding: 0.5em; border: solid 1px #f11; } .private::before { content: \u0026#34;------Private------\u0026#34;; display: block; font-weight: bolder; } 使い方は下記の通りです。\n{{\u0026lt; private \u0026gt;}} これは非公開なメモ {{\u0026lt; /private \u0026gt;}} これは公開されるメモ 例えば上のように書くと、このような表示になります。\n\r\r\r参考記事\r ローカルサーバで動作させているとき（開発時）のみ内容を出力する private ショートコードを作成する | まくまくHugo/Goノート\r  colored.htmlについて これは自作しました。文中で自由に背景色と文字色を変える為の簡単な1行Shortcodeです(シンタックスハイライトがちょっと崩れてて見にくいですが)。\nこれも勿論ROOT/layouts/shortcodesに置いて使います。\n\u0026lt;span class=\u0026#34;colored\u0026#34; style=\u0026#34;background:{{ .Get \u0026#34;bg\u0026#34; }};color:{{ .Get \u0026#34;color\u0026#34; }};\u0026#34;\u0026gt;{{- .Inner -}}\u0026lt;/span\u0026gt; 例えばMarkdown中ではこのように使います。こうして複数の引数を渡す事も出来るのでShortcodeは慣れてしまえば便利です。\n{{\u0026lt; colored bg=\u0026#34;#00f\u0026#34; color=\u0026#34;#fff\u0026#34; \u0026gt;}}青{{\u0026lt; /colored \u0026gt;}} {{\u0026lt; colored bg=\u0026#34;#fff\u0026#34; color=\u0026#34;#000\u0026#34; \u0026gt;}}白{{\u0026lt; /colored \u0026gt;}} 青\r白\rimage.htmlについて これも自作です。サムネイルを表示し、サムネイルがクリックあるいはタップされると元画像が拡大表示されます。Lightbox2 を利用していますが有名なのでLightbox2の説明は省略します。\n\u0026lt;figure class=\u0026#34;{{ .Get \u0026#34;class\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;img-wrapper\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ .Get \u0026#34;link\u0026#34; }}\u0026#34; data-lightbox=\u0026#34;{{ .Get \u0026#34;data-lightbox\u0026#34; }}\u0026#34; data-title=\u0026#34;{{ .Get \u0026#34;data-title\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}\u0026#34; width=\u0026#34;{{ .Get \u0026#34;width\u0026#34; }}\u0026#34;/\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/figure\u0026gt; Markdown中ではこのように使います。\n{{% image src=\u0026#34;resize/thumbnail.png\u0026#34; link=\u0026#34;gazou.png\u0026#34; class=\u0026#34;\u0026#34; data-lightbox=\u0026#34;images\u0026#34; data-title=\u0026#34;caption\u0026#34; %}} srcでサムネイルの場所を指定、linkで大きいサイズの画像を指定します。パスはそれぞれPage Resourcesの仕様に則っているので記事ファイル(.md)と同じ階層からの相対パスです。\nclassの有無を問わず機能するので、CSSなどで何か表示を変えたい時だけclass=\u0026quot;fuga\u0026quot;などと指定すればOKです。\nsteam.htmlについて Steamのウィジェットを表示するShortcodeです。\nTwitterやYouTubeなどはHugo側にデフォルトで用意されているのですがSteamは無かったので用意しました(参考記事のものをそのまま利用)。\n\u0026lt;div class=\u0026#34;embed steam-link\u0026#34;\u0026gt; \u0026lt;iframe class=\u0026#34;steam-link\u0026#34; src=\u0026#34;https://store.steampowered.com/widget/{{ index .Params 0 }}/\u0026#34; frameborder=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; CSSも弄っておきました。\n.steam-link { width: 450px; height: 200px; max-width: 100%; } Markdownの中ではこう使います。\n{{\u0026lt; steam 814380 \u0026gt;}} 実際に使うとこんな感じになります。\n\r\r参考記事\r Hugoの記事にコンテンツを埋め込む – ふぉれすけ広場\r  TOC(目次)を追加 サイトを作って記事を幾つか書いてみたところ、テキスト量の多い記事が増えてきたので目次を追加してみました。\n正直無くても良いかなと思っていたのですが特にそんな事はなかったですね。あった方が良いです。\n下記Hugo公式Docsにもあるように、元々 TOC(Table of Contents) はHugo側の機能としてデフォルトで存在しているため、ユーザーは 機能を呼び出すだけで利用可能 です。\n公式Docs: Table of Contents | Hugo\rこれを利用すれば、見出し行を## 見出し2や### 見出し3のようにMarkdown中に記述するだけで自動でHugoがTOCを出力してくれます。\n各記事の中に目次を追加したかったので、記事用テンプレートのROOT/layouts/_default/single.htmlを下記のように編集しました。\n\u0026lt;!-- 省略 --\u0026gt; \u0026lt;div class=\u0026#34;content-wrapper\u0026#34;\u0026gt; {{- if .Params.toc }} {{- with .TableOfContents }} \u0026lt;aside class=\u0026#34;xToc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;xToc_title\u0026#34;\u0026gt;目次\u0026lt;/div\u0026gt; {{ . }} \u0026lt;/aside\u0026gt; {{- end }} {{- end }} \u0026lt;main\u0026gt; {{ with .Content }}{{ . }}{{ else }}This content is empty. {{ end }} \u0026lt;/main\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 省略 --\u0026gt; 実を言うと、\n{{ .TableOfContents }} この1行だけでもTOCは呼び出せます。しかし各記事のFrontMatter内でtoc: trueを設定した場合のみ目次が表示されるように\n{{- if .Params.toc }} という行で条件分岐をしています。\nまた、CSSに関しては次のように設定しました。\n.xToc { background: #282C34; border: 1px solid #D0AF4C; border-radius: .3em; padding: 1.2em 1.5em .8em 1.5em; line-height: 1.7em; width: 70%; margin: auto; font-size: 1.1em; } .xToc_title { font-size: 1.2em; font-weight: bolder; } .xToc ul { list-style-type: none; padding-left: 0.8em; } .xToc li { padding-top: 0 !important; } .xToc li:hover { border-left: .3em solid #D0AF4C; margin-left: -.3em; } .xToc li \u0026gt; ul { padding-left: 1em; width: 100%; } .xToc a { color: #c0c0c0 !important; font-weight: normal; display: block; border-bottom: dashed 1px #999; margin-left: .5em; } .xToc a:hover { color: #FFD700 !important; } Hugo側が自動で出力してくれるTOCは\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;と\u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;によって構成されていますので、それに合わせてCSSを編集する必要があります。\n参考記事\r 各ページに目次を表示する (.TableOfContents) | まくまくHugo/Goノート\r  faviconを設定 Hugo Classicにはデフォルトでstatic/images/site.webmanifestファイルがあります(exampleSiteというディレクトリの中にあります)。\n従って、やることと言えばfavicon用.pngファイルの作成とheader.htmlへの追記のみですね。faviconに関しては特に言う事は無いです。\n.pngファイルは自前のアイコン(トップページに表示されるやつです)をリサイズしただけですね。\n\u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;180x180\u0026#34; href=\u0026#34;/images/apple-touch-icon.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;16x16\u0026#34; href=\u0026#34;/images/favicon-16x16.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;32x32\u0026#34; href=\u0026#34;/images/favicon-32x32.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;64x64\u0026#34; href=\u0026#34;/images/favicon-64x64.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;128x128\u0026#34; href=\u0026#34;/images/favicon-128x128.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;manifest\u0026#34; href=\u0026#34;/images/site.webmanifest\u0026#34;\u0026gt; 参考リンク\r Favicon ジェネレーター\r ウェブアプリマニフェスト | MDN\r  次回へ続く\r今回はHugoテーマカスタマイズの2回目でした。\n次回はテーマカスタマイズの続き(機能面寄り)を予定しています。\n  この記事\rで説明\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo4/","tags":["Hugo"],"title":"Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回(今回) 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3\r 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4\r 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開\r  今回はHugoテーマをカスタマイズしていきます。前回までの記事がある程度汎用性のある記事だったのに対し、ここからは個人的・個別具体的な話になると思います。\nサイト管理用リポジトリについて 第1回の記事\rでも紹介した通り、このサイトではHugo Classic (goodroot/hugo-classic)\rというテーマをカスタマイズして使っています。\n全体としては、下記のように3つのリポジトリを用意してサイト関連のファイル群を管理しています。(恐らくもっと良い管理法はあると思うのですが暫定的にこうしています)\n fork済みテーマリポジトリ(公開): snagimmo/hugo-classic\r サイト編集用リポジトリ(非公開): snagimmo/hugo-neoclassic サイト公開用リポジトリ(公開): snagimmo/snagimmo.github.io\r  テーマ用リポジトリはforkなので勿論publicリポジトリですが、このHugoサイト編集用のリポジトリは非公開(private)です。編集途中のファイルやHugoサイトのビルドに関係ないスクリプト(.bat, .shなど)も置いているので非公開にしてあります。\n編集用リポジトリの名前についてはhugo-classicをベースにしようと決めたので hugo-neoclassic にしました。\nまた、非公開の編集用リポジトリから公開用リポジトリ(GitHub Pages)へCircleCIを使って自動pushされるようにしていますが、この話はまた別の記事に載せることとします。\nテーマ用ファイルのコピーと上書き HugoではテーマファイルをROOT/themes/\u0026lt;THEME\u0026gt;からROOT/直下にコピーしてから編集することで、テーマファイルよりも自分の編集したファイルが優先してビルドされるような仕組みになっています。\n従って、いきなりサイト用ディレクトリ直下(ROOT/)にテーマをcloneするよりもROOT/themes以下にテーマリポジトリをcloneしてからROOT/にコピーし、サイト用ファイルとして編集した方が後々楽になると思います。\nサイトの新規作成時には下記コマンド群を実行することで\n テーマファイル(ROOT/themes以下のファイル)群 それらの上書きファイル・追加ファイル(ROOT/直下にあるthemes 以外 のファイル)群  の棲み分けが出来るようになります。\n# Hugoコマンドで新規サイト作成\u0026amp;Gitリポジトリ化 hugo new site SITE_NAME cd SITE_NAME git init # themesディレクトリ直下にテーマをclone cd themes git clone git@github.com:USER_NAME/THEME_NAME.git # cloneしたテーマ内のファイルをサイト用ディレクトリへコピー cd .. cp -v -R ./themes/THEME_NAME/* ./ 手を加えるべきファイル 実際にテーマを編集する前にHugo Classicテーマのどの部分を弄れば良いかあたりをつけました。\n結果、大体下記のファイルを編集すればHugo Classicテーマが改造出来るらしいことが分かりました。構造が分かってしまえば簡単1ですね。\n テーマ全体の設定(config.toml) テーマ全体のCSS(static/css/style.css) フォントのCSS(static/css/fonts.css) ヘッダとフッタ関連  layouts/partials/header.html layouts/partials/head_custom.html layouts/partials/footer.html layouts/partials/foot_custom.html   ページ新規作成2時のテンプレート(archetypes/default.md) その他各種テンプレート(前回記事で解説)  layouts/_default/single.html layouts/_default/list.html layouts/_default/terms.html   ドキュメントルートの各種ファイル  layouts/404.html: 404ページ設定 layouts/robots.txt: クローラ用設定  これはstatic/robots.txtへ移動することに   static/CNAME: 独自ドメインを追加したいのでCNAMEファイルを追加    テーマを弄る前に Hugoの過去のバージョンアップでMarkdown用のレンダラーが Goldmark に変更された影響で、デフォルトではHugo用のMarkdownファイル内にHTMLを書いても読み込まれない3設定になっています。\nまずはROOT/config.toml(YAMLの場合もあります)を編集して下記の項目を追加し、Markdown内のHTMLが読み込まれるようにします。\n[markup] [markup.goldmark.renderer] unsafe = true ヘッダや背景や文字の色を変更 最初に一番分かりやすいヘッダの色と全体(\u0026lt;body\u0026gt;など)の背景色・文字色を変えて雰囲気を確認したいなと思い、layouts/partials以下のファイル群とstyle.cssを編集しました。\n私はダークモードでWebサイトを見ることが多く、手元の各種ソフト・ツールもほぼ暗色系や紺色の背景で統一しています。そこでWebサイトも暗い色の背景にしたいなと思っていました。\n一方で暗色系の背景に対して文字やその他の色も暗色系にしてしまうと見辛くなってしまうと思った4ので、思い切って紺色に対してコントラストのある黄色を採用することにしました。\n夜空と月をイメージして辛子色の#d0af4c\rと濃紺色の#0f0f1f\rをベースカラーにしてみました。\n下記のコミット等で弄っています。テーマ・デザイン弄りの試行錯誤は正直面白くない上に役立たないと思うので省略します。\n modified some colors and header design · snagimmo/hugo-classic@a2bd3f8\r change colors and so on · snagimmo/hugo-classic@1f92cd9\r change header colors · snagimmo/hugo-classic@8d0aeaa\r  シンタックスハイライトを改良 行番号やファイル名表示の追加 デフォルトのままだとフォントの大きさやらデザインやらが気になったので、ここも変えることに。\n初めに行番号の表示をしたり偶数行だけ背景色変更したりスクロールバー改造や左上にQiita風の言語\u0026amp;ファイル名表示を施したりなど色々と弄りました。\n change highlighting · snagimmo/hugo-classic@e7a8283\r finished editing code, pre · snagimmo/hugo-classic@eb35e23\r changed even-numbered rows‘ color · snagimmo/hugo-classic@a61cc16\r added filename to code blocks · snagimmo/hugo-classic@13bc748\r fixed line-height for blocks · snagimmo/hugo-classic@2bb2ac6\r finished code blocks · snagimmo/hugo-classic@59dbfab\r  この途中でJavaScriptの簡易スクリプトを追加し、ファイルタイプやファイル名を自動判別してQiita風5に表示してくれるよう改良しました。\nvar list = document.body.getElementsByClassName(\u0026#34;highlight\u0026#34;); for(i = 0; i \u0026lt;= list.length - 1; i++){ var code = list[i].firstElementChild.firstElementChild; if(code){ var codeType = code.className.split(\u0026#34;:\u0026#34;)[1] ? code.className.split(\u0026#34;:\u0026#34;)[1] : code.className.split(\u0026#34;:\u0026#34;)[0].replace(/language-/, \u0026#39;\u0026#39;); } if(codeType){ var div = document.createElement(\u0026#39;div\u0026#39;); div.textContent = codeType; div.classList.add(\u0026#39;code-name\u0026#39;); code.parentNode.insertBefore(div, code); } } var codeBlocks = document.body.getElementsByClassName(\u0026#39;highlight\u0026#39;); for(i = 0; i \u0026lt;= codeBlocks.length - 1; i++){ var code = codeBlocks[i].firstElementChild.firstElementChild; if (!/lang/.test(code.className)){ break; } if(code){ var lines = code.innerHTML.split(/\\n/); var codeLine = \u0026#34;\u0026#34;; lines.forEach(function(line){ if(line != \u0026#34;\u0026#34;){ codeLine += \u0026#39;\u0026lt;div class=\u0026#34;code-line\u0026#34;\u0026gt;\u0026#39; + line + \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; } }) code.innerHTML = codeLine; } } こちらのcodeblock-filename.jsはファイル名表示用のスクリプトで、codeblock-to-line.jsはPygments(後述)で表示する際に行番号を追加する為のスクリプトです。\nちなみにここでHugo側からのスクリプト呼び出しに失敗し、少し詰まりました。\n結論から言えば、Hugoのテンプレート内でROOT/static/js/hoge.jsといったローカルスクリプトを呼び出す時は下記のように記述するのが正しいらしいです。\n呼び出し元はフッター用テンプレートのROOT/layouts/partials/footer.htmlです。\n\u0026lt;!-- 良い例 --\u0026gt; \u0026lt;script src=\u0026#34;/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 悪い例 --\u0026gt; \u0026lt;script src=\u0026#34;./js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/static/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;./static/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;static/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;../static/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/../static/js/hoge.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ROOT/static直下に居ることが前提で尚且つ/から始めるのが正しい記法のようです。悪い例の方では全てスクリプト読み込みに失敗しました。\n少し古め(2018年頃)の記事ではsrc=\u0026quot;js/hoge.js\u0026quot;としている記事も見かけるのですが、少なくとも私が使っているHugo ver0.80においてはエラーになるようでした。\nシンタックスハイライト用ツールの選定 また、良い機会なのでシンタックスハイライター6も色々試してみました。\n Pygments (Hugoデフォルト) highlight.js Prism.js  色々試した中で厄介だったのは、HugoデフォルトのPygmentsとhighlight.jsの衝突です。\n当然のことですが、ハイライターによって挿入されるHTMLタグ構造がまちまちなのでROOT/static/css/style.cssなどのCSSもハイライター毎にブランチ等切って個別対処する必要があります。\n added prism.js and removed highlight.js · snagimmo/hugo-classic@6cf1457\r finished pygments and added prism files · snagimmo/hugo-classic@9be5e21\r current best settings for prism.js · snagimmo/hugo-classic@284a158\r Merge branch ‘modified-prism‘ into modified · snagimmo/hugo-classic@d1c13a3\r merged some changes of descendant file · snagimmo/hugo-classic@19c7267\r  結果、最終的には Prism.js をメインとして採用しました。 構文解析がそこそこ優れている事と、スキンが豊富でCSSを編集すれば自由に色設定可能なのと、何より扱いやすいのが主な理由です。\nというわけで、暫定的ではありますがPrism.jsに関しては下記のような形に落ち着きました。ちょっと細かいデザインに時間を掛けすぎてしまったかなという気がしますが……(この記事書きながらまたstatic/css/prism.cssを微調整していました)。\n#ifndef TEST_CPP #define TEST_CPP  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main(){ int N; cin \u0026gt;\u0026gt; N; for(int i = 0; i \u0026lt; N; i++){ string S; cin \u0026gt;\u0026gt; S; } return 0; } #endif //TEST_CPP import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print i  adopted changes of style.css on private repo · snagimmo/hugo-classic@3e44a8c\r merged ‘modified‘ · snagimmo/hugo-classic@e09ff66\r  一応Hugoデフォルトの Pygments によるハイライトも可能になるようブランチを切っておきました。……が、Prism.jsで十分なので多分使わないですね。\n参考記事\r ソースコードの右上に言語名を表示するやつ - Object.create(null)\r はてなブログのコードブロックをカスタマイズする | 前菜の備忘録\r HugoのコードブロックにQiitaのようなTitleをつける | AABrain\r Hugoのシンタックスハイライトを設定する\r 【Hugo】コードブロック内にファイル名を表示する | みどりみちのブログ\r Hugo, Github Pages, CircleCIつかってブログ構築 • abekoh‘s tech note\r CSSでスクロールバーのデザインをカスタマイズする。 | WEMO\r  次回へ続く\r今回はHugoテーマカスタマイズの1回目でした。\n次回はテーマカスタマイズの続きを予定しています。\n  テーマによってファイルパス・ファイル名が異なるのでテーマ毎に調べる必要あり\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n hugo new new_contents.mdコマンド等で記事を新規作成した場合\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n ローカルファイルに悪意あるHTMLを自ら書き込むことも書き込まれることもほぼあり得ないと考えた為、ここではunsafe = trueにしています\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n いまだにリンクの色が#a0a0a0\rというグレーなので他の色にしようか迷っている\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n コードブロックの言語指定でJavaScriptとだけ書けばJavaScriptと表示され、js:hoge.jsと書けばhoge.jsと表示される\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n ハイライターという呼称はあまり好きではないですが\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo3/","tags":["Hugo"],"title":"Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回(今回) 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3\r 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4\r 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開\r  今回はHugoテーマを改造するためHugoのコンテンツ管理・各種テンプレートについて調べた内容をまとめました。少々長いですが1つのページにまとめたかったのでどうかお許しを。\nテーマをカスタマイズする前に 早速前回の記事で採用した Hugo Classic | Hugo Themes\rをいじって行きたいのですが、Hugoには独特の Shortcode , Partial Template などの概念があります。\nHugo公式ではこの仕組みを Template と呼んでいます。\nまずはこれらをきちんと理解しないとテーマのカスタマイズは難しそうだなと感じたので少し調べてみました。\nHugoのコンテンツ管理について Hugoはテーマによって\n どのテンプレートを使用するか どのようなファイル/ディレクトリ構成にするのか テンプレートにどのようなファイル名を採用するか1  がかなり異なっている為、カスタマイズしたい場合は自分で選んだテーマに合わせて適宜調べる必要があります。\nHugo公式Docsに関しては下記2つの中で必要になった部分を見ていくと良いです。\n Content Management\r Templates\r  Lookup Order(探索順序)について また、少し上で「テンプレートにどのようなファイル名を採用するかがテーマによって異なる」と書きましたが、これが意外と重要です。\nHugoは基本的に各テンプレートファイルを 決められた順番・決められたファイルパスで探索 します。その優先順位について書かれているのがこちらです。ここは軽く目を通しておいた方が後々助かると思います。\n Hugo‘s Lookup Order\r  日本語でしっかりとした解説をして下さっているgarretlabさんのサイトもおすすめです。\n ショートコード\r 構成\r 決定規則(検索順序)\r  こちらの記事も参考にさせて頂きました。\n HUGO のディレクトリ構成\r  Hugo Templatingの記法について 公式Docsより: Introduction to Hugo Templating\r Hugo uses Go’s html/template and text/template libraries as the basis for the templating.\nThe following is only a primer on Go Templates. For an in-depth look into Go Templates, check the official Go docs\r.\n 上記にもあるように、Hugoでは基本的にGoのhtml/templateとtext/templateライブラリを踏襲した記法を採用していて、Hugo公式Docsの解説内容もGoテンプレートの入門に過ぎないので詳しくはGo言語自体のDocsをあたってくれ、だそうです。\nただこれだけだとちょっと不親切なので、日本語でざっくり説明します。\n HTMLファイルやMarkdownファイルの中でHugoテンプレートを呼び出す為の記法 基本的に{{と}}でテンプレートを囲み、呼び出す テンプレート名の直後に引数(Arguments)を与える事でそれぞれのテンプレートに見合った挙動をさせる仕組み  \u0026lt;!-- これは一つの例です --\u0026gt; {{ template \u0026#34;ARGUMENTS\u0026#34; . }} ※ 例えば{{と}} に\u0026lt; \u0026gt;が挟まれている場合は、外側の{{と内側の\u0026lt;の間に スペースを空けずに記述するのが正しい記法 です。\nHugoサイトの全体像と概念 Hugoのサイト構成に関して自分なりに理解した内容をざっくりと書いておきます。\n Hugoの静的サイトは ページ(Page) と テンプレート(Template) から生成される ページ内で呼び出せるテンプレートが ショートコード(Shortcodes) テンプレート内で呼び出せるテンプレートが インクルード(Includes) 変数と関数はこれらの内部で呼び出したり条件分岐させたりするのに使う 各ページ・テンプレートから呼び出す画像・動画などの リソース(Resources)  その他の重要な概念がこちらです。\n index.mdあるいは_index.mdという特殊な名前のファイルを含むディレクトリを認識して木のようなディレクトリ構造を実現する仕組みが ページバンドル(Page Bundle)  各記事にあたるディレクトリが リーフバンドル(Leaf Bundle) 各セクションにあたるディレクトリが ブランチバンドル(Branch Bundle)   各タグ・カテゴリーなどの総称である タクソノミー(Taxonomy)  ページとテンプレートについて ページ(Page)について  contentディレクトリ以下に置かれる 基本的にMarkdownとHTMLに対応  AsciiDoc、RST、Pandocも利用可能 詳しくはこちら: Content Formats\r    テンプレート(Templates)について   layoutsディレクトリ以下に置かれる\n  基本的にHTMLで表現される\n XMLやJSONを利用することもある    Markdown中に埋め込んでしまうと事実上 Hugo用のファイル となってしまうので汎用性を持たせたい場合は注意\n  ページを構成する代表的なテンプレートファイルは3種類ある\n 記事 (layouts/_default/single.html) セクション (layouts/_default/list.html) タクソノミー (layouts/_default/terms.html)   Hugoのテーマで中心になるのはこの3ファイル であることが多い なお、前述のように記事はLeaf BundleでセクションはBranch Bundleでもある    ページとテンプレートの関係 各種ページと基本3種テンプレートの対応関係は次の通りです。\n 各タクソノミー(タグ・カテゴリー)用テンプレートがterms.html  https://snagimmo.net/categories/\r: カテゴリー一覧 https://snagimmo.net/tags/\r: タグ一覧   各セクション・各タクソノミー要素の記事一覧用テンプレートがlist.html  https://snagimmo.net/dev/\r: devセクションの記事一覧 https://snagimmo.net/categories/website/\r: websiteカテゴリの記事一覧 https://snagimmo.net/tags/hugo\r: Hugoタグの記事一覧   各記事用テンプレートがsingle.html  https://snagimmo.net/dev/build-website-using-hugo2/\r: 記事    その他のテンプレートについて ショートコード(Shortcodes)について  ページ(大抵Markdown)の中で Hugo Templateを呼び出す為の機能 {{\u0026lt; shortcode \u0026quot;ARGUMENTS\u0026quot; \u0026gt;}}のような記法で文中に埋め込む  前述の通り{{と\u0026lt;の間には半角スペースを入れずに書く    インクルード(Includes)について  テンプレート(大抵HTML)の中で 別のHugo Templateを呼び出す為の機能 インクルードの種類にはpartial, templateなどがある  partialは ユーザーが定義した Partial Template をインクルードする templateは Hugoが内部で用意している Internal Template などをインクルードする   例えば下記のような形  {{ partial \u0026quot;header.html\u0026quot; . }} {{ template \u0026quot;_internal/opengraph.html\u0026quot; . }}    変数(Variables)と関数(Functions)について  基本的に Goのtext/templateの文法\rと変わらず 変数(Variables) とはHugoがページ生成時に保持している値のこと  .Site.XXXや.Page.XXXなどがある  config.tomlに記述した値(サイト全体で保持される)にアクセスするのが.Site.XXX 各ページ内で設定・保持された値にアクセスするのが.Page.XXXや.Params.XXX     関数(Functions) はif, slice, rangeなど他の言語でよく見るもの これらも前述のHugo(Go) Templatingの記法に則ってソース中で呼び出す  {{ if eq xxx \u0026quot;yyy\u0026quot; }}のような形    ブランチバンドルとリーフバンドルについて サイト全体の記事構造を一つの木に見立て、各記事を葉っぱ(Leaf)、それらを束ねる各セクションを枝(Branch)と見なしたもの\nブランチバンドル(Branch Bundles)について  content以下にあるディレクトリは_index.mdという特殊ファイルがある場合 Branch Bundles として扱われる 要するに セクション(Section) のこと2 セクションというのはcontentディレクトリ以下に置かれた サブディレクトリ のことで、基本的にローカルディレクトリの構造にサイト側のパスも追従する セクションは多重化可能 (content/section1/sub-section1 のような形)  リーフバンドル(Leaf Bundles)について  content以下にあるディレクトリはindex.md3という特殊ファイルがある場合 Leaf Bundles として扱われる 要するに 記事 のこと Branch Bundlesに比べて直感的でないが、こちらの Leaf Bundlesも主にディレクトリのことを指す 点に注意 つまり、ページ(Page) は実はpage-desu.mdのような単一Markdownファイルとしてだけでなく、index.mdという特殊ファイルを含んだディレクトリpage-desuとしても配置することが出来る 特殊ファイルとは言うものの、名前を変えるだけでOK 中身はpage-desu.mdとpage-desu/index.mdとで変える必要はない  公式Docs: Page Bundles\rページリソースについて これは上記のLeaf Bundlesについて理解できていれば簡単です。\nページリソース(Page Resources) とは、各ページ内で使用する画像・動画などの リソース(Resources) 管理に関する仕組みです。\nページリソース(Page Resources)機能があると何が嬉しいか   Hugoのリソース管理は元々staticディレクトリで全て行われており、その事にユーザーから不満が出ていた\n  各ページ内のリソースをstatic/images/gazou.pngとしてcontentとは全く別のディレクトリで管理する必要があった\n  このPage Resourcesという仕組みによって各Leaf Bundles(ディレクトリ)内でリソース管理を行うことが可能になった\n  Leaf Bundlesとして認識されたディレクトリ内、つまりindex.mdと同じ階層以下にその記事から読み込むファイル群を配置できる\n page-desuディレクトリをLeaf Bundlesとすると、page-desu/gazou.pngとして配置することもpage-desu/img/gazou.pngとして配置することも可能 index.mdと同じ階層以下であればどの深さでもリソースを配置することが出来る    公式Docsはこちら: Page Resources\rタクソノミー(Taxonomy)について 実は上記2つのBundles以外に、もう一つHugoのページ(Page)の中核を成す概念があります。\nそれが タクソノミー(Taxonomy) です。\nよくブログなどで各記事に設定された「タグ」や「カテゴリ」があると思いますが、あれらをまとめてHugoではタクソノミーという名前で呼び、管理しています。\nこのタクソノミー内のタグやカテゴリなどの要素ごとにページが自動生成されます。その際に呼び出されるのがlayouts/_default/terms.htmlという訳です。\nタクソノミーに関する公式Docsはこちらです。\n Taxonomies\r Taxonomy Templates\r Taxonomy Variables\r  日本語解説に関してもgarretlabさんの記事がよくまとまっていて参考になります。\n コンテンツ分類(Taxonomy)\r  タクソノミーテンプレートの注意点 タクソノミーに関するテンプレートを タクソノミーテンプレート(Taxonomy Template) と言いますが、これを扱う際は注意が必要です。\nタクソノミー内の値には.Data.Termsや.Data.Pagesといった形でアクセスします。\nつまり.Dataの下にぶら下がる.Data.XXXといった形で記述するのですが、これは似たような.Site.Data.XXXといった形を持つ データテンプレート(Data Template) とは似て非なる 全くの別物 です。\n先に書いたように.Site.XXXというのは基本的に config.tomlファイルに書かれたサイト全体で共有可能な設定値 を読み込むのに使います。\nこの.Site.Data.XXXも似たようなもので、data/data-area/data-desu.toml内に記述した値をデータテンプレートから取り出す為に使います。\nですので繰り返しになりますが、タクソノミーがデフォルトで保持する.Data.Termsは.Site.Data.XXXとは全くの別物なわけです。\n公式ではタクソノミーテンプレート用の変数を.Data.Termsではなく.Site.Taxonomies.XXXとして扱う方法も紹介されています。\n Taxonomy Templates #render-a-sites-taxonomies\r   If you wish to display the list of all keys for your site’s taxonomy, you can retrieve them from the .Site variable available on every page.\n こちらも公式からの引用ですが、例えば下の.Site.Taxonomies.tagsを利用した例ではサイト全体のタグ一覧を表示することが出来ます。\n\u0026lt;ul\u0026gt; {{ range .Site.Taxonomies.tags }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Page.Permalink }}\u0026#34;\u0026gt;{{ .Page.Title }}\u0026lt;/a\u0026gt; {{ .Count }}\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 次回へ続く\r今回はHugoサイトの全体像とHugoテンプレートに関する話でした。\n次回はテーマ改良を予定しています。\n  例えばタクソノミーに関してはlayouts/_default/terms.html, layouts/_default/terms.html.html, layouts/category/terms.htmlなどのバリエーションが存在する (詳細: Taxonomy Templates\r)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 厳密には違うものの、セクション以外のBranch Bundleはホームやタクソノミーしかないので事実上セクションを指しているようなものとした (詳細: Page Bundles\r)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 頭にアンダースコア_が付いていない点に注意\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo2/","tags":["Hugo"],"title":"Hugoで個人サイト制作(2) コンテンツ管理とテンプレート"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作(0) Hugo導入以前\r 第1回(今回) 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3\r 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4\r 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開\r  今回は静的サイトジェネレータHugoの導入がメインです。\nHugoを導入する ということで、早速本題に入っていきます。\nOSがWindows10 Homeなので、Hugo公式のインストールガイド\rに沿って パッケージマネージャのScoop でインストールしました。\n上記インストールガイド内にHomebrewやMacPortsやChocolateyを利用したインストール方法も載っているのでHugoのインストールで悩む方はそんなにいないと思います。\nScoop自体のインストール方法は Scoopの公式サイト\rに載っているのでそちらを参照しました。\nscoop install hugo 上記インストール作業の後にPSやGit Bashなどからhugoコマンドが叩ければ無事インストール完了です。自分の場合はインストール後にOSごと一応再起動しておきました。\nサイト/ファイルの新規作成 Hugoでは新規にサイトを作成する際hugo new siteコマンドを実行することでディレクトリが自動生成されます。\nhugo new site \u0026lt;SITE_NAME\u0026gt; また、hugo newコマンドによってファイルを新規作成することも可能で、その場合は下記を実行するとnew-dirディレクトリの直下にnew_contents.mdが生成されます。\nhugo new new_dir/new_contents.md Hugoディレクトリの構造 例えば、hugo new site hogeとして作成されたhogeディレクトリには下記のディレクトリ群がデフォルトで含まれています。\n$ hugo new site hoge #(省略) $ ls -A ./hoge archetypes config.toml content data layouts static themes Hugoディレクトリの構造に関しては下記リンクが参考になります。\n Directory Structure\r HUGO のディレクトリ構成\r  このhoge/themes以下にHugoテーマ用のリポジトリをcloneしたりsubmodule addしたりして置いておくとテーマが適用されてプレビュー可能になります。\nテーマを選ぶ Hugo用のテーマは Hugo themes\rというサイトから選びました。\n最初に気に入ったテーマが8つありましたが、自分はその中でもこちらの Hugo Classic なるテーマのシンプルさに惹かれました。\n\r Hugo Classic | Hugo Themes\r goodroot/hugo-classic\r  選んだテーマをどのようにして自分のサイトに取り入れるかは様々です。\n Hugoテーマのリポジトリを直接clone Hugoテーマのリポジトリをforkしてカスタマイズ Hugoテーマのリポジトリをサブモジュール化 (git submodule add)  自分は上記Hugo Classicを下記リポジトリへforkした後にカスタマイズして使っています。(CSSなど汚い部分がありますがご容赦下さい)\n snagimmo/hugo-classic\r  サイトのプレビュー Hugoにはサイト上のファイル群を編集する度に自動でプレビュー\u0026amp;更新が行われる LiveReload 機能があります。\nhugo server というコマンドをターミナルから実行することで、http://localhost:1313をデフォルトURLとしてHugo用プレビューサーバが立ち上がります。\nDraft(下書き記事)1を含めたプレビューをするためには-Dオプションを付けて\nhugo server -D などとする必要があります。この-Dオプションが無い場合は 公開設定をしたファイルしかプレビューされない 仕組みになっています。\nhugo serverにはその他に様々なオプションがあり、\n --buildDrafts, -D: 下書き(draft)記事も含めてプレビューする --ignoreCache: キャッシュを無視してプレビュー --noHTTPCache: HTTPキャッシュを作成しない --disableFastRender: ファイル変更がある度にサイト全体をリビルド --buildFuture, -F: 作成日時が現在時刻より進んだ記事もプレビュー --port \u0026lt;PORT\u0026gt;, -p \u0026lt;PORT\u0026gt;: プレビューサーバがlistenするポートを指定2  などを使い分けることで自分の望んだ状態でサイトプレビューを利用することが可能です。便利ですね。\nこれらのオプションはhugo server --helpでヘルプとして一覧表示することが出来ます。\nまたは公式Docsだとこちらのページに書いてあります。\n hugo server\r  ちなみに自分はいつも下記コマンドを実行しています。\nhugo server -D --ignoreCache --noHTTPCache --disableFastRender --buildFuture サイトのビルドと公開 公開用ファイルのビルドはserver等オプションなしの\nhugo で実行できます。Hugo用ディレクトリに移動後hugoの4文字を入力してEnterを押すだけです。\nhugoコマンドでビルドを実行するとhoge/publicディレクトリ以下に全てのビルド済みファイル群が出力されます。ホスティングサービスや各公開用サーバにはこのpublicディレクトリ以下の公開用ファイルのみを配置すれば良い、というわけです。\nなお、公開までの大まかな流れはQiitaのこの記事が分かりやすいと思います。\n Hugo で静的なサイト・ブログを構築しよう - Qiita\r  次回へ続く\r今回はHugoの導入と簡単な説明をしました。\n次回はテーマ改良に向けてHugoサイトの全体像を把握し、Hugo Templateを理解します。\n  各MarkdownのFrontMatter内にdraft: trueと記述することで下書き扱いになり、draft: falseか無指定の場合は公開される\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Hugoサーバが使うデフォルトのポート番号は1313\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo1/","tags":["Hugo"],"title":"Hugoで個人サイト制作(1) Hugo導入"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回(今回) 第1回: Hugoで個人サイト制作(1) Hugo導入\r 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート\r 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1\r 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2\r 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3\r 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4\r 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開\r  なお、今回はHugo導入以前のMarkdown管理体制への移行に際して考えた事などがメインです。\nHugoを導入したきっかけ 実はHugoを導入した背景には、テキストファイル管理体制の変更がありました。\n昔からPC上にメモを残すようにはしていたのですが、長い間管理する手間に悩んでいました。\n最初はtxtファイルに殴り書きしていたのですがそれは流石に非効率が過ぎるということで、iOSからクラウドで同期できる Simplenote\rというアプリをtxtと並行して3年ほど使っていました。\nSimplenoteは使いやすく軽量で良いアプリではあるものの、データが全てクラウド上で保管されてしまうのです。\nつまり、直接アプリ上でローカルファイルとして文書を管理する事が出来ないのです。\nこれでは、例えばgrepなどで内容を横断検索した時のような効率が損なわれます。\n確かにSimplenoteにもエクスポート機能はあるのですが、書いたその時点で自動的にローカルファイルと同期される状態が望ましいなと思い、代替となるテキスト管理手段を探していました。\n全てMarkdownへ移行 色々と調べる中で、「txtやアプリ上で管理する体制をやめ、全てMarkdownにしてしまおう」と思いつきました。\nというのも、例えばtxtファイルにメモを取りためると出てくる問題の一つとして、\n記法が統一されなくなりがち\nといった問題点があったからです。\nつまり、ファイル形式によって記法が予め決められている方が助かるな、と思った訳です。そこで記法が決まっているMarkdownが候補に挙がりました。\n実は「Markdownは箇条書きスタイルに向いている」ぐらいの認識しか持っていなかったので全てのメモをMarkdownにしてしまうのも考え物だなと思ったのですが、冷静に考えると\n 元々HTMLを簡易的に記述する目的で開発された言語  HTMLタグも埋め込んで利用可能   GitHubでよく見るREADME.mdなどもMarkdown TrelloやSlack1などの有名なツール群も軒並みMarkdown記法に対応 YAMLなどのFrontMatterも使える(場合がある)  などなどメリットがかなりあることに気付き、思いきって手元のローカルファイルのメモを全てMarkdownに置き換えることにしました。\nMarkdownつながりでHugoへ到達 以前から、個人で何かやるなら「ブログではなくサイトにしたい」と考えていました。記事も記事以外も載せられるメディアの方が良いなと思っていたので、ここは余り悩まずWebサイトにしようと決めました。\nそうした中で、色々現在の制作ツールを調べていきました。\nまた、ネット上で情報発信しているエンジニア諸氏の記事などをよく読んでいた影響か、「あまりゴチャゴチャしていないスッキリとした テキスト主体 のサイトが良いな」と思うようになっていました。\n「この人のサイト良いな」と思う度にWappalyzerやWhatRunsなどのChrome拡張機能を通じてどんなツールでそのサイトを構築したのかを何となく把握していたので、静的サイトジェネレータ という単語に辿り着くまでそう時間はかかりませんでした。\n静的サイトジェネレータは基本的にMarkdownなどのファイルから静的ファイル(動的な生成過程のないhtmlなど)を生成するのに使います。\nそして生成されたファイル群をNetlifyやGitHub Pagesなどのホスティングサービスで公開する、というのがサイト公開までの一連の流れです。\n他にも静的サイトジェネレータの候補はGatsby.jsやNext.jsやHexoやJekyllなど幾つかありました2が、Goで書かれていて一番高速とのことで Hugo\r を選ぶ事にしました。\n\r次回へ続く\r今回は導入以前の流れを振り返っただけでした。\n次回以降はHugoの導入やテーマ改良など具体的な話をしていきます。\n  厳密にはMarkdown記法とは異なりますが\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n ここに一通り載ってます→ Static Site Generators - Top Open Source SSGs | Jamstack\r\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo0/","tags":["Hugo"],"title":"Hugoで個人サイト制作(0) Hugo導入以前"}]