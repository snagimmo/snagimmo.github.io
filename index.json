[{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回: Hugoで個人サイト制作⓪ Hugo導入以前\r 第1回(今回)  今回は静的サイトジェネレータHugoの導入がメインです。\nHugoを導入する  OSがWindows10 Homeなので、Hugo公式のインストールガイド\rに沿って パッケージマネージャのScoop でインストールしました。\n上記インストールガイド内にHomebrewやMacPortsやChocolateyを利用したインストール方法も載っているのでHugoのインストールで悩む方はそんなにいないと思います。\nScoop自体のインストール方法は Scoopの公式サイト\rに載っているのでそちらを参照しました。\nscoop install hugo 上記インストール作業の後にPSやGit Bashなどからhugoコマンドが叩ければ無事インストール完了です。自分の場合はインストール後にOSごと一応再起動しておきました。\nサイト/ファイルの新規作成  Hugoでは新規にサイトを作成する際hugo new siteコマンドを実行することでディレクトリが自動生成されます。\nhugo new site \u0026lt;SITE_NAME\u0026gt; また、hugo newコマンドによってファイルを新規作成することも可能で、その場合は下記を実行するとnew-dirディレクトリの直下にnew_contents.mdが生成されます。\nhugo new new_dir/new_contents.md Hugoディレクトリの構造  例えば、hugo new site hogeとして作成されたhogeディレクトリには下記のディレクトリ群がデフォルトで含まれています。\n$ hugo new site hoge #(省略) $ ls -A ./hoge archetypes config.toml content data layouts static themes Hugoディレクトリの構造に関しては下記リンクが参考になります。\n HUGO のディレクトリ構成\r  このhoge/themes以下にHugoテーマ用のリポジトリをcloneしたりsubmodule addしたりして置いておくとテーマが適用されてプレビュー可能になります。\nテーマを選ぶ  Hugo用のテーマは Hugo themes\rというサイトから選びました。\n最初に気に入ったテーマが8つありましたが、自分はその中でもこちらの Hugo Classic なるテーマのシンプルさに惹かれました。\n  Hugo Classic | Hugo Themes\r goodroot/hugo-classic\r  選んだテーマをどのようにして自分のサイトに取り入れるかは様々です。\n Hugoテーマのリポジトリを直接clone Hugoテーマのリポジトリをforkしてカスタマイズ Hugoテーマのリポジトリをサブモジュール化 (git submodule add)  自分は上記Hugo Classicを下記リポジトリへforkした後にカスタマイズして使っています。(CSSなど汚い部分がありますがご容赦下さい)\n snagimmo/hugo-classic\r  なお、Hugoテーマの設定などに関しては「Hugo themes setting」やら「Hugo テーマ submodule」やらでググり、それで出て来た情報を元に進めました。\nサイトのプレビュー  Hugoにはサイト上のファイル群を編集する度に自動でプレビュー\u0026amp;更新が行われる LiveReload 機能があります。\nhugo server というコマンドをターミナルから実行することで、http://localhost:1313をデフォルトURLとしてHugo用プレビューサーバが立ち上がります。\nDraft(下書き記事)1を含めたプレビューをするためには-Dオプションを付けて\nhugo server -D などとする必要があります。この-Dオプションが無い場合は 公開設定をしたファイルしかプレビューされない 仕組みになっています。\nhugo serverにはその他に様々なオプションがあり、\n --buildDrafts, -D: 下書き(draft)記事も含めてプレビューする --ignoreCache: キャッシュを無視してプレビュー --noHTTPCache: HTTPキャッシュを作成しない --disableFastRender: ファイル変更がある度にサイト全体をリビルド --buildFuture, -F: 作成日時が現在時刻より進んだ記事もプレビュー --port \u0026lt;PORT\u0026gt;, -p \u0026lt;PORT\u0026gt;: プレビューサーバがlistenするポートを指定2  などを使い分けることで自分の望んだ状態でサイトプレビューを利用することが可能です。便利ですね。\nこれらのオプションはhugo server --helpでヘルプとして一覧表示することが出来ます。\nまたは公式Docsだとこちらのページに書いてあります。\n hugo server\r  ちなみに自分はいつも下記コマンドを実行しています。\nhugo server -D --ignoreCache --noHTTPCache --disableFastRender --buildFuture サイトのビルドと公開  公開用ファイルのビルドはserver等オプションなしの\nhugo で実行できます。Hugo用ディレクトリに移動後hugoの4文字を入力してEnterを押すだけです。\nhugoコマンドでビルドを実行するとhoge/publicディレクトリ以下に全てのビルド済みファイル群が出力されます。ホスティングサービスや各公開用サーバにはこのpublicディレクトリ以下の公開用ファイルのみを配置すれば良い、というわけです。\nなお、公開までの大まかな流れはQiitaのこの記事が分かりやすいと思います。\n Hugo で静的なサイト・ブログを構築しよう - Qiita\r  次回へ続く  次回はテーマ改良などの内容を予定しています。\n  各MarkdownのFrontMatter内にdraft: trueと記述することで下書き扱いになり、draft: falseか無指定の場合は公開される\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Hugoサーバが使うデフォルトのポート番号は1313\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo1/","tags":["Hugo"],"title":"Hugoで個人サイト制作① Hugo導入"},{"categories":["website"],"contents":"このサイトは Hugo\rというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。\n 第0回(今回) 第1回: Hugoで個人サイト制作① Hugo導入\r  なお、今回はHugo導入以前のMarkdown管理体制への移行に際して考えた事などがメインです。\nHugoを導入したきっかけ  実はHugoを導入した背景には、テキストファイル管理体制の変更がありました。\n昔からPC上にメモを残すようにはしていたのですが、長い間管理する手間に悩んでいました。\n最初はtxtファイルに殴り書きしていたのですがそれは流石に非効率が過ぎるということで、iOSからクラウドで同期できる Simplenote\rというアプリをtxtと並行して3年ほど使っていました。\nSimplenoteは使いやすく軽量で良いアプリではあるものの、データが全てクラウド上で保管されてしまうのです。\nつまり、直接アプリ上でローカルファイルとして文書を管理する事が出来ないのです。\nこれでは、例えばgrepなどで内容を横断検索した時のような効率が損なわれます。\n確かにSimplenoteにもエクスポート機能はあるのですが、書いたその時点で自動的にローカルファイルと同期される状態が望ましいなと思い、代替となるテキスト管理手段を探していました。\n全てMarkdownへ移行  色々と調べる中で、「txtやアプリ上で管理する体制をやめ、全てMarkdownにしてしまおう」と思いつきました。\nというのも、例えばtxtファイルにメモを取りためると出てくる問題の一つとして、\n記法が統一されなくなりがち\nといった問題点があったからです。\nつまり、ファイル形式によって記法が予め決められている方が助かるな、と思った訳です。そこで記法が決まっているMarkdownが候補に挙がりました。\n実は「Markdownは箇条書きスタイルに向いている」ぐらいの認識しか持っていなかったので全てのメモをMarkdownにしてしまうのも考え物だなと思ったのですが、冷静に考えると\n 元々HTMLを簡易的に記述する目的で開発された言語  HTMLタグも埋め込んで利用可能   GitHubでよく見るREADME.mdなどもMarkdown TrelloやSlack1などの有名なツール群も軒並みMarkdown記法に対応 YAMLなどのFrontMatterも使える(場合がある)  などなどメリットがかなりあることに気付き、思いきって手元のローカルファイルのメモを全てMarkdownに置き換えることにしました。\nMarkdownつながりでHugoへ到達  以前から、個人で何かやるなら「ブログではなくサイトにしたい」と考えていました。記事も記事以外も載せられるメディアの方が良いなと思っていたので、ここは余り悩まずWebサイトにしようと決めました。\nそうした中で、色々現在の制作ツールを調べていきました。\nまた、ネット上で情報発信しているエンジニア諸氏の記事などをよく読んでいた影響か、「あまりゴチャゴチャしていないスッキリとした テキスト主体 のサイトが良いな」と思うようになっていました。\n「この人のサイト良いな」と思う度にWappalyzerやWhatRunsなどのChrome拡張機能を通じてどんなツールでそのサイトを構築したのかを何となく把握していたので、静的サイトジェネレータ という単語に辿り着くまでそう時間はかかりませんでした。\n静的サイトジェネレータは基本的にMarkdownなどのファイルから静的ファイル(動的な生成過程のないhtmlなど)を生成するのに使います。\nそして生成されたファイル群をNetlifyやGitHub Pagesなどのホスティングサービスで公開する、というのがサイト公開までの一連の流れです。\n他にも静的サイトジェネレータの候補はGatsby.jsやNext.jsやHexoやJekyllなど幾つかありました2が、Goで書かれていて一番高速とのことで Hugo\r を選ぶ事にしました。\n 次回へ続く  今回は導入以前の流れを振り返っただけでした。\n次回以降はHugoの導入やテーマ改良など具体的な話をしていきます。\n  厳密にはMarkdown記法とは異なりますが\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n ここに一通り載ってます→ Static Site Generators - Top Open Source SSGs | Jamstack\r\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","href":"/dev/build-website-using-hugo0/","tags":["Hugo"],"title":"Hugoで個人サイト制作⓪ Hugo導入以前"}]