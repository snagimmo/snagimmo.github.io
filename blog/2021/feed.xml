<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>snagim( 'e' )mo</title>
        <link>https://snagimmo.net/blog/2021/</link>
        <description>Recent content in 2021 on snagim( &#39;e&#39; )mo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-JP</language>
        <lastBuildDate>Thu, 22 Jul 2021 20:26:59 +0900</lastBuildDate>
        <atom:link href="https://snagimmo.net/blog/2021/feed.xml" rel="self" type="application/rss+xml" />
        <item>
            <title>dotfilesを更新してNeovimをWSL2でも使えるようにした</title>
            <link>https://snagimmo.net/blog/2021/07/updated-nvim-dotfiles/</link>
            <pubDate>Thu, 22 Jul 2021 20:26:59 +0900</pubDate>
            <guid>https://snagimmo.net/blog/2021/07/updated-nvim-dotfiles/</guid>
            <description>最近WSL2を弄って遊んでいる。
どうせならGitHubに置いてあるdotfilesリポジトリも洗練させたいなと思っていたので、WSL2のUbuntu環境にNeovimを導入するついでにdotfilesを弄ってみた。
改行コードをLFに統一 まず以前から放置していたdotfilesリポジトリ全体のCR/LF改行を全て LFに統一 した(README.md以外)。
 b413e41  NeovimをWSL2環境に移す為あれこれ変更 自分はNeovimのプラグイン管理をdein.vimで行っている。
dein側で読み込むinit.vim等の設定ファイルに必要な環境変数を.bashrcにセットした。
 e587688  次に、ローカルのWSL2でNeovim用の環境構築をあれこれ済ませた。
あまりにあれこれ過ぎるので詳細は書かないが、とりあえずメモ代わりにinstall-nvim.shなどの適当な名前を付け、Neovimインストールと周辺Vimプラグインの利用に必要なパッケージ・ライブラリ・ツール群の導入作業をまとめておいた。
 88b7c8f(install-nvim.shのコミ...</description>
            <content:encoded>
                    <![CDATA[
                    <p>最近WSL2を弄って遊んでいる。</p>
<p>どうせならGitHubに置いてある<a href="https://github.com/snagimmo/dotfiles" target="_blank">dotfilesリポジトリ</a>
も洗練させたいなと思っていたので、WSL2のUbuntu環境にNeovimを導入するついでにdotfilesを弄ってみた。</p>
<h3 id="改行コードをlfに統一">改行コードをLFに統一</h3>
<p>まず以前から放置していたdotfilesリポジトリ全体のCR/LF改行を全て <strong>LFに統一</strong> した(README.md以外)。</p>
<ul>
<li><a href="https://github.com/snagimmo/dotfiles/commit/b413e418d0c9cb83484873e20d26e439c65f2a99" target="_blank">b413e41</a>
</li>
</ul>
<h3 id="neovimをwsl2環境に移す為あれこれ変更">NeovimをWSL2環境に移す為あれこれ変更</h3>
<p>自分はNeovimのプラグイン管理を<a href="https://github.com/Shougo/dein.vim" target="_blank">dein.vim</a>
で行っている。</p>
<p>dein側で読み込む<code>init.vim</code>等の設定ファイルに必要な環境変数を<code>.bashrc</code>にセットした。</p>
<ul>
<li><a href="https://github.com/snagimmo/dotfiles/commit/e5876883162d3b658810c38a76e6aaca68e59a9e" target="_blank">e587688</a>
</li>
</ul>
<p>次に、ローカルのWSL2でNeovim用の環境構築をあれこれ済ませた。</p>
<p>あまりにあれこれ過ぎるので詳細は書かないが、とりあえずメモ代わりに<code>install-nvim.sh</code>などの適当な名前を付け、Neovimインストールと周辺Vimプラグインの利用に必要なパッケージ・ライブラリ・ツール群の導入作業をまとめておいた。</p>
<ul>
<li><a href="https://github.com/snagimmo/dotfiles/commit/88b7c8fca53cd0d0c835e9354c578ca4b76c1f54" target="_blank">88b7c8f</a>
(<code>install-nvim.sh</code>のコミット)</li>
</ul>
<p>上記コミットからも分かるように、Neovimの方は本家Vimと違って多くの外部ツールに依存していて結構厄介だ。</p>
<p>nvim-treesitterを使っているので<code>tree-sitter</code>と<code>node</code>(Node.js)と<code>git</code>と<code>gcc</code>がまず必要だし、</p>
<p>coc-fzfを使っているので<code>fzf</code>が必要だし、</p>
<p>denite.nvimを使っているのでPython3と<code>msgpack</code>(バージョン1.0.0以上)が必要だ。</p>
<p>大体上記の<code>install-nvim.sh</code>に必要なものはまとめたし、<code>git</code>や<code>gcc</code>など他のツールでも使う定番ものが多いとはいえ、改めて見ると結構繁雑だ。</p>
<h3 id="readmemdも更新">README.mdも更新</h3>
<p>README.mdだけ改行がLFになっていないのも気になっていたのでNeovimの導入に必要なツール群を追加するついでにこちらの改行も変更した。</p>
<ul>
<li><a href="https://github.com/snagimmo/dotfiles/commit/601814d130be94957361e5b97b53fc2059bb75f1" target="_blank">601814d</a>
</li>
</ul>
<h3 id="おわり">おわり</h3>
<p>我ながら、環境構築やdotfiles弄りは <strong>デジタル盆栽</strong> みたいなものだなと個人的に思う。</p>
<p>生えて来る枝葉を剪定しているだけで時間が溶けてしまうので手際よく済ませたいところだ。</p>

                    ]]>
            </content:encoded>
        </item>
        <item>
            <title>タスクスケジューラでMyDNS.jpとSlackに自動通知</title>
            <link>https://snagimmo.net/blog/2021/07/notify-mydns/</link>
            <pubDate>Fri, 02 Jul 2021 17:55:11 +0900</pubDate>
            <guid>https://snagimmo.net/blog/2021/07/notify-mydns/</guid>
            <description>最近とある用事でDDNSを使い始めた。
が、面倒で自動通知まわりの設定をせずに使ってしまっていたのでちゃんとやることにした。ついでにSlackにも自動で通知を送るようにしてみた。
この手の雑務はLinuxでcronを使うのが一般的だとは思うものの、 敢えてWindowsのタスクスケジューラでやってみた。
シェルスクリプトの自動実行 Windows環境で Git for Windows を入れている場合、 下記コマンドを タスクスケジューラ に登録すればシェルスクリプトが自動実行できる
C:\Windows\System32\cmd.exe /c &quot;&quot;C:\Program Files\Git\bin\sh.exe&quot; --login -i -- D:\temp\test.sh&quot; bash.exeを呼び出してターミナル上でshコマンドを使うのではなくsh.exeを最初から呼び出すのがコツらしい
参考  shell - Windows shortcut to run a Git Bash script - Stack Overflow  MyDNS.j...</description>
            <content:encoded>
                    <![CDATA[
                    <p>最近とある用事でDDNSを使い始めた。</p>
<p>が、面倒で自動通知まわりの設定をせずに使ってしまっていたのでちゃんとやることにした。ついでにSlackにも自動で通知を送るようにしてみた。</p>
<p>この手の雑務はLinuxでcronを使うのが一般的だとは思うものの、 敢えてWindowsのタスクスケジューラでやってみた。</p>
<h2 id="シェルスクリプトの自動実行">シェルスクリプトの自動実行</h2>
<p>Windows環境で <strong>Git for Windows</strong> を入れている場合、 下記コマンドを <strong>タスクスケジューラ</strong> に登録すればシェルスクリプトが自動実行できる</p>
<pre><code>C:\Windows\System32\cmd.exe /c &quot;&quot;C:\Program Files\Git\bin\sh.exe&quot; --login -i -- D:\temp\test.sh&quot;
</code></pre><p><code>bash.exe</code>を呼び出してターミナル上で<code>sh</code>コマンドを使うのではなく<code>sh.exe</code>を最初から呼び出すのがコツらしい</p>
<h4>参考</h4>
<ul>
<li><a href="https://stackoverflow.com/questions/21564275/windows-shortcut-to-run-a-git-bash-script" target="_blank">shell - Windows shortcut to run a Git Bash script - Stack Overflow</a>
</li>
</ul>
<h2 id="mydnsjpへの自動ip通知">MyDNS.jpへの自動IP通知</h2>
<p><a href="http://www.mydns.jp/#howtouse" target="_blank">公式</a>
にもあるようにMyDNS.jpは<code>curl</code>コマンドを使って特定URLにアクセス(POST)する事でIP通知を行う事が出来る。</p>
<p>IPv4もIPv6も両方行うようにした。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash:notify_mydns.sh" data-lang="bash:notify_mydns.sh"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>set -ex

<span style="color:#75715e">## Load old IP addresses</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! -e ./old_ipv4 <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
  touch ./old_ipv4
<span style="color:#66d9ef">fi</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! -e ./old_ipv6 <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
  touch ./old_ipv6
<span style="color:#66d9ef">fi</span>
old_ipv4<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>cat ./old_ipv4<span style="color:#66d9ef">)</span>
old_ipv6<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>cat ./old_ipv6<span style="color:#66d9ef">)</span>

<span style="color:#75715e">## Notify MyDNS.jp</span>
ipv4<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl -4s ifconfig.io<span style="color:#66d9ef">)</span>
ipv6<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl -6s ifconfig.io<span style="color:#66d9ef">)</span>
curl <span style="color:#e6db74">&#34;https://www.mydns.jp/directip.html?MID=</span><span style="color:#e6db74">${</span>MYDNS_MID<span style="color:#e6db74">}</span><span style="color:#e6db74">&amp;PWD=</span><span style="color:#e6db74">${</span>MYDNS_PASSWD<span style="color:#e6db74">}</span><span style="color:#e6db74">&amp;IPV4ADDR=</span><span style="color:#e6db74">${</span>ipv4<span style="color:#e6db74">}</span><span style="color:#e6db74">&amp;IPV6ADDR=</span><span style="color:#e6db74">${</span>ipv6<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>

<span style="color:#75715e">## Post JSON to a Slack webhook url</span>
msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{&#34;blocks&#34;: [{&#34;type&#34;: &#34;section&#34;,&#34;text&#34;: {&#34;type&#34;: &#34;mrkdwn&#34;,&#34;text&#34;: &#34;📡DDNS Info📡\n\n&lt;https://www.mydns.jp/|MyDNS.jp&gt; was notified of your IP addresses successfully!\n\nOld IPv4: &#39;</span><span style="color:#e6db74">${</span>old_ipv4<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;\n*New* IPv4: *&#39;</span><span style="color:#e6db74">${</span>ipv4<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;*\n\nOld IPv6: &#39;</span><span style="color:#e6db74">${</span>old_ipv6<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;\n*New* IPv6: *&#39;</span><span style="color:#e6db74">${</span>ipv6<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;*&#34;}}]}&#39;</span>
echo <span style="color:#e6db74">${</span>msg<span style="color:#e6db74">}</span> &gt; msg.json
curl -X POST -H <span style="color:#e6db74">&#39;Content-type: application/json&#39;</span> -d @msg.json <span style="color:#e6db74">${</span>SLACK_WEBHOOK_NOTICE<span style="color:#e6db74">}</span>
rm ./msg.json

<span style="color:#75715e">## Update old IP addresses</span>
echo $ipv4 &gt; ./old_ipv4
echo $ipv6 &gt; ./old_ipv6
</code></pre></div><p><code>$MYDNS_MID</code>、 <code>$MYDNS_PASSWD</code>, <code>$SLACK_WEBHOOK_NOTICE</code>に関してはWindows側のユーザ環境変数を利用している。</p>
<p>MyDNS.jp利用者であればMIDとパスワードの詳細は説明不要だと思うので省略。</p>
<h3 id="slackへの自動通知について">Slackへの自動通知について</h3>
<p>メッセージをJSONとして中間ファイルにし、それを<code>curl</code>でSlack AppのIncoming Webhook URLにPOSTしている。</p>
<p>JSON内にある<code>&quot;blocks&quot;</code>だが、これはSlackの <strong>Block Kit</strong> の仕組みを利用している。確か2019年頃から公式で扱われ始めた機能だったと思う<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>が、2018年以前に主流だった<code>&quot;attachments&quot;</code>の方が個人的には好きな見た目をしている<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>。</p>
<h2 id="タスクスケジューラに登録">タスクスケジューラに登録</h2>
<p>あとは下記コマンドを各自のパスに合わせつつタスクスケジューラに登録すれば完了。</p>
<p>通知タイミングは2日に1回・早朝にした。朝4時ごろにWindowsをスリープから叩き起こして活を入れている。</p>
<pre><code>C:\Windows\System32\cmd.exe /c &quot;&quot;C:\Program Files\Git\bin\sh.exe&quot; --login -i -- D:\hoge\notify_mydns.sh&quot;
</code></pre><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>ここ参照: <a href="https://note.com/daharas/n/ne61b30ac1502" target="_blank">Slack Block Kitはめっちゃ使いやすいけど使いまくると怒られる｜daharas｜note</a>
&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>でも非推奨っぽいので使えない&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

                    ]]>
            </content:encoded>
        </item>
        <item>
            <title>Hugoで個人サイト制作(7) Hugoサイトの公開</title>
            <link>https://snagimmo.net/dev/build-website-using-hugo7/</link>
            <pubDate>Fri, 02 Jul 2021 12:48:02 +0900</pubDate>
            <guid>https://snagimmo.net/dev/build-website-using-hugo7/</guid>
            <description>このサイトは Hugoというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。
 第0回: Hugoで個人サイト制作(0) Hugo導入以前 第1回: Hugoで個人サイト制作(1) Hugo導入 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4 第7回(今回)  今回でこのシリーズは 終わり です。最後にCircleCIとGitHub Pagesで自動ビルド・自動デプロイを行い、Hugoサイトを公開します。
CircleCI + GitHub Pagesによるサイト公開の流れ CircleCIとGitHub Pagesを使ったサイト公開までの大まかな流れは下記の通りです。
 CircleCIのアカウント作成、GitH...</description>
            <content:encoded>
                    <![CDATA[
                    <p>このサイトは <a href="https://gohugo.io" target="_blank">Hugo</a>
というツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。</p>
<ul>
<li>第0回: <a href="https://snagimmo.net/dev/build-website-using-hugo0/">Hugoで個人サイト制作(0) Hugo導入以前</a>
</li>
<li>第1回: <a href="https://snagimmo.net/dev/build-website-using-hugo1/">Hugoで個人サイト制作(1) Hugo導入</a>
</li>
<li>第2回: <a href="https://snagimmo.net/dev/build-website-using-hugo2/">Hugoで個人サイト制作(2) コンテンツ管理とテンプレート</a>
</li>
<li>第3回: <a href="https://snagimmo.net/dev/build-website-using-hugo3/">Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1</a>
</li>
<li>第4回: <a href="https://snagimmo.net/dev/build-website-using-hugo4/">Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2</a>
</li>
<li>第5回: <a href="https://snagimmo.net/dev/build-website-using-hugo5/">Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3</a>
</li>
<li>第6回: <a href="https://snagimmo.net/dev/build-website-using-hugo6/">Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4</a>
</li>
<li><strong>第7回(今回)</strong></li>
</ul>
<p>今回でこのシリーズは <strong>終わり</strong> です。最後にCircleCIとGitHub Pagesで自動ビルド・自動デプロイを行い、Hugoサイトを公開します。</p>
<h2 id="circleci--github-pagesによるサイト公開の流れ">CircleCI + GitHub Pagesによるサイト公開の流れ</h2>
<p>CircleCIとGitHub Pagesを使ったサイト公開までの大まかな流れは下記の通りです。</p>
<ol>
<li>CircleCIのアカウント作成、GitHubのHugo編集用リポジトリを紐づけておく</li>
<li>GitHub Pages用リポジトリも作成しておく</li>
<li>SSHキーを生成してCircleCIに秘密鍵、 GitHubに公開鍵をそれぞれ登録</li>
<li>Hugo編集用リポジトリに下記タスクを実行する<code>ROOT/.circleci/config.yml</code>作成
<ul>
<li>Hugo編集用リポジトリへのpushをトリガーとしてCircleCIがビルドを実行</li>
<li>自動ビルドしたファイル群をCircleCIがGitHub Pages用リポジトリへ自動push(デプロイ)</li>
</ul>
</li>
<li>Hugo編集用リポジトリにcommit&amp;pushするとCircleCIのジョブが開始</li>
</ol>
<p>※CircleCIとGitHub Pagesのアカウント作成・リポジトリ設定はここでは省略します。</p>
<h2 id="hugoのビルドについて">Hugoのビルドについて</h2>
<h3 id="publicディレクトリについて">publicディレクトリについて</h3>
<p>Hugoは静的サイトをビルドする際、サイト用ディレクトリのルート直下(<code>ROOT/</code>)に</p>
<pre><code>public
</code></pre><p>というディレクトリを作成し、その直下に <strong>ビルド済みファイル群を配置</strong> します。</p>
<h3 id="publicディレクトリの中身">publicディレクトリの中身</h3>
<p>例えば、2021年6月現在の当サイトのpublicディレクトリは大体こんな感じの構造です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmd" data-lang="cmd">D:\proj\hugo\neoclassic\public<span style="color:#75715e">&gt;tree</span>
D:.
├─blog
│  └─2021
│      └─06
│          └─about-this-site
├─categories
│  └─website
├─contact
├─css
├─dev
│  ├─build-website-using-hugo0
│  ├─(中略)
│  ├─build-website-using-hugo6
│  │  └─resize
│  └─website
├─fontawesome
├─fonts
├─images
├─js
├─privacy
├─tags
│  └─hugo
└─updates
</code></pre></div><p><code>ROOT/static</code>直下のファイル群も<code>ROOT/public</code>直下に配置される点が重要です。</p>
<p><code>ROOT/static/css/hoge.css</code>はそのまま<code>ROOT/public/css/hoge.css</code>として配置されます。</p>
<h3 id="公開範囲とpublicリポジトリについて">公開範囲とpublicリポジトリについて</h3>
<p>多くのHugoユーザーはこの<code>ROOT/public</code>ディレクトリをそのまま(サイト編集用とは)別のリポジトリとして管理し、各種ホスティングサービス・サーバ上で公開しています。</p>
<p>リポジトリ・ブランチをどのように設定・公開するかは人それぞれであり様々な方法があるので詳しくはここでは触れませんが、<code>master(main)</code>ブランチをそのまま公開する方法や<code>gh-pages</code>ブランチのみを公開する方法など、多岐にわたっています。</p>
<p>私はサイト編集用リポジトリの<code>main</code>ブランチをそのままCircleCI上でビルドしてもらい、更に生成された<code>ROOT/public</code>ディレクトリを丸ごとGitHub Pages用リポジトリにpushしてもらうことにしました。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://kenchan0130.github.io/post/2018-06-18-1" target="_blank">Circle CIを使用したWebページのGitHub Pagesへのデプロイ</a>
</li>
</ul>
<h2 id="sshキーを生成してcircleciに登録">SSHキーを生成してCircleCIに登録</h2>
<p>SSHの詳しい解説は他のサイトでもあるので省略します。</p>
<p>下記コマンド実行でOKです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ssh-keygen -t rsa -b <span style="color:#ae81ff">4096</span> -m pem -C <span style="color:#e6db74">&#34;CircleCI&#34;</span> -f id_rsa_circleci -N <span style="color:#e6db74">&#34;&#34;</span>
</code></pre></div><p>これで<code>id_rsa_circleci</code>と<code>id_rsa_circleci.pub</code>のペアが作成されます。</p>
<p>詳しくは下記公式Docsに載っています。「Cloud 版 CircleCI の場合」という項目が今回該当する説明だと思います。</p>
<ul>
<li><a href="https://circleci.com/docs/ja/2.0/add-ssh-key/" target="_blank">CircleCI に SSH 鍵を登録する - CircleCI</a>
</li>
</ul>
<h2 id="configymlの実例">config.ymlの実例</h2>
<p>次にビルド&amp;デプロイタスクを設定するためのコンフィグファイルを作成します。</p>
<h3 id="cimggoの例-駄目な例">cimg/goの例 (駄目な例)</h3>
<p>色々試しましたが、<code>cimg/go</code>というDockerイメージを使ってあれこれやっている内に自動ビルドとデプロイに成功しました。その<code>config.yml</code>がこちら(無意味なキャッシュ操作も含まれていますが)。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml:config.yml" data-lang="yml:config.yml"><span style="color:#f92672">version</span>: <span style="color:#ae81ff">2.1</span>
<span style="color:#f92672">jobs</span>:
  <span style="color:#f92672">build</span>:
    <span style="color:#f92672">working_directory</span>: <span style="color:#ae81ff">~/repo</span>
    <span style="color:#f92672">docker</span>:
      - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">cimg/go:1.16</span>
    <span style="color:#f92672">steps</span>:
      - <span style="color:#f92672">add_ssh_keys</span>:
          <span style="color:#f92672">fingerprints</span>:
            - <span style="color:#e6db74">&#34;YO:UR:FI:NG:ER:PR:IN:TS&#34;</span>
      - <span style="color:#f92672">run</span>:
          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Clone hugo</span>
          <span style="color:#f92672">command</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">              mkdir ~/src; cd $_
</span><span style="color:#e6db74">              git clone https://github.com/gohugoio/hugo.git</span>              
      - <span style="color:#f92672">restore_cache</span>:
          <span style="color:#f92672">keys</span>:
            - <span style="color:#ae81ff">go-mod-v4-{{ checksum &#34;~/src/hugo/go.sum&#34; }}</span>
      - <span style="color:#f92672">run</span>:
          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install hugo</span>
          <span style="color:#f92672">command</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">              cd ~/src/hugo
</span><span style="color:#e6db74">              go install</span>              
      - <span style="color:#f92672">save_cache</span>:
          <span style="color:#f92672">key</span>: <span style="color:#ae81ff">go-mod-v4-{{ checksum &#34;~/src/hugo/go.sum&#34; }}</span>
          <span style="color:#f92672">paths</span>:
            - <span style="color:#e6db74">&#34;/go/pkg/mod&#34;</span>
      - <span style="color:#ae81ff">checkout</span>
      - <span style="color:#f92672">run</span>:
          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Hugo build</span>
          <span style="color:#f92672">command</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">              rm -rf public
</span><span style="color:#e6db74">              git clone git@github.com:snagimmo/snagimmo.github.io public
</span><span style="color:#e6db74">              hugo</span>              
      - <span style="color:#f92672">run</span>:
          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Push repo to github.io</span>
          <span style="color:#f92672">command</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">              cd public
</span><span style="color:#e6db74">              git config --global user.name &#34;CircleCI&#34;
</span><span style="color:#e6db74">              git config --global user.email &#34;circleci@example.com&#34;
</span><span style="color:#e6db74">              git add .
</span><span style="color:#e6db74">              msg=&#34;rebuild... `TZ=&#39;Asia/Tokyo&#39; date -Iseconds | sed -e &#39;s/+09:00//g&#39; | sed -e &#39;s/T/ /g&#39;`&#34;
</span><span style="color:#e6db74">              git commit -m &#34;$msg&#34;
</span><span style="color:#e6db74">              git push origin main</span>              
<span style="color:#f92672">workflows</span>:
  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">2.1</span>
  <span style="color:#f92672">main</span>:
    <span style="color:#f92672">jobs</span>:
      - <span style="color:#f92672">build</span>:
          <span style="color:#f92672">filters</span>:
            <span style="color:#f92672">branches</span>:
              <span style="color:#f92672">only</span>: <span style="color:#ae81ff">main</span>
</code></pre></div><p>参考: <a href="https://www.ted027.com/post/circleci/" target="_blank">CircleCIでHugoのビルドを自動化した話 - 行けたら行く</a>
</p>
<p>……が、この設定では駄目でした。</p>
<p>やり方がまずいのかも知れませんが、とにかくこの設定では <strong>毎回Hugoをインストールするのに1分20～1分30秒</strong> ほどかかっていました。何とかHugoインストールの工程をキャッシュに保存して読み出せないかなと考えたのですが、CircleCIやこの周辺の設定に疎く、数日の間はこれで騙し騙しやっていました。</p>
<figure class="">
  <div class="img-wrapper">
    <a href="001.png" data-lightbox="images" data-title="">
      <img src="resize/001.png" width=""/>
    </a>
  </div>
</figure>
<p>それでも、上記画像のように余りにも遅すぎるので、違う方法を採用することにしました。</p>
<h3 id="orbcirclecihugoの例-完成例">Orb(circleci/hugo)の例 (完成例)</h3>
<p>調べた結果、CircleCIの <strong>Orb</strong> というビルド用テンプレートのようなものが実行速度などに優れているらしい事を知り、早速CircleCIのドキュメントなどを読みつつ<code>config.yml</code>を下記の通り書き換えました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml:config.yml" data-lang="yaml:config.yml"><span style="color:#f92672">version</span>: <span style="color:#ae81ff">2.1</span>
<span style="color:#f92672">orbs</span>:
  <span style="color:#f92672">hugo</span>: <span style="color:#ae81ff">circleci/hugo@1.2.2</span>
<span style="color:#f92672">jobs</span>:
  <span style="color:#f92672">deploy</span>:
    <span style="color:#f92672">docker</span>:
        - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">cimg/base:stable</span>
    <span style="color:#f92672">steps</span>:
      - <span style="color:#f92672">add_ssh_keys</span>:
          <span style="color:#f92672">fingerprints</span>:
            - <span style="color:#e6db74">&#34;YO:UR:FI:NG:ER:PR:IN:TS&#34;</span>
      - <span style="color:#f92672">attach_workspace</span>:
          <span style="color:#f92672">at</span>: <span style="color:#ae81ff">.</span>
      - <span style="color:#f92672">run</span>:
          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Copy built public to cloned public</span>
          <span style="color:#f92672">command</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">              echo &#34;Hostname github.com&#34; &gt;&gt; ~/.ssh/config
</span><span style="color:#e6db74">              echo &#34;StrictHostKeyChecking no&#34; &gt;&gt; ~/.ssh/config
</span><span style="color:#e6db74">              git config --global user.name &#34;CircleCI&#34;
</span><span style="color:#e6db74">              git config --global user.email &#34;circleci@example.com&#34;
</span><span style="color:#e6db74">              git clone git@github.com:snagimmo/snagimmo.github.io deploy
</span><span style="color:#e6db74">              cd deploy
</span><span style="color:#e6db74">              rm -vrf ./*
</span><span style="color:#e6db74">              cp -v -R ../public/* ./</span>              
      - <span style="color:#f92672">run</span>:
          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Push repo to github.io</span>
          <span style="color:#f92672">command</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">              cd deploy
</span><span style="color:#e6db74">              git add . -f
</span><span style="color:#e6db74">              msg=&#34;rebuild... `TZ=&#39;Asia/Tokyo&#39; date -Iseconds | sed -e &#39;s/+09:00//g&#39; | sed -e &#39;s/T/ /g&#39;`&#34;
</span><span style="color:#e6db74">              git commit -m &#34;$msg&#34;
</span><span style="color:#e6db74">              git push origin main -f</span>              
<span style="color:#f92672">workflows</span>:
  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">2.1</span>
  <span style="color:#f92672">main</span>:
    <span style="color:#f92672">jobs</span>:
      - <span style="color:#f92672">hugo/build</span>:
          <span style="color:#f92672">html-proofer</span>: <span style="color:#66d9ef">false</span>
          <span style="color:#f92672">filters</span>:
            <span style="color:#f92672">branches</span>:
              <span style="color:#f92672">only</span>: <span style="color:#ae81ff">main</span>
      - <span style="color:#f92672">deploy</span>:
          <span style="color:#f92672">requires</span>:
            - <span style="color:#ae81ff">hugo/build</span>
          <span style="color:#f92672">filters</span>:
            <span style="color:#f92672">branches</span>:
              <span style="color:#f92672">only</span>: <span style="color:#ae81ff">main</span>
</code></pre></div><p>参考: <a href="https://blog.abekoh.dev/posts/how-to-build-this-blog" target="_blank">Hugo, Github Pages, CircleCIつかってブログ構築 - abekoh’s tech note</a>
</p>
<p>結果、全てのタスクが <strong>10～30秒</strong> 程度で終わるようになりました。Orb様様です。</p>
<figure class="">
  <div class="img-wrapper">
    <a href="002-1.png" data-lightbox="images" data-title="">
      <img src="resize/002-1.png" width=""/>
    </a>
  </div>
</figure>
<figure class="">
  <div class="img-wrapper">
    <a href="002-2.png" data-lightbox="images" data-title="">
      <img src="resize/002-2.png" width=""/>
    </a>
  </div>
</figure>
<p>そして同時に、この<code>config.yml</code>の完成を以て、Hugoサイト更新用の準備は整ったという訳です。あとは記事を書いてHugo編集用リポジトリの変更をcommit&amp;pushするだけで、自動でCircleCIがビルドとデプロイを行ってくれます。</p>
<h2 id="configymlの注意点">config.ymlの注意点</h2>
<p>上記のYAMLを作成する上で詰まったポイントなどをメモしておきます。</p>
<h3 id="deploy-keyとadditional-ssh-keysについて">Deploy KeyとAdditional SSH Keysについて</h3>
<p>色々と調べものをしている際、</p>
<blockquote>
<p>デフォルトのCircleCI側で用意されたSSHキーはRead Onlyなので削除するべきだ</p>
</blockquote>
<p>と書いている記事を多く見かけましたが、結論を書くと2021年6月時点では <strong>デフォルトのSSHキー(Deploy Key)を削除しなくても大丈夫</strong> でした(むしろ削除したら紐づけたリポジトリからのcloneが動作しなかった)。</p>
<p>デフォルトのSSHキーは残したままで別途自分で作成したSSHキー(Additional SSH Keys)を登録しただけですが、CircleCI上のビルド・デプロイタスクは正常に動作しています。</p>
<figure class="">
  <div class="img-wrapper">
    <a href="003-1.png" data-lightbox="images" data-title="">
      <img src="resize/003-1.png" width=""/>
    </a>
  </div>
</figure>
<figure class="">
  <div class="img-wrapper">
    <a href="003-2.png" data-lightbox="images" data-title="">
      <img src="resize/003-2.png" width=""/>
    </a>
  </div>
</figure>
<p>その代わりと言いますか、SSHキーは削除しなくても良かったのですが、上記の実例にもあるように <code>StrictHostKeyChecking=no</code>というオプションを<code>~/.ssh/config</code>に追記する必要がありました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml:config.yml" data-lang="yaml:config.yml"><span style="color:#ae81ff">echo &#34;Hostname github.com&#34; &gt;&gt; ~/.ssh/config</span>
<span style="color:#ae81ff">echo &#34;StrictHostKeyChecking no&#34; &gt;&gt; ~/.ssh/config</span>
</code></pre></div><p>この行が <strong>重要</strong> です。これを追加するまではリポジトリからのcloneに失敗します。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://blog.abekoh.dev/posts/how-to-build-this-blog" target="_blank">Hugo, Github Pages, CircleCIつかってブログ構築 - abekoh’s tech note</a>

<ul>
<li>こちらに<code>StrictHostKeyChecking=no</code>の話が載っています</li>
</ul>
</li>
<li><a href="https://www.ted027.com/post/circleci/" target="_blank">CircleCIでHugoのビルドを自動化した話 - 行けたら行く</a>
</li>
</ul>
<h3 id="circleciのexecutorについて">CircleCIのExecutorについて</h3>
<p>実は、<code>cimg/go</code>よりも更に前は下記のようなGo言語用イメージなどを使っていました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml:config.yml" data-lang="yaml:config.yml"><span style="color:#f92672">docker</span>:
  - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">circleci/golang:1.15.8</span>
</code></pre></div><p>ドキュメントを読み、これが <strong>古いCircleCI用のイメージ</strong> だと知り、<code>cimg/go</code>を使うようになりました(最終的にOrbに移行するのでこれも使わなくなりますが)。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml:config.yml" data-lang="yaml:config.yml"><span style="color:#f92672">docker</span>:
  - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">cimg/go:1.16</span>
</code></pre></div><p>下記の通り<code>circleci/golang</code>に関しては完全に公式でも旧式のものとして扱われています。</p>
<p><a href="https://circleci.com/developer/images/image/cimg/go#browsers" target="_blank">cimg/go - CircleCI</a>
 より引用</p>
<blockquote>
<p>This image is designed to supercede the legacy CircleCI Go image, circleci/golang.</p>
</blockquote>
<p>CircleCI側が用意する新しいGo言語用のDockerイメージは<code>cimg/go</code>になっているので、Orbでないとしても<code>cimg</code>の使用をおすすめします。</p>
<h3 id="orbについて">Orbについて</h3>
<p>前述の通り最終的には<code>circleci/golang</code>も<code>cimg/go</code>もやめて、CircleCIの <strong>Orb</strong> を使うことにした訳ですが、理由はビルドにかかる <strong>時間が圧倒的に短縮出来る</strong> からです。</p>
<p>ざっくりとした理解ですが、Orbを使うとどうやらHugoのインストール処理も<code>checkout</code>ジョブも<code>hugo</code>コマンドによるビルドも無しで、自動的にバックグラウンド処理としてCircleCIに紐づけたプロジェクト(Hugo編集用リポジトリ)をcloneし、それに対してHugoがビルドを行ってくれるらしいです。</p>
<p>しかもその工程が <strong>数秒から十数秒程度</strong> で終わります。</p>
<figure class="">
  <div class="img-wrapper">
    <a href="005-1.png" data-lightbox="images" data-title="">
      <img src="resize/005-1.png" width=""/>
    </a>
  </div>
</figure>
<figure class="">
  <div class="img-wrapper">
    <a href="005-2.png" data-lightbox="images" data-title="">
      <img src="resize/005-2.png" width=""/>
    </a>
  </div>
</figure>
<p>至れり尽くせりです。</p>
<p>また、2020年の記事にも下記のような記述があります。</p>
<p><a href="https://qiita.com/peaceiris/items/14d1a0f17dd25911e33b" target="_blank">Hugo が動く最小構成の Docker イメージを作る - Qiita</a>
 より引用</p>
<blockquote>
<p>現在 Hugo 公式 (gohugoio) が提供する Docker image はありません。</p>
<p>Docker Hub に gohugoio のアカウントがありますが、あれは GoHugoIO が管理しているものではありません。</p>
<p>最近の Hugo は連携できる外部ツールも増えて、すべての機能を利用する場合にはイメージサイズを小さくすることが難しくなりました。</p>
<p>v0.56 から導入された Hugo Modules は Go Modules と Git に依存しています。従って Hugo Modules が利用できる Docker image にはGo言語の環境を含めなければなりません。この時点でイメージサイズは alpine 系でも 417MB 近くになります。</p>
</blockquote>
<p>ですので、これからCircleCIでHugoを利用される場合、Executorをどうするか悩むよりも初めからOrbを使うのが速くて&amp;早くて良いのではないかと思います。</p>
<h3 id="2回もcd-deployしている理由">2回もcd deployしている理由</h3>
<p>気付いた方がおられると思いますが、上記実例では2回<code>cd deploy</code>しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml:config.yml" data-lang="yaml:config.yml">- <span style="color:#f92672">run</span>:
    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Copy built public to cloned public</span>
    <span style="color:#f92672">command</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">        # 省略
</span><span style="color:#e6db74">        cd deploy
</span><span style="color:#e6db74">        # 省略</span>        
- <span style="color:#f92672">run</span>:
    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Push repo to github.io</span>
    <span style="color:#f92672">command</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">        cd deploy
</span><span style="color:#e6db74">        # 省略
</span><span style="color:#e6db74">        git commit -m &#34;$msg&#34;
</span><span style="color:#e6db74">        git push origin main -f</span>        
</code></pre></div><p>これは何故かと言うと、Orb使用時に<code>run</code>ジョブを跨ぐとどうやら下記の<code>attach_workspace</code>ジョブで移動(指定)したディレクトリにもう一度移動するらしく、2度目の<code>cd</code>コマンドで移動しないと最後の<code>git</code>コマンドがエラーになるからです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml:config.yml" data-lang="yaml:config.yml">- <span style="color:#f92672">attach_workspace</span>:
    <span style="color:#f92672">at</span>: <span style="color:#ae81ff">.</span>
</code></pre></div><p>個人的にはpush用の<code>run</code>ジョブは名前を付けて分けておきたかったので、こういった形で2回<code>cd</code>する事になりました。</p>
<h3 id="configymlの構文チェッカーを使う">config.ymlの構文チェッカーを使う</h3>
<p>公式が用意したValidatorのようなものがあるのでそれを使うのも良いと思います。</p>
<p>こちらからDLしてパスを通せば使えます。</p>
<p>リンク: <a href="https://github.com/CircleCI-Public/circleci-cli/releases" target="_blank">Releases · CircleCI-Public/circleci-cli</a>
</p>
<p>インストール後、<code>ROOT/.circleci</code>ディレクトリに移動して下記コマンドを実行すると<code>.circleci/config.yml</code>が文法的に正しいかどうかチェックすることが出来ます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd .circleci
circleci config validate config.yml
</code></pre></div><h2 id="独自ドメインを利用する">独自ドメインを利用する</h2>
<p>私の場合はサイト公開後にGoogle Domainsで取得した独自ドメインを設定しました。</p>
<p>GitHub PagesデフォルトのURL<code>snagimmo.github.io</code>でも良いのですが、取ってしまったドメインを活用しようかなと。</p>
<p>まずGitHub Pages公式の説明にもあるように、Windows環境<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>だと<code>dig</code>コマンドがデフォルトで使えない為、<strong>BIND</strong> をインストールしておきました。</p>
<p>リンク: <a href="https://www.isc.org/download/" target="_blank">Downloads - ISC</a>
</p>
<p>ちょっと分かりにくいですが、<strong>Current-Stable</strong> と書いてあるリンクからDL出来ます。</p>
<figure class="">
  <div class="img-wrapper">
    <a href="006-1.png" data-lightbox="images" data-title="">
      <img src="resize/006-1.png" width=""/>
    </a>
  </div>
</figure>
<figure class="">
  <div class="img-wrapper">
    <a href="006-2.png" data-lightbox="images" data-title="">
      <img src="resize/006-2.png" width=""/>
    </a>
  </div>
</figure>
<p>BINDの設定に関してはここを参考にしました。</p>
<p>リンク: <a href="https://takenotes.jp/2019/11/02/windows%E3%81%A7dig%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/" target="_blank">Windowsでdigコマンドを使えるようにする – TakeNotes.JP</a>
</p>
<p>あとは下記の記事群を読みつつGitHub Pagesに独自ドメインを設定しました。</p>
<ul>
<li><a href="https://docs.github.com/ja/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site" target="_blank">GitHub Pages サイトのカスタムドメインを管理する - GitHub Docs</a>
</li>
<li><a href="https://docs.github.com/ja/pages/getting-started-with-github-pages/securing-your-github-pages-site-with-https" target="_blank">HTTPS で GitHub Pages サイトを保護する - GitHub Docs</a>
</li>
<li><a href="https://dev-moyashi.hatenablog.com/entry/2021/01/10/222249" target="_blank">GitHub Pages に Google Domains で購入した独自ドメインを設定する - もやし丸の備忘録</a>
</li>
</ul>
<h3 id="210702追記">21/07/02追記</h3>
<p>GitHub Pages上でのHTTPS化設定が煩雑だったのでCloudflareを利用してHTTPS化しました。</p>
<ul>
<li><a href="https://qiita.com/noraworld/items/89dd85a434a7b759e00c" target="_blank">GitHub Pages &#43; CloudFlare で独自ドメインをSSL化する - Qiita</a>
</li>
</ul>
<h2 id="最後に">最後に</h2>
<p>さて、これまでの記事でHugoの導入からHugoサイトの構築・公開までを一通り扱いました。</p>
<p>このシリーズはこれにて終了です。</p>
<p>ここまでお読みいただき、誠にありがとうございました。また同時に、元がメモという事もあり冗長かつ雑然とした記事になってしまい申し訳なく思います。</p>
<p>検索エンジンなどから辿り着く方を想定して書いているのですが、何らかの疑問やトラブル解決の一助になれば幸いです。</p>
<p>それでは。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>導入時の環境はWindows10 Home (バージョン20H2  )&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

                    ]]>
            </content:encoded>
        </item>
        <item>
            <title>Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4</title>
            <link>https://snagimmo.net/dev/build-website-using-hugo6/</link>
            <pubDate>Sat, 26 Jun 2021 16:10:00 +0900</pubDate>
            <guid>https://snagimmo.net/dev/build-website-using-hugo6/</guid>
            <description>このサイトは Hugoというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。
 第0回: Hugoで個人サイト制作(0) Hugo導入以前 第1回: Hugoで個人サイト制作(1) Hugo導入 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3 第6回(今回) 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開  今回でHugoテーマのカスタマイズは終了です。今回も機能面の追加などをしていきます。
サイト内全文検索としてLunrを導入 全文検索用のJSONファイルを生成 サイト内全文検索を行うには、まずその対象となるテキスト群を含んだJSONなどのファイルを生成しておく必要があります。
Hugoの場合は予め 全文検索用JSONファイル出力機能 が存在しています。詳しくは下記公式...</description>
            <content:encoded>
                    <![CDATA[
                    <p>このサイトは <a href="https://gohugo.io" target="_blank">Hugo</a>
というツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。</p>
<ul>
<li>第0回: <a href="https://snagimmo.net/dev/build-website-using-hugo0/">Hugoで個人サイト制作(0) Hugo導入以前</a>
</li>
<li>第1回: <a href="https://snagimmo.net/dev/build-website-using-hugo1/">Hugoで個人サイト制作(1) Hugo導入</a>
</li>
<li>第2回: <a href="https://snagimmo.net/dev/build-website-using-hugo2/">Hugoで個人サイト制作(2) コンテンツ管理とテンプレート</a>
</li>
<li>第3回: <a href="https://snagimmo.net/dev/build-website-using-hugo3/">Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1</a>
</li>
<li>第4回: <a href="https://snagimmo.net/dev/build-website-using-hugo4/">Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2</a>
</li>
<li>第5回: <a href="https://snagimmo.net/dev/build-website-using-hugo5/">Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3</a>
</li>
<li><strong>第6回(今回)</strong></li>
<li>第7回: <a href="https://snagimmo.net/dev/build-website-using-hugo7/">Hugoで個人サイト制作(7) Hugoサイトの公開</a>
</li>
</ul>
<p>今回でHugoテーマのカスタマイズは終了です。今回も機能面の追加などをしていきます。</p>
<h2 id="サイト内全文検索としてlunrを導入">サイト内全文検索としてLunrを導入</h2>
<h3 id="全文検索用のjsonファイルを生成">全文検索用のJSONファイルを生成</h3>
<p>サイト内全文検索を行うには、まずその対象となるテキスト群を含んだJSONなどのファイルを生成しておく必要があります。</p>
<p>Hugoの場合は予め <strong>全文検索用JSONファイル出力機能</strong> が存在しています。詳しくは下記公式Docsに書いてあります。</p>
<p>公式Docs: <a href="https://gohugo.io/templates/output-formats/#output-format-definitions" target="_blank">Custom Output Formats | Hugo</a>
</p>
<blockquote>
<p>Hugo can output content in multiple formats, including calendar events, e-book formats, Google AMP, and JSON search indexes, or any custom text format.</p>
</blockquote>
<p>「 <strong>JSON search indexes</strong> 」とありますね。これの事です。<code>ROOT/config.toml</code>内に下記項目を追加することで自動生成することが出来ます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml:config.toml" data-lang="toml:config.toml">[<span style="color:#a6e22e">outputs</span>]
  <span style="color:#a6e22e">home</span> = [<span style="color:#e6db74">&#34;HTML&#34;</span>, <span style="color:#e6db74">&#34;RSS&#34;</span>, <span style="color:#e6db74">&#34;JSON&#34;</span>]
</code></pre></div><p>この設定により、自動で<code>index.html</code>ファイル<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>と<code>index.xml</code>ファイル<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>と<code>index.json</code>ファイルがドキュメントルートに生成されます。</p>
<p>実ファイルがローカルに生成されるのではなくURL上で<code>http(s)://DOMAIN/XXX.html</code>などの形でアクセス出来るようになる、という点に注意です。</p>
<p>この際、<code>ROOT/layouts/_default</code>直下に同名の<code>index.json</code>というテンプレートファイルを作成することで、Hugoによって自動生成された<code>index.json</code>ファイルの内容を制御・変更することが可能になります。</p>
<p>私が作成した<code>index.json</code>のテンプレートは下記の通りです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json:index.json" data-lang="json:index.json">{<span style="color:#960050;background-color:#1e0010">{-</span> <span style="color:#960050;background-color:#1e0010">$.Scratch.Add</span> <span style="color:#f92672">&#34;index&#34;</span> <span style="color:#960050;background-color:#1e0010">slice</span> <span style="color:#960050;background-color:#1e0010">-</span>}<span style="color:#960050;background-color:#1e0010">}</span>
{<span style="color:#960050;background-color:#1e0010">{-</span> <span style="color:#960050;background-color:#1e0010">$section</span> <span style="color:#960050;background-color:#1e0010">:=</span> <span style="color:#960050;background-color:#1e0010">$.Site.GetPage</span> <span style="color:#f92672">&#34;section&#34;</span> <span style="color:#960050;background-color:#1e0010">.Section</span> <span style="color:#960050;background-color:#1e0010">-</span>}<span style="color:#960050;background-color:#1e0010">}</span>
{<span style="color:#960050;background-color:#1e0010">{-</span> <span style="color:#960050;background-color:#1e0010">range</span> <span style="color:#960050;background-color:#1e0010">.Site.RegularPages</span> <span style="color:#960050;background-color:#1e0010">-</span>}<span style="color:#960050;background-color:#1e0010">}</span>
    {<span style="color:#960050;background-color:#1e0010">{-</span> <span style="color:#960050;background-color:#1e0010">if</span> <span style="color:#960050;background-color:#1e0010">and</span> <span style="color:#960050;background-color:#1e0010">(.IsDescendant</span> <span style="color:#960050;background-color:#1e0010">$section)</span> <span style="color:#960050;background-color:#1e0010">(not</span> <span style="color:#960050;background-color:#1e0010">.Params.private)</span> <span style="color:#960050;background-color:#1e0010">-</span>}<span style="color:#960050;background-color:#1e0010">}</span>
        {<span style="color:#960050;background-color:#1e0010">{-</span> <span style="color:#960050;background-color:#1e0010">$.Scratch.Add</span> <span style="color:#f92672">&#34;index&#34;</span> <span style="color:#960050;background-color:#1e0010">(dict</span> <span style="color:#e6db74">&#34;title&#34;</span> <span style="color:#960050;background-color:#1e0010">.Title</span> <span style="color:#e6db74">&#34;tags&#34;</span> <span style="color:#960050;background-color:#1e0010">.Params.tags</span> <span style="color:#e6db74">&#34;categories&#34;</span> <span style="color:#960050;background-color:#1e0010">.Params.categories</span> <span style="color:#e6db74">&#34;contents&#34;</span> <span style="color:#960050;background-color:#1e0010">.Plain</span> <span style="color:#e6db74">&#34;href&#34;</span> <span style="color:#960050;background-color:#1e0010">.URL</span> <span style="color:#960050;background-color:#1e0010">)</span> <span style="color:#960050;background-color:#1e0010">-</span>}<span style="color:#960050;background-color:#1e0010">}</span>
    {<span style="color:#960050;background-color:#1e0010">{-</span> <span style="color:#960050;background-color:#1e0010">end</span> <span style="color:#960050;background-color:#1e0010">-</span>}<span style="color:#960050;background-color:#1e0010">}</span>
{<span style="color:#960050;background-color:#1e0010">{-</span> <span style="color:#960050;background-color:#1e0010">end</span> <span style="color:#960050;background-color:#1e0010">-</span>}<span style="color:#960050;background-color:#1e0010">}</span>
{<span style="color:#960050;background-color:#1e0010">{-</span> <span style="color:#960050;background-color:#1e0010">$.Scratch.Get</span> <span style="color:#f92672">&#34;index&#34;</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#960050;background-color:#1e0010">jsonify</span> <span style="color:#960050;background-color:#1e0010">-</span>}<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p><code>private: true</code>でない時は全て全文検索用のJSONに含めるという設定です。下記の参考記事群に大分助けられました。感謝です。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://blog.8-p.info/ja/2018/05/26/hugo-json/" target="_blank">Hugo で全記事いりの JSON ファイルをつくる - blog.8-p.info</a>
</li>
<li><a href="https://blog.uni-3.app/2019/01/02/hugo-algolia-search" target="_blank">hugoで作ったblogにalgoliaで全文検索機能を追加する | uni-3 log</a>
</li>
</ul>
<h3 id="lunrのソース群を配置">Lunrのソース群を配置</h3>
<p>色々と調べたところ、Hugoで全文検索を導入するにはTinysearchやLunrが良いらしいとの情報を得ました。結果的に <strong>Lunr</strong> に決めました。</p>
<p>さて、参考にさせて頂いた記事のリンク先(後述)には</p>
<blockquote>
<p>lunr.jsは<a href="https://github.com/olivernn/lunr.js/" target="_blank"> olivernn/lunr.js </a>
に、lunr.jp.js, lunr.multi.js, lunr.stemmer.support.js, tinyseg.jsは<a href="https://github.com/MihaiValentin/lunr-languages" target="_blank"> MihaiValentin/lunr-languages </a>
にある。</p>
</blockquote>
<p>とあるのですが、Lunr側のスクリプトを読むと事情が少し異なっています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js:lunr.jp.js" data-lang="js:lunr.jp.js"><span style="color:#75715e">// jp is the country code, while ja is the language code
</span><span style="color:#75715e">// a new lunr.ja.js has been created, but in order to
</span><span style="color:#75715e">// keep the backward compatibility, we&#39;ll leave the lunr.jp.js
</span><span style="color:#75715e">// here for a while, and just make it use the new lunr.ja.js
</span></code></pre></div><p>「後方互換性の為に<code>lunr.jp.js</code>を残しておくが、本来<code>jp</code>はカントリーコードであり言語コードは<code>ja</code>なので正式には<code>ja</code>の方が最適な表現だ」ということらしいです。</p>
<p>要するに、後から作成された<code>lunr.ja.js</code>の方を使ってくれ、という事でしょう。</p>
<p>ということで、必要なスクリプト群は下記 <strong>5つ</strong> と判明しました(動作検証済み)。</p>
<ul>
<li><a href="https://github.com/olivernn/lunr.js/blob/master/lunr.js" target="_blank">lunr.js</a>
</li>
<li><strong><a href="https://github.com/MihaiValentin/lunr-languages/blob/master/lunr.ja.js" target="_blank">lunr.ja.js</a>
</strong> ←これ1つで動作するので<code>lunr.jp.js</code>は不要です</li>
<li><a href="https://github.com/MihaiValentin/lunr-languages/blob/master/lunr.multi.js" target="_blank">lunr.multi.js</a>
</li>
<li><a href="https://github.com/MihaiValentin/lunr-languages/blob/master/lunr.stemmer.support.js" target="_blank">lunr.stemmer.support.js</a>
</li>
<li><a href="https://github.com/MihaiValentin/lunr-languages/blob/master/tinyseg.js" target="_blank">tinyseg.js</a>
</li>
</ul>
<p>全てDLしてきたら、例によって<code>ROOT/static/js</code>直下に置いておきます。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://blog.unigiri.net/article/hugo-lunr%E3%81%AB%E3%82%88%E3%82%8B%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2/" target="_blank">Hugo &#43; Lunrによる日本語全文検索 | Unigiri</a>
</li>
</ul>
<h3 id="検索用スクリプト作成">検索用スクリプト作成</h3>
<p>引き続き、下記の記事を参考に<code>ROOT/static/js/search.js</code>を作成します。</p>
<p>こちら: <a href="https://blog.unigiri.net/article/hugo-lunr%E3%81%AB%E3%82%88%E3%82%8B%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2/" target="_blank">Hugo &#43; Lunrによる日本語全文検索 | Unigiri</a>
</p>
<p>素晴らしいスクリプトを公開して下さって大変有難いのですが、ここで一点だけ詰まったので注意点を書いておきます。</p>
<p>下記のように<code>getJSON()</code>の引数に<code>index.json</code>が指定されている部分が4行目にあるのですが、ここで頭に<code>/</code>を付けないとスクリプトが読み込まれずエラーになります。ここさえ変更すれば動作すると思います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js:search.js" data-lang="js:search.js"><span style="color:#75715e">// 変更前
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>.<span style="color:#a6e22e">getJSON</span>(<span style="color:#e6db74">&#34;index.json&#34;</span>).<span style="color:#a6e22e">done</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">index</span>) {

<span style="color:#75715e">// 変更後
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>.<span style="color:#a6e22e">getJSON</span>(<span style="color:#e6db74">&#34;/index.json&#34;</span>).<span style="color:#a6e22e">done</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">index</span>) {
</code></pre></div><p>後はこれを<code>layouts/partials/footer.html</code>から呼び出せばスクリプトの読み込み自体はOKです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:footer.html" data-lang="html:footer.html"><span style="color:#75715e">&lt;!-- search scripts with Lunr &amp; jQuery --&gt;</span>
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://code.jquery.com/jquery-3.3.1.min.js&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/lunr.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/lunr.stemmer.support.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/tinyseg.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/lunr.ja.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/lunr.multi.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/search.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><h3 id="検索窓設置用のpartial-template作成">検索窓設置用のPartial Template作成</h3>
<p>さて、スクリプトを機能させる為の <strong>検索窓</strong> を付けます。</p>
<p>私は<code>ROOT/layouts/partials/search.html</code>というPartial Templateとして作成しました。このテンプレートは自作です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:search.html" data-lang="html:search.html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search-area&#34;</span>&gt;
  &lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search-form&#34;</span> <span style="color:#a6e22e">action</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .Permalink | safeURL }}&#34;</span> <span style="color:#a6e22e">onkeyup</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search()&#34;</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search-text&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search-query&#34;</span> <span style="color:#a6e22e">placeholder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Search this site&#34;</span> <span style="color:#a6e22e">autocomplete</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;off&#34;</span>/&gt;
  &lt;/<span style="color:#f92672">form</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search-button&#34;</span>&gt;
    {{ partial &#34;fontawesome.html&#34; &#34;search&#34; }}
  &lt;/<span style="color:#f92672">div</span>&gt;
  &lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search-results&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;results&#34;</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><p>途中まで試行錯誤していた残骸として使っていない<code>onkeyup</code>なども残っていますが、このPartial Templateを下記の通り<code>ROOT/layouts/_default/single.html</code>(各記事用テンプレートファイル)の冒頭で呼び出しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:single.html" data-lang="html:single.html">{{ partial &#34;header.html&#34; . }}
{{ partial &#34;search.html&#34; . }}
&lt;<span style="color:#f92672">br</span>&gt;

&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;article&#34;</span>&gt;
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;article-meta&#34;</span>&gt;
<span style="color:#75715e">&lt;!-- 以下省略 --&gt;</span>
</code></pre></div><p>以上でHugoとLunr.jsを組み合わせた全文検索用の簡易検索窓がサイト上部に設置できます。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://webparts.cman.jp/input/search/" target="_blank">検索窓をデザインする</a>
</li>
</ul>
<h2 id="ogpに対応させる">OGPに対応させる</h2>
<p>サイトを <strong>Open Graph Protocol(OGP)</strong> に対応させていきます。</p>
<p>URLがSlackやTwitterなどに貼られると自動でサイトカードなどとして変換されるあの仕組みの事ですね。</p>
<p>HugoではデフォルトでOGP用のテンプレートが用意されており、以下の2行を<code>&lt;head&gt;&lt;/head&gt;</code>内部に追記するだけで使えるようになっています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">head</span>&gt;
  <span style="color:#75715e">&lt;!-- 省略 --&gt;</span>
  {{ template &#34;_internal/opengraph.html&#34; . }}
  {{ template &#34;_internal/twitter_cards.html&#34; . }}
  <span style="color:#75715e">&lt;!-- 省略 --&gt;</span>
&lt;/<span style="color:#f92672">head</span>&gt;
</code></pre></div><p>ただ、このテンプレートでは背後でどのような動作をしているか今一つ分からないので、自分で追加する事にしました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:header.html" data-lang="html:header.html">&lt;<span style="color:#f92672">head</span>&gt;
  <span style="color:#75715e">&lt;!-- 省略 --&gt;</span>
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">property</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;og:type&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ if .IsHome }}blog{{ else }}article{{ end }}&#34;</span>&gt;
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">property</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;og:url&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .Permalink }}&#34;</span>&gt;
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">property</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;og:image&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .Site.BaseURL }}images/profile.png&#34;</span>&gt;
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">property</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;og:title&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ if .IsHome }}{{ $.Site.Title }}{{ else }}{{ .Title }}{{ end }}&#34;</span>&gt;
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">property</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;og:site_name&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ $.Site.Title }}&#34;</span>&gt;
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">property</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;og:description&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ if .IsHome }}{{ $.Site.Params.Description }}{{ else }}{{ .Description }}{{ end }}&#34;</span>&gt;
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;twitter:card&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;summary&#34;</span>&gt;
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;twitter:site&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;@{{ .Site.Params.author }}&#34;</span>&gt;
  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;twitter:creator&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;@{{ .Site.Params.author }}&#34;</span>&gt;
  <span style="color:#75715e">&lt;!-- 省略 --&gt;</span>
&lt;/<span style="color:#f92672">head</span>&gt;
</code></pre></div><p>また、<code>ROOT/config.toml</code>には下記のように<code>.Site.Params.XXX</code>の設定をしてあります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml:config.toml" data-lang="toml:config.toml">[<span style="color:#a6e22e">params</span>]
  <span style="color:#a6e22e">description</span> = <span style="color:#e6db74">&#34;snagimmo(すなぎも)の個人サイト&#34;</span>
  <span style="color:#a6e22e">author</span> = <span style="color:#e6db74">&#34;snagimmo&#34;</span>
  <span style="color:#75715e"># 以下省略</span>
</code></pre></div><p><code>IsHome</code>で場合分けをして無駄に<code>og:type</code>を<code>blog</code>か<code>article</code>かで分けたりもしていますが、とにかく無事にOGPが適用されてカードが表示されているのは確認したのでそれで良しとしました。</p>
<p>OGPの厄介だなと思うところはローカルでの確認が難しいところです。デプロイしてから下記の定番ツールで色々検証させて貰いました。</p>
<h4>参考リンク</h4>>
<ul>
<li><a href="https://rakko.tools/tools/9/" target="_blank">OGP確認：facebook、twitter、LINE、はてなのシェア時の画像・文章を表示 | ラッコツールズ🔧</a>
</li>
<li><a href="https://cards-dev.twitter.com/validator" target="_blank">Card Validator | Twitter Developers</a>
</li>
</ul>
<h2 id="rssフィードの改良">RSSフィードの改良</h2>
<h3 id="rss用のテンプレート">RSS用のテンプレート</h3>
<p>デフォルトではRSSフィード用の出力ファイル名は<code>index.xml</code>となっています。</p>
<p>公式Docs: <a href="https://gohugo.io/templates/rss/#section-rss" target="_blank">RSS Templates #Lookup Order for RSS Templates | Hugo</a>
</p>
<p>上記公式Docsにもある通り、Hugoは「探索順序」通りにファイルパスを探索します。このHugoが探索するファイルパスのいずれかにRSS用のテンプレートファイルを設置することでRSSフィードの内容を変える事が出来ます。</p>
<p>私の場合は<code>ROOT/layouts/_default/rss.xml</code>として下記の通りテンプレートを作成しています(長いのでGitHubへのリンクにしました)。</p>
<ul>
<li><a href="https://github.com/snagimmo/hugo-classic/blob/modified/layouts/_default/rss.xml" target="_blank">hugo-classic/rss.xml at modified · snagimmo/hugo-classic</a>
</li>
</ul>
<h3 id="rssファイルのリネーム">RSSファイルのリネーム</h3>
<p>次のように<code>ROOT/config.toml</code>でRSSフィード用の出力ファイル名を<code>feed</code>に指定することでURL上は<code>rss.xml</code>ではなく<code>feed.xml</code>がRSS用URLとなるようにしています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml:config.toml" data-lang="toml:config.toml">[<span style="color:#a6e22e">outputFormats</span>]
  [<span style="color:#a6e22e">outputFormats</span>.<span style="color:#a6e22e">RSS</span>]
    <span style="color:#a6e22e">mediaType</span> = <span style="color:#e6db74">&#34;application/rss+xml&#34;</span>
    <span style="color:#a6e22e">baseName</span> = <span style="color:#e6db74">&#34;feed&#34;</span>
    <span style="color:#a6e22e">protocol</span> = <span style="color:#e6db74">&#34;https://&#34;</span>
</code></pre></div><p>注意すべき点は、繰り返しになりますが <strong>Hugoの探索順序(Lookup Order)</strong> です。</p>
<p>ローカルのファイル名をいきなり<code>feed.xml</code>としても、その <strong><code>feed.xml</code>を含む探索パスをHugoは持たない</strong> 為に、URLにも反映されずRSSフィードの名前は<code>rss.xml</code>から変わりません。</p>
<p>よって、一度テンプレート用ファイル名を上記のLookup Order内のいずれかから選択しておき、同時に<code>config.toml</code>内で出力名を指定することでしかRSSフィード名を任意の名前にすることは出来ないわけです。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://codingnconcepts.com/hugo/custom-rss-feed-hugo/" target="_blank">Customize RSS in Hugo Website - Coding N Concepts</a>
</li>
</ul>
<h3 id="rssフィードの情報量を制限">RSSフィードの情報量を制限</h3>
<p>RSSでは<code>description</code>という項目内に要約文が載っていますが、サイトによってほぼコンテンツ全文を載せるか、要約文のみ載せるか、一行コメントだけ載せるか、やり方は様々だと思います。</p>
<p>私の場合は、下記のように<code>&lt;content:encoded&gt;</code>へコンテンツ内容を載せてみました。</p>
<p>実例がこちらです。<code>description</code>は500字程度にまとめつつ、Feedlyなどで見た時には記事内容が表示されるようにしました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml:rss.xml" data-lang="xml:rss.xml"><span style="color:#f92672">&lt;description&gt;</span>{{ if .Description }}{{ .Description }}{{ else }}{{ substr .Summary 0 500 | safeHTML }}{{ if gt (len .Summary) 500 }}...{{ end }}{{ end }}<span style="color:#f92672">&lt;/description&gt;</span>
<span style="color:#f92672">&lt;content:encoded&gt;</span>
        {{ `<span style="color:#75715e">&lt;![CDATA[` | safeHTML }}
</span><span style="color:#75715e">        {{ .Content }}
</span><span style="color:#75715e">        {{ `]]&gt;</span>` | safeHTML }}
<span style="color:#f92672">&lt;/content:encoded&gt;</span>
</code></pre></div><p>Hugoがデフォルトで用意している<code>.Summary</code>という要約文用の変数があるのですが、こちらを更に<code>substr</code>という関数で500文字以下に短くしています。</p>
<p>仮に500文字をSummaryが超過していた場合のみ、行末に省略記号<code>...</code>を付ける事にしています。</p>
<p>もし記事のFrontMatterに個別の<code>description</code>が設定されていた場合はそちらを<code>.Summary</code>よりも優先して載せるようにしました。</p>
<h2 id="フォントの見直し">フォントの見直し</h2>
<p>Hugo Classicには元々<code>ROOT/static/css/fonts.css</code>というフォント用CSSファイルがあるのでそれを編集しました。</p>
<p>最終的には下記のようになりました。</p>
<p>GitHub: <a href="https://github.com/snagimmo/hugo-classic/blob/modified/static/css/fonts.css" target="_blank">hugo-classic/fonts.css at modified · snagimmo/hugo-classic</a>
</p>
<p>それぞれの部分についてはこれから触れていきます。</p>
<h3 id="ヘッダとフッタのフォント">ヘッダとフッタのフォント</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css:fonts.css" data-lang="css:fonts.css"><span style="color:#f92672">header</span><span style="color:#f92672">,</span> <span style="color:#f92672">footer</span> {
  <span style="color:#66d9ef">font-family</span>: <span style="color:#e6db74">&#39;Inter&#39;</span> <span style="color:#75715e">!important</span>;
}
</code></pre></div><p>Hugo Classicで元々利用されていた <strong>Inter</strong> というフォントが気に入ったのでこれはこのまま使うことにしました。このサイトではヘッダとフッタの英字部分(home, contactなど)にこのフォントを利用しています。</p>
<h4>リンク</h4>
<ul>
<li><a href="https://rsms.me/inter/" target="_blank">Inter font family</a>
</li>
</ul>
<h3 id="コードブロックのフォント">コードブロックのフォント</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css:fonts.css" data-lang="css:fonts.css"><span style="color:#f92672">pre</span><span style="color:#f92672">,</span> <span style="color:#f92672">code</span> {
  <span style="color:#66d9ef">font-family</span>:
    <span style="color:#e6db74">&#39;Consolas&#39;</span>,
    <span style="color:#e6db74">&#39;Ricty Diminished&#39;</span>,
    <span style="color:#e6db74">&#39;Inconsolata&#39;</span>,
    Meiryo,
    <span style="color:#e6db74">&#34;メイリオ&#34;</span>,
    <span style="color:#e6db74">&#39;Noto Sans JP&#39;</span>,
    <span style="color:#e6db74">&#39;Kosugi&#39;</span> <span style="color:#75715e">!important</span>;
}
</code></pre></div><p>コードブロック系は <strong>Consolas</strong>, Consolasが無い環境では <strong>Inconsolata</strong> を使うようにしました。 <strong>Ricty Diminished</strong>も好きなフォントなので気が変わった時の為に一応加えておきました。</p>
<p>ブロック内の和文フォントに関しては基本的にメイリオで、メイリオが無ければ <strong>Noto Sans JP</strong> を使うようにしています。<strong>Kosugi</strong> は上のRicty Diminishedと同じ位置づけです。</p>
<h4>リンク</h4>
<ul>
<li><a href="https://google-webfonts-helper.herokuapp.com/fonts/inconsolata?subsets=latin" target="_blank">Inconsolata | google webfonts helper</a>
</li>
<li><a href="https://github.com/edihbrandon/RictyDiminished" target="_blank">edihbrandon/RictyDiminished: Ricty Diminished &amp;mdash; fonts for programming</a>
</li>
<li><a href="https://fonts.google.com/specimen/Noto&#43;Sans&#43;JP?subset=japanese#ChoosePlace:select" target="_blank">Noto Sans JP - Google Fonts</a>
</li>
<li><a href="https://fonts.google.com/specimen/Sawarabi&#43;Gothic?subset=japanese#ChoosePlace:select" target="_blank">Kosugi - Google Fonts</a>
</li>
<li><a href="https://google-webfonts-helper.herokuapp.com/fonts" target="_blank">google webfonts helper</a>
</li>
<li><a href="https://fonts.google.com/attribution" target="_blank">Google Fonts - Attribution</a>
</li>
</ul>
<h3 id="メインフォントをwebフォント化">メインフォントをWebフォント化</h3>
<p>一番気に入ってメインにしたいと思ったのが <strong>Segoe UI</strong> というフォントだったのですが、Windows以外のiOSなどの環境だと読み込まれなかったのでWebフォントとしてどの環境でも表示されるようにしました。</p>
<p>こちらの <a href="https://gist.github.com/AndrewCraswell/106143d1bb5d4162689b9e1d89a2d0fb" target="_blank">Andrew CraswellさんのGist</a>
に情報があり、下記の通り何とかSegoe UIをWebフォント化することが出来ました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css:fonts.css" data-lang="css:fonts.css"><span style="color:#75715e">/* Segoe UI */</span>
@<span style="color:#66d9ef">font-face</span> {
  <span style="color:#f92672">font-family</span><span style="color:#f92672">:</span> <span style="color:#f92672">SegoeUI</span><span style="color:#f92672">;</span>
  <span style="color:#f92672">src</span><span style="color:#f92672">:</span>
      <span style="color:#f92672">local</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Segoe UI&#34;</span><span style="color:#f92672">),</span>
      <span style="color:#f92672">url</span><span style="color:#f92672">(//</span><span style="color:#f92672">c</span>.<span style="color:#a6e22e">s-microsoft</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#f92672">static</span><span style="color:#f92672">/</span><span style="color:#f92672">fonts</span><span style="color:#f92672">/</span><span style="color:#f92672">segoe-ui</span><span style="color:#f92672">/</span><span style="color:#f92672">west-european</span><span style="color:#f92672">/</span><span style="color:#f92672">normal</span><span style="color:#f92672">/</span><span style="color:#f92672">latest</span>.<span style="color:#a6e22e">woff2</span><span style="color:#f92672">)</span> <span style="color:#f92672">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;woff2&#34;</span><span style="color:#f92672">),</span>
      <span style="color:#f92672">url</span><span style="color:#f92672">(//</span><span style="color:#f92672">c</span>.<span style="color:#a6e22e">s-microsoft</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#f92672">static</span><span style="color:#f92672">/</span><span style="color:#f92672">fonts</span><span style="color:#f92672">/</span><span style="color:#f92672">segoe-ui</span><span style="color:#f92672">/</span><span style="color:#f92672">west-european</span><span style="color:#f92672">/</span><span style="color:#f92672">normal</span><span style="color:#f92672">/</span><span style="color:#f92672">latest</span>.<span style="color:#a6e22e">woff</span><span style="color:#f92672">)</span> <span style="color:#f92672">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;woff&#34;</span><span style="color:#f92672">),</span>
      <span style="color:#f92672">url</span><span style="color:#f92672">(//</span><span style="color:#f92672">c</span>.<span style="color:#a6e22e">s-microsoft</span>.<span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#f92672">static</span><span style="color:#f92672">/</span><span style="color:#f92672">fonts</span><span style="color:#f92672">/</span><span style="color:#f92672">segoe-ui</span><span style="color:#f92672">/</span><span style="color:#f92672">west-european</span><span style="color:#f92672">/</span><span style="color:#f92672">normal</span><span style="color:#f92672">/</span><span style="color:#f92672">latest</span>.<span style="color:#a6e22e">ttf</span><span style="color:#f92672">)</span> <span style="color:#f92672">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;truetype&#34;</span><span style="color:#f92672">);</span>
  <span style="color:#f92672">font-weight</span><span style="color:#f92672">:</span> <span style="color:#f92672">400</span><span style="color:#f92672">;</span>
}
</code></pre></div><h2 id="共有ボタン設置">共有ボタン設置</h2>
<p>SNS用の共有ボタンも一応付けておこうということで下記の通り用意してみました。</p>
<p>GitHub: <a href="https://github.com/snagimmo/hugo-classic/blob/modified/layouts/partials/share.html" target="_blank">hugo-classic/share.html at modified · snagimmo/hugo-classic</a>
</p>
<p>CSSはこの通りです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css:style.css" data-lang="css:style.css"><span style="color:#75715e">/* Sharing buttons */</span>
.<span style="color:#a6e22e">sharing-buttons</span> {
  <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">inline</span><span style="color:#f92672">-</span><span style="color:#66d9ef">block</span>;
  <span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">-1.5</span><span style="color:#66d9ef">em</span>;
}
.<span style="color:#a6e22e">sharing-buttons-area</span> {
  <span style="color:#66d9ef">float</span>: <span style="color:#66d9ef">left</span>;
  <span style="color:#66d9ef">margin-top</span>: <span style="color:#ae81ff">0</span><span style="color:#66d9ef">em</span>;
  <span style="color:#66d9ef">margin-right</span>: <span style="color:#ae81ff">0.5</span><span style="color:#66d9ef">em</span>;
}
.<span style="color:#a6e22e">sharing-buttons</span> .<span style="color:#a6e22e">inline-svg</span> {
  <span style="color:#66d9ef">float</span>: <span style="color:#66d9ef">left</span>;
  <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">0.1</span><span style="color:#66d9ef">em</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span> <span style="color:#ae81ff">0.1</span><span style="color:#66d9ef">em</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span>;
  <span style="color:#66d9ef">margin-left</span>: <span style="color:#ae81ff">0.9</span><span style="color:#66d9ef">em</span>;
  <span style="color:#66d9ef">margin-right</span>: <span style="color:#ae81ff">0.9</span><span style="color:#66d9ef">em</span>;
  <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#ddd</span>;
  <span style="color:#66d9ef">border-radius</span>: <span style="color:#ae81ff">8</span><span style="color:#66d9ef">px</span>;
  <span style="color:#66d9ef">border-color</span>: <span style="color:#ae81ff">#fff</span>;
}
.<span style="color:#a6e22e">sharing-buttons</span> .<span style="color:#a6e22e">inline-svg</span>:<span style="color:#a6e22e">hover</span> {
  <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#fff</span>;
}
.<span style="color:#a6e22e">sharing-button-twitter</span> .<span style="color:#a6e22e">inline-svg</span>:<span style="color:#a6e22e">hover</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#1d9bf0</span> <span style="color:#75715e">!important</span>;
}
.<span style="color:#a6e22e">sharing-button-facebook</span> .<span style="color:#a6e22e">inline-svg</span>:<span style="color:#a6e22e">hover</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#1778f2</span> <span style="color:#75715e">!important</span>;
}
.<span style="color:#a6e22e">sharing-button-hatena</span> .<span style="color:#a6e22e">inline-svg</span>:<span style="color:#a6e22e">hover</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#00a4de</span> <span style="color:#75715e">!important</span>;
}
.<span style="color:#a6e22e">sharing-button-pocket</span> .<span style="color:#a6e22e">inline-svg</span>:<span style="color:#a6e22e">hover</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#ee4056</span> <span style="color:#75715e">!important</span>;
}
</code></pre></div><p>出来栄えはこんな感じです。</p>
<p>※画像をクリックorタップするとgifアニメが表示されます</p>
<figure class="">
  <div class="img-wrapper">
    <a href="sharing-button.gif" data-lightbox="images" data-title="">
      <img src="resize/sharing-button.jpg" width=""/>
    </a>
  </div>
</figure>
<p>SVGとして各社のロゴを使わせてもらう過程でちょっと調べ物をしたのですが、Twitterのブランドカラーが数年毎に微妙に変化していたりFacebookのブランドロゴが刷新されていたりと個人的に色々と驚きがありました。ボーっとしているとサイトで使っているロゴやカラーがいつの間にか過去のものになっている、という事になりそうです。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://kasu-kasu.ga/post/add-share-button-to-hugo/" target="_blank">Hugoにシェアボタンを追加する-色々な設定の記録たち</a>
</li>
</ul>
<h2>次回へ続く</h2>
<p>今回はHugoテーマカスタマイズの最終回でした。</p>
<p>次回はCircleCI + GitHub Pagesによる自動デプロイを予定しています。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>通常は自動生成された<code>http(s)://DOMAIN/index.html</code> にアクセスすると<code>http(s)://DOMAIN/</code>へ飛ばされます。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>これに関してはRSSフィードの項目でまた触れますが、実は別の設定によりRSSフィード用XMLファイル名も自由に変更出来ます。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

                    ]]>
            </content:encoded>
        </item>
        <item>
            <title>Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3</title>
            <link>https://snagimmo.net/dev/build-website-using-hugo5/</link>
            <pubDate>Thu, 24 Jun 2021 21:23:00 +0900</pubDate>
            <guid>https://snagimmo.net/dev/build-website-using-hugo5/</guid>
            <description>このサイトは Hugoというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。
 第0回: Hugoで個人サイト制作(0) Hugo導入以前 第1回: Hugoで個人サイト制作(1) Hugo導入 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2 第5回(今回) 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開  今回もHugoテーマをカスタマイズしていきます。前回記事まではシンタックスハイライトやSVGファイルなどの見た目を直して来ましたが、今回は機能面の追加をしていきます。
ディレクトリ構成とパーマリンクの設定 これはHugoのようなツールを長期的に使っていく場合に極めて重要になる話です。ファイルとディレクトリの構造は最初に決めておくと後がラクなので、最初にしっかりと考えて...</description>
            <content:encoded>
                    <![CDATA[
                    <p>このサイトは <a href="https://gohugo.io" target="_blank">Hugo</a>
というツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。</p>
<ul>
<li>第0回: <a href="https://snagimmo.net/dev/build-website-using-hugo0/">Hugoで個人サイト制作(0) Hugo導入以前</a>
</li>
<li>第1回: <a href="https://snagimmo.net/dev/build-website-using-hugo1/">Hugoで個人サイト制作(1) Hugo導入</a>
</li>
<li>第2回: <a href="https://snagimmo.net/dev/build-website-using-hugo2/">Hugoで個人サイト制作(2) コンテンツ管理とテンプレート</a>
</li>
<li>第3回: <a href="https://snagimmo.net/dev/build-website-using-hugo3/">Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1</a>
</li>
<li>第4回: <a href="https://snagimmo.net/dev/build-website-using-hugo4/">Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2</a>
</li>
<li><strong>第5回(今回)</strong></li>
<li>第6回: <a href="https://snagimmo.net/dev/build-website-using-hugo6/">Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4</a>
</li>
<li>第7回: <a href="https://snagimmo.net/dev/build-website-using-hugo7/">Hugoで個人サイト制作(7) Hugoサイトの公開</a>
</li>
</ul>
<p>今回もHugoテーマをカスタマイズしていきます。前回記事まではシンタックスハイライトやSVGファイルなどの見た目を直して来ましたが、今回は機能面の追加をしていきます。</p>
<h2 id="ディレクトリ構成とパーマリンクの設定">ディレクトリ構成とパーマリンクの設定</h2>
<p>これはHugoのようなツールを長期的に使っていく場合に極めて重要になる話です。ファイルとディレクトリの構造は最初に決めておくと後がラクなので、最初にしっかりと考えておく必要があると思います。</p>
<h3 id="ローカルディレクトリとurlの関係">ローカルディレクトリとURLの関係</h3>
<p>さて、まずはURLに関してですが、Hugoでも通常の(SSG<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>を使わない)サイトと同様、ローカルディレクトリの構造とURLがほぼそのまま一致します。</p>
<p>例えば<code>ROOT/content/blog/2020/</code>に置いた<code>hoge.md</code>という記事は</p>
<pre><code>http(s)://DOMAIN/blog/2020/hoge/
</code></pre><p>といったURLになります。</p>
<h3 id="パーマリンクについて">パーマリンクについて</h3>
<p>この <strong>パーマリンク(Permalinks)</strong> はユーザ側で変更することが出来ます。詳しくは公式Docsに書いてあります。</p>
<p>公式Docs: <a href="https://gohugo.io/content-management/urls/#permalinks" target="_blank">URL Management #Permalinks | Hugo</a>
</p>
<p>Hugo Classicではテーマデフォルトのパーマリンクが下記のように設定されています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml:config.toml" data-lang="toml:config.toml">[<span style="color:#a6e22e">permalinks</span>]
  <span style="color:#a6e22e">post</span> = <span style="color:#e6db74">&#34;/blog/:year/:month/:day/:slug&#34;</span>
</code></pre></div><p><code>post =</code>から始まる行は <strong>postというディレクトリ(セクション)以下に置かれたコンテンツファイル</strong> に関する設定です。</p>
<p>例えば上記のような設定でローカルに<code>ROOT/content/post/2021/hoge.md</code>というコンテンツを作るとします。更にこの記事の編集された日付がMarkdown内部で<code>1999/01/31</code>に設定されているとします。</p>
<p>この時<code>/blog/:year/:month/:day/:slug</code>という <strong>パーマリンク設定が実ファイルのローカルディレクトリ構造よりも優先</strong> して読み込まれます。</p>
<p>その結果、URLは</p>
<pre><code>http(s)://DOMAIN/blog/1999/01/31/hoge/
</code></pre><p>となります。</p>
<h3 id="slugについて">slugについて</h3>
<p><code>:slug</code>というのは記事タイトルの代わりにURLの一部とする為の文字列のことで、Hugoに限らずよく利用されています。</p>
<p>Hugoでは一応 日本語の <strong>マルチバイト文字も<code>:slug</code>としてURLの一部にする事が可能</strong> です。</p>
<p>また、上記の<code>config.toml</code>の例において<code>:slug</code>だけをパーマリンク設定から削除すると、<code>:year/:month/:day</code>が重複する他の記事と同じURLが生成されてしまいます。その場合のURLは下記のようになります。</p>
<pre><code>http(s)://DOMAIN/blog/1999/01/30/
</code></pre><p>よって、<code>:slug</code>はパーマリンクを設定するなら事実上必須だと言えます。</p>
<p>一方で、パーマリンクの方に<code>:slug</code>はあるもののFrontMatterに<code>:slug</code>を設定していない場合、<strong>記事タイトルが自動でURLとして利用</strong> されることになっています。</p>
<p>パーマリンク設定そのものが存在しない場合は冒頭で説明した通り、ほぼローカルディレクトリの構造通りにURLが生成されます。</p>
<h3 id="ディレクトリ構成を決める">ディレクトリ構成を決める</h3>
<p>自分の場合は下記のようにしました。<a href="https://snagimmo.net/dev/build-website-using-hugo2/">第2回目の記事</a>
でも説明したように、<code>content</code>直下のディレクトリ群はそのままセクション(≒Branch Bundle)として機能します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmd" data-lang="cmd">content
 ├─blog
 ├─dev
 ├─draft
 └─fontawesome
</code></pre></div><h3 id="パーマリンクを設定">パーマリンクを設定</h3>
<p>私は下記のように設定しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml:config.toml" data-lang="toml:config.toml">[<span style="color:#a6e22e">permalinks</span>]
  <span style="color:#a6e22e">blog</span> = <span style="color:#e6db74">&#34;/:section/:year/:month/:slug/&#34;</span>
  <span style="color:#a6e22e">dev</span> = <span style="color:#e6db74">&#34;/:section/:slug/&#34;</span>
  <span style="color:#a6e22e">draft</span> = <span style="color:#e6db74">&#34;/:section/:year/:month/:slug/&#34;</span>
</code></pre></div><p>他のサイトの設定例も幾つか見ましたが、下記のパターンが多かったです。</p>
<ul>
<li><code>/blog/:year/:month/:day/:slug/</code></li>
<li><code>/posts/:section/:slug/</code></li>
<li><code>/posts/:slug/</code></li>
<li><code>/post/:slug/</code></li>
</ul>
<h2 id="サブセクションをカテゴリ化">サブセクションをカテゴリ化</h2>
<h3 id="エイリアスaliasesについて">エイリアス(Aliases)について</h3>
<p>パーマリンクを設定した状態でも、各Markdown内のFront Matterに <strong>エイリアス(Aliases)</strong> を設定すれば自由にURLを設定する事も可能です。</p>
<p>公式Docs: <a href="https://gohugo.io/content-management/urls/#aliases" target="_blank">URL Management #Aliases | Hugo</a>
</p>
<p>私はこれを利用し、サブセクション(<code>ROOT/content/dev/website/</code>)のページURL</p>
<pre><code>http(s)://DOMAIN/dev/website/
</code></pre><p>からHugoが自動生成したカテゴリーページ</p>
<pre><code>http(s)://DOMAIN/categories/website/
</code></pre><p>に自動遷移するように設定しました。</p>
<h3 id="エイリアスを利用した自動遷移">エイリアスを利用した自動遷移</h3>
<p>実例を載せておきます。<code>ROOT/content/dev/website/_index.md</code>のFrontMatterに下記のようなエイリアスを設定することでカテゴリーページへの遷移が可能になります(他に良いやり方があるかも知れませんが現時点ではこうしています)。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml:_index.md" data-lang="yaml:_index.md">---
title: &#39;website&#39;
url: /categories/website/
aliases:
    <span style="color:#66d9ef">-</span> /dev/website/
    <span style="color:#66d9ef">-</span> /categories/website/
# 省略
---
</code></pre></div><h3 id="自動遷移の注意点">自動遷移の注意点</h3>
<p>当初詰まったのは、<code>url</code>にカテゴリーページへのリンクを設定する必要がある事です。
これが無いと <strong>遷移が機能しません</strong> ので注意して下さい。</p>
<p><code>aliases</code>の設定だけで<code>url</code>の設定が無いと、遷移が発生せずカテゴリーページとサブセクションページが別々に存在する状態になります。</p>
<p>逆に<code>url</code>の設定だけで<code>aliases</code>が無いと、サブセクションページが404になり、カテゴリーページだけ存在する状態になります。</p>
<p>この <strong>両方が揃った時のみ遷移が機能</strong> します。</p>
<p>試しにこちらの<a href="https://snagimmo.net/dev/website/" target="_blank">リンク</a>
を踏めばお分かり頂けると思います。 https://snagimmo.net/dev/website/ から https://snagimmo.net/categories/website/ へ自動で遷移するはずです。</p>
<h3 id="自動遷移させたかった理由">自動遷移させたかった理由</h3>
<p>何故このような設定が必要だったかと言うと、<code>ROOT/content</code>以下の全てのMarkdownファイルとディレクトリ構造をチェックして各セクション・サブセクションへのリンクを含んだ<code>ROOT/content/_index.md</code>を自動生成するスクリプト<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>を手元で書いていたのですが、</p>
<p>このスクリプトによって自動生成された <strong>相対パス</strong> がローカルディレクトリをそのまま追従した <strong>サブセクションへのリンク</strong> となってしまい、カテゴリーページとの論理的重複が発生した為です。</p>
<p>ローカルでのディレクトリ構成は出来るだけHugoのセクション・サブセクションと連動させてシンプルにしておきつつ、それでいて各ディレクトリをサブセクションとして機能させるのもカテゴリーとして機能させるのも自由に選択したいと考えていた為、このような手段を採用しました。</p>
<h2 id="frontmatterにあれこれ追加">FrontMatterにあれこれ追加</h2>
<p>各記事の <strong>FrontMatter</strong> は前述のパーマリンク設定も含めて色々融通が利くので便利です。</p>
<p>例えばデフォルトでは</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml:hoge.md" data-lang="yaml:hoge.md">draft: true
</code></pre></div><p>といった項目が用意されており、この設定によってHugo側が「下書き記事」と見なしてビルドしないでスルーしてくれる訳ですが、これ以外にもユーザが自由に値を追加してHugo側の挙動を変える事が出来ます。</p>
<p>私は下記のような値を追加しました。詳しくはそれぞれ後述の項目で触れます。</p>
<ul>
<li><code>toc</code>: 記事にTOC(目次)を表示するか否か</li>
<li><code>math</code>: 記事内でTeX表記をするか否か</li>
<li><code>private</code>: 記事をサイト内の検索候補に入れるか否か</li>
<li><code>rss_ignore</code>: 記事をRSSフィードに載せるか否か</li>
<li><code>share</code>: ページ内に共有ボタンを表示するか否か</li>
<li><code>pagelink</code>: ページ内に前後ページへのリンクを表示するか否か</li>
</ul>
<h2 id="texを使えるようにmathjaxを導入">TeXを使えるようにMathJaxを導入</h2>
<p>文中で数式を扱う際に最も困るのが「分数表記」だと個人的には思っています。</p>
<p>ちょっとした確率や微積などの基本的な分野でさえ、分数表記が出来ないだけで括弧記号などの入れ子が多発して物凄く見辛くなってしまいます。頻繁には書かないかも知れませんが、やはり一応機能としては持たせておきたいなと思ったので対応する事にしました。</p>
<p>さて、Hugo ClassicのexampleSiteではデフォルトで一応 <strong>TeX</strong><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> 表記が行われているのですが、テーマを弄る内にTeX表記が崩れ無効化されてしまっていました。</p>
<p>そこであれこれ探した結果、<strong>MathJax</strong> と呼ばれるスクリプトを導入する事にしました。自分が探した範囲内では、下の参考記事にある中国の方の記事が最も参考になりました。日本語の記事も幾つかあったのですが、そちらは情報が少し古く2020年以降のMathJaxのバージョンアップに非対応でした。</p>
<p>早速、当該記事を参考に下記のPartial Templateを作成しました。CDN経由なのでローカルへの保存は不要です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:mathjax.html" data-lang="html:mathjax.html">{{ if .Params.math }}
&lt;<span style="color:#f92672">script</span>&gt;
  <span style="color:#a6e22e">MathJax</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">tex</span><span style="color:#f92672">:</span> {
      <span style="color:#a6e22e">inlineMath</span><span style="color:#f92672">:</span> [[<span style="color:#e6db74">&#34;$&#34;</span>, <span style="color:#e6db74">&#34;$&#34;</span>]],
    },
    <span style="color:#a6e22e">displayMath</span><span style="color:#f92672">:</span> [
      [<span style="color:#e6db74">&#34;$$&#34;</span>, <span style="color:#e6db74">&#34;$$&#34;</span>],
      [<span style="color:#e6db74">&#34;\[\[&#34;</span>, <span style="color:#e6db74">&#34;\]\]&#34;</span>],
    ],
    <span style="color:#a6e22e">svg</span><span style="color:#f92672">:</span> {
      <span style="color:#a6e22e">fontCache</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;global&#34;</span>,
    },
  };
&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://polyfill.io/v3/polyfill.min.js?features=es6&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span>
  <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;MathJax-script&#34;</span>
  <span style="color:#a6e22e">async</span>
  <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&#34;</span>
&gt;&lt;/<span style="color:#f92672">script</span>&gt;
{{ end }}
</code></pre></div><p>これを<code>ROOT/layouts/partials/mathjax.html</code>として保存すれば、各Markdown内のFrontMatterに追加した<code>math: true</code> (<a href="https://snagimmo.net/dev/build-website-using-hugo5/#frontmatterにあれこれ追加">ここ</a>
で前述) の設定によって記事内のTeX表記が実現出来ます。</p>
<p>使い方は下記の通り通常の(?)TeX記法でOKです。とりあえず信号処理で必須の複素フーリエ係数を載せてみました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-md:hoge.md" data-lang="md:hoge.md">$$
C_k = \langle f(t), e^{jkt} \rangle = \frac{1}{2\pi} \int_{-\pi}^{\pi} f(t)e^{-jkt} dt
$$
</code></pre></div><p>$$
C_k = \langle f(t), e^{jkt} \rangle = \frac{1}{2\pi} \int_{-\pi}^{\pi} f(t)e^{-jkt} dt
$$</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://note.qidong.name/2018/03/hugo-mathjax/" target="_blank">在Hugo中使用MathJax · 零壹軒·笔记</a>
</li>
</ul>
<h2>次回へ続く</h2>
<p>今回はHugoテーマカスタマイズの3回目でした。</p>
<p>次回はテーマカスタマイズ最終回(全文検索・OGP・フォント変更など)を予定しています。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>SSG = 静的サイトジェネレータ(Static Site Generator)&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>この自作スクリプトを実行するだけで特定階層のサブセクション内にある<code>_index.md</code>にカテゴリーへのエイリアスが自動設定されるようにしています&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>TeXとは数式などを簡易表示する組版処理システムのこと(詳細: <a href="https://www.juen.ac.jp/math/nakagawa/texguide.html#tex" target="_blank">TeX入門</a>
)&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

                    ]]>
            </content:encoded>
        </item>
        <item>
            <title>Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2</title>
            <link>https://snagimmo.net/dev/build-website-using-hugo4/</link>
            <pubDate>Wed, 23 Jun 2021 23:57:20 +0900</pubDate>
            <guid>https://snagimmo.net/dev/build-website-using-hugo4/</guid>
            <description>このサイトは Hugoというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。
 第0回: Hugoで個人サイト制作(0) Hugo導入以前 第1回: Hugoで個人サイト制作(1) Hugo導入 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1 第4回(今回) 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開  今回もHugoテーマをカスタマイズしていきます。前回記事ではシンタックスハイライトを直した程度で終わりましたが今回はもう少し細かいところの話です。
FontAwesomeでSVG表示 ヘッダやフッタ周りのデザイン変更が一段落したので、次に画像ファイルとしてSVGを表示出来る FontAwesome を使いたいなと思いました。
FontAwesomeのGitHub: F...</description>
            <content:encoded>
                    <![CDATA[
                    <p>このサイトは <a href="https://gohugo.io" target="_blank">Hugo</a>
というツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。</p>
<ul>
<li>第0回: <a href="https://snagimmo.net/dev/build-website-using-hugo0/">Hugoで個人サイト制作(0) Hugo導入以前</a>
</li>
<li>第1回: <a href="https://snagimmo.net/dev/build-website-using-hugo1/">Hugoで個人サイト制作(1) Hugo導入</a>
</li>
<li>第2回: <a href="https://snagimmo.net/dev/build-website-using-hugo2/">Hugoで個人サイト制作(2) コンテンツ管理とテンプレート</a>
</li>
<li>第3回: <a href="https://snagimmo.net/dev/build-website-using-hugo3/">Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1</a>
</li>
<li><strong>第4回(今回)</strong></li>
<li>第5回: <a href="https://snagimmo.net/dev/build-website-using-hugo5/">Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3</a>
</li>
<li>第6回: <a href="https://snagimmo.net/dev/build-website-using-hugo6/">Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4</a>
</li>
<li>第7回: <a href="https://snagimmo.net/dev/build-website-using-hugo7/">Hugoで個人サイト制作(7) Hugoサイトの公開</a>
</li>
</ul>
<p>今回もHugoテーマをカスタマイズしていきます。前回記事ではシンタックスハイライトを直した程度で終わりましたが今回はもう少し細かいところの話です。</p>
<h2 id="fontawesomeでsvg表示">FontAwesomeでSVG表示</h2>
<p>ヘッダやフッタ周りのデザイン変更が一段落したので、次に画像ファイルとしてSVGを表示出来る <strong>FontAwesome</strong> を使いたいなと思いました。</p>
<p>FontAwesomeのGitHub: <a href="https://github.com/FortAwesome/Font-Awesome" target="_blank">FortAwesome/Font-Awesome: The iconic SVG, font, and CSS toolkit</a>
</p>
<p>調べてみると、どうやらHugo用にFontAwesomeのPartial Template<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>を作成することで簡単にテンプレート内からSVGの埋め込みタグを挿入できる事が分かりました。</p>
<ol>
<li>ローカルにSVGファイルを用意</li>
<li>それを呼び出す為のFontAwesome用Partial Templateを作成</li>
<li><code>layouts/</code>以下のテンプレート内から2.のPartial Templateを呼び出し</li>
</ol>
<p>以上でSVGが簡単に表示出来るわけです。</p>
<h3 id="svgのrawデータdl用スクリプトの作成">SVGのRAWデータDL用スクリプトの作成</h3>
<p>最初にまずFontAwesomeのRAWデータをダウンロードするスクリプトを書きました。</p>
<p>ダウンロードしたいSVGファイル名をそれぞれ<code>brands</code>, <code>regular</code>, <code>solid</code>の各種ページを参考に予め<code>icons_*</code>という変数群に文字列として格納しておく必要があります。</p>
<p>SVGファイル一覧: <a href="https://github.com/FortAwesome/Font-Awesome/tree/master/svgs" target="_blank">https://github.com/FortAwesome/Font-Awesome/tree/master/svgs</a>
</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell:svg_dl.sh" data-lang="shell:svg_dl.sh"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>set -ex

icons_b<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;facebook get-pocket github soundcloud twitter&#34;</span>
icons_r<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;calendar clipboard&#34;</span>
icons_s<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;arrow-circle-left arrow-circle-right folder search tag clock rss share-alt&#34;</span>

url_b<span style="color:#f92672">=</span>https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/svgs/brands
url_r<span style="color:#f92672">=</span>https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/svgs/regular
url_s<span style="color:#f92672">=</span>https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/svgs/solid

dest<span style="color:#f92672">=</span>../content/fontawesome
mkdir -p <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>dest<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
cd <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>dest<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>

<span style="color:#66d9ef">for</span> icon in $icons_b; <span style="color:#66d9ef">do</span>
  curl -O <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>url_b<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>icon<span style="color:#e6db74">}</span><span style="color:#e6db74">.svg&#34;</span>
<span style="color:#66d9ef">done</span>
<span style="color:#66d9ef">for</span> icon in $icons_r; <span style="color:#66d9ef">do</span>
  curl -O <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>url_r<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>icon<span style="color:#e6db74">}</span><span style="color:#e6db74">.svg&#34;</span>
<span style="color:#66d9ef">done</span>
<span style="color:#66d9ef">for</span> icon in $icons_s; <span style="color:#66d9ef">do</span>
  curl -O <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>url_s<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>icon<span style="color:#e6db74">}</span><span style="color:#e6db74">.svg&#34;</span>
<span style="color:#66d9ef">done</span>
</code></pre></div><p>スクリプトの置き場所が<code>ROOT/bin/</code>直下なので途中にある<code>dest</code>(ダウンロード先)のパスも<code>../content/fontawesome</code>になっています。もし利用される場合、ここは各自のディレクトリ構造に合わせて下さい。</p>
<h3 id="テンプレートの復習">テンプレートの復習</h3>
<p>第2回目でも紹介したように、自作したHugoテンプレートを呼び出したい場合は <strong>どこから呼び出すか</strong> によってテンプレートの種類を変える必要があります。</p>
<p>公式Docs: <a href="https://gohugo.io/content-management/shortcodes/#use-shortcodes" target="_blank">Shortcodes | Hugo</a>
</p>
<p><strong>他のテンプレート</strong> (e.g. <code>layouts/_default/single.html</code>, <code>layouts/partials/header.html</code>) から呼び出したい時は <strong>Partial Template</strong> として作成し、下記の形で呼び出します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ partial &#34;TEMPLATE_NAME&#34; &#34;ARGS&#34; }}
</code></pre></div><p><strong>記事</strong> (e.g. <code>content/hoge/fuga.md</code>, <code>content/blog/2021/test.md</code>) から呼び出したい時は <strong>Shortcode</strong> として作成し、下記の形で呼び出します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-md" data-lang="md">{{&lt; <span style="color:#f92672">TEMPLATE_NAME</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#a6e22e">ARGS</span><span style="color:#960050;background-color:#1e0010">&#34;</span> &gt;}}ここの文字列はMarkdownとして解釈されない{{&lt; /<span style="color:#f92672">TEMPLATE_NAME</span> &gt;}}
{{% TEMPLATE_NAME &#34;ARGS&#34; %}}ここの文字列はMarkdownとして解釈される{{% /TEMPLATE_NAME %}}
</code></pre></div><p>この際、区切り文字(delimiter)に<code>&lt;</code>を使うか<code>%</code>を使うかで挙動が変わります。Shortcode内部でHTMLタグなど使いたい場合には<code>&lt;</code>を用いる事でMarkdown用のレンダラーが正しくHTMLタグを読み取れるようになるようです。</p>
<h3 id="partial-templateの作成">Partial Templateの作成</h3>
<p>実は参考記事のリンク先にもあるようにFontAwesome用のShortcodeを作成することも出来るのですが、今回はテンプレート内部でSVGを表示したいので、FontAwesome用のPartial Templateを作成します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:fontawesome.html" data-lang="html:fontawesome.html">&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;inline-svg&#34;</span>&gt;
{{- $fname:=print &#34;fontawesome/&#34; . &#34;.svg&#34; -}}
{{- $path:=&#34;&lt;<span style="color:#f92672">path</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#a6e22e">-</span><span style="color:#960050;background-color:#1e0010">}}</span>
<span style="color:#960050;background-color:#1e0010">{{</span><span style="color:#a6e22e">-</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">fill:</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;path fill=\&#34;</span><span style="color:#a6e22e">currentColor</span><span style="color:#960050;background-color:#1e0010">\&#34;&#34;</span> <span style="color:#a6e22e">-</span><span style="color:#960050;background-color:#1e0010">}}</span>
<span style="color:#960050;background-color:#1e0010">{{</span> <span style="color:#a6e22e">replace</span> <span style="color:#960050;background-color:#1e0010">(</span><span style="color:#a6e22e">readFile</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">fname</span><span style="color:#960050;background-color:#1e0010">)</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">path</span> <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">fill</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#a6e22e">safeHTML</span> <span style="color:#960050;background-color:#1e0010">}}</span>
<span style="color:#960050;background-color:#1e0010">&lt;/</span><span style="color:#a6e22e">span</span>&gt;
</code></pre></div><p>記法や文法などは省略しますが、これを<code>ROOT/layouts/partials/fontawesome.html</code>として配置すれば使えるようになります。</p>
<p>上記にある<code>{{}}</code>内部のハイフン<code>-</code>はそれぞれ直前・直後の空白文字を削除する為のもので、HTMLのDOM構造を改行・空白なしで保つためのものです(削除しなくても大抵機能します)。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://exlair.net/hugo-what-does-the-dash-mean/" target="_blank">Hugo テンプレートをカスタマイズする前に知っておきたいハイフン“-”の意味 | exlair.net</a>
</li>
</ul>
<h3 id="テンプレート内からsvgを呼び出す">テンプレート内からSVGを呼び出す</h3>
<p>例えばローカルの<code>ROOT/content/fontawesome/clock.svg</code>を下記のように<code>ROOT/layouts/partials/header.html</code>から呼び出す事が出来ます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:header.html" data-lang="html:header.html">{{ partial &#34;fontawesome.html&#34; &#34;clock&#34; }}
</code></pre></div><p>改造したHugo Classic(テーマ)の実例を載せておきますが、ヘッダ部分では下記のように <strong>変数</strong> としてFontAwesome用のファイル名を渡しています。この<code>head_custom.html</code>を<code>header.html</code>から読み込んでいます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:head_custom.html" data-lang="html:head_custom.html">&lt;<span style="color:#f92672">header</span>&gt;
  &lt;<span style="color:#f92672">nav</span>&gt;
    &lt;<span style="color:#f92672">ul</span>&gt;
      {{ $title := lower .Title }}
      {{ $section := lower .Section }}
      <span style="color:#75715e">&lt;!-- 省略 --&gt;</span>
      {{ range .Site.Menus.main }}
      {{ $name := lower .Name }}
      &lt;<span style="color:#f92672">li</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;pull-left {{ if eq $name $title }}current{{ else if eq $section $name }}current{{ else if eq $title (pluralize $name) }}current{{ end }}&#34;</span>&gt;
        {{ if eq $name $title }}&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;current-header&#34;</span>&gt;{{ partial &#34;fontawesome.html&#34; $name }}&lt;/<span style="color:#f92672">span</span>&gt;{{ else }}&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .URL }}&#34;</span>&gt;{{ partial &#34;fontawesome.html&#34; $name }}&lt;/<span style="color:#f92672">a</span>&gt;{{ end }}
      &lt;/<span style="color:#f92672">li</span>&gt;
      {{end}}
      <span style="color:#75715e">&lt;!-- 省略 --&gt;</span>
    &lt;/<span style="color:#f92672">ul</span>&gt;
  &lt;/<span style="color:#f92672">nav</span>&gt;
&lt;/<span style="color:#f92672">header</span>&gt;
</code></pre></div><p>上記の例で言うと、変数名で渡しているのは</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:head_custom.html" data-lang="html:head_custom.html">{{ partial &#34;fontawesome.html&#34; $name }}
</code></pre></div><p>の部分です。慣れればすぐに読めると思いますが、</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:head_custom.html" data-lang="html:head_custom.html">{{ range .Site.Menus.main }}
</code></pre></div><p>の行からはじまる<code>range</code>ブロック内部で<code>.Name</code>を取得し、そのそれぞれを<code>lower</code>関数で小文字化することでタイトル・セクション・タクソノミーの相互一致判定を行っています。そして、その結果を<code>$name</code>変数に格納し、FontAwesomeに渡しているという流れです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:head_custom.html" data-lang="html:head_custom.html">{{ $name := lower .Name }}
</code></pre></div><h3 id="hugo-classic--fontawesomeの注意点">Hugo Classic + FontAwesomeの注意点</h3>
<p>なお、Hugo Classicでは下記のように<code>config.toml</code>で設定しているタクソノミーの各種ページ名とURLが <strong>複数形(plural)</strong> になっています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml:config.toml" data-lang="toml:config.toml">[[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
  <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;Categories&#34;</span>
  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;/categories/&#34;</span>
  <span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">1</span>
[[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
  <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;Tags&#34;</span>
  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;/tags/&#34;</span>
  <span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">2</span>
</code></pre></div><p>これに合わせ、FontAwesomeのSVGファイル名も次のようにリネームして読み込んでいます。</p>
<ul>
<li><code>folder.svg</code>から<code>categories.svg</code>へリネーム</li>
<li><code>tag.svg</code>から<code>tags.svg</code>へリネーム</li>
</ul>
<p>FontAwesomeデフォルトのファイル名をリネームしないと、テンプレートから渡される<code>$name</code>が<code>tags</code>なのに実ファイル名が<code>tag.svg</code>のままで読み込まれないという訳です。</p>
<p>TOMLの方を書き変えるかSVGファイル名を変えるかは人それぞれでしょうが、一応書いておきます。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://www.client9.com/using-font-awesome-icons-in-hugo/" target="_blank">Using Font Awesome Icons in Hugo | Nick Galbreath</a>
</li>
<li><a href="https://solareenlo.com/docs/hugo/" target="_blank">Hugo | solareenlo</a>
</li>
</ul>
<h2 id="各種shortcodeの追加">各種Shortcodeの追加</h2>
<p>上で書いたFontAwesome以外にも幾つか役立ちそうなShortcodeなどを追加してみました。</p>
<ul>
<li><code>private.html</code>: Hugo側でプレビュー状態の時のみ表示するコメントブロックを挿入</li>
<li><code>colored.html</code>: Markdownの文中で背景色と文字色を部分的に変更</li>
<li><code>image.html</code>: Markdown内に画像を貼り付ける(Lightbox2を利用)</li>
<li><code>steam.html</code>: Steamのストアページへのリンクを自動でいい感じにしてくれる</li>
</ul>
<h3 id="privatehtmlについて">private.htmlについて</h3>
<p>下記のようなShortcodeを作成し, ローカル環境のサーバ上でのみ表示したいテキストを囲むと色々と捗ります。
例えばまだ公開したくない記事の一部などをそのままprivateな状態でHugoにビルドしてもらう、といった事も可能です。</p>
<p>ファイルは<code>ROOT/layouts/shortcodes/private.html</code>として作成しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:private.html" data-lang="html:private.html">{{ if .Site.IsServer }}
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;private&#34;</span>&gt;{{ .Inner }}&lt;/<span style="color:#f92672">div</span>&gt;
{{ end }}
</code></pre></div><p>これに合わせてCSSも設定しておきました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css:style.css" data-lang="css:style.css">.<span style="color:#a6e22e">private</span> {
  <span style="color:#66d9ef">background</span>: <span style="color:#ae81ff">#2e2222</span>;
  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#f11</span>;
  <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">0.5</span><span style="color:#66d9ef">em</span>;
  <span style="color:#66d9ef">border</span>: <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">#f11</span>;
}
.<span style="color:#a6e22e">private</span>::<span style="color:#a6e22e">before</span> {
  <span style="color:#66d9ef">content</span>: <span style="color:#e6db74">&#34;------Private------&#34;</span>;
  <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">block</span>;
  <span style="color:#66d9ef">font-weight</span>: <span style="color:#66d9ef">bolder</span>;
}
</code></pre></div><p>使い方は下記の通りです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-md:hoge.md" data-lang="md:hoge.md">{{&lt; <span style="color:#f92672">private</span> &gt;}}
これは非公開なメモ
{{&lt; /<span style="color:#f92672">private</span> &gt;}}

これは公開されるメモ
</code></pre></div><p>例えば上のように書くと、このような表示になります。</p>
<figure class="">
  <div class="img-wrapper">
    <a href="private_memo.png" data-lightbox="images" data-title="">
      <img src="resize/private_memo.png" width=""/>
    </a>
  </div>
</figure>
<h4>参考記事</h4>
<ul>
<li><a href="https://maku77.github.io/hugo/shortcode/private.html" target="_blank">ローカルサーバで動作させているとき（開発時）のみ内容を出力する private ショートコードを作成する | まくまくHugo/Goノート</a>
</li>
</ul>
<h3 id="coloredhtmlについて">colored.htmlについて</h3>
<p>これは自作しました。文中で自由に背景色と文字色を変える為の簡単な1行Shortcodeです(シンタックスハイライトがちょっと崩れてて見にくいですが)。</p>
<p>これも勿論<code>ROOT/layouts/shortcodes</code>に置いて使います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:colored.html" data-lang="html:colored.html">&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;colored&#34;</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;background:{{ .Get &#34;</span><span style="color:#a6e22e">bg</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}};</span><span style="color:#a6e22e">color:</span><span style="color:#960050;background-color:#1e0010">{{</span> <span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">Get</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#a6e22e">color</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}};&#34;</span>&gt;{{- .Inner -}}&lt;/<span style="color:#f92672">span</span>&gt;
</code></pre></div><p>例えばMarkdown中ではこのように使います。こうして複数の引数を渡す事も出来るのでShortcodeは慣れてしまえば便利です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-md:hoge.md" data-lang="md:hoge.md">{{&lt; <span style="color:#f92672">colored</span> <span style="color:#a6e22e">bg</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#00f&#34;</span> <span style="color:#a6e22e">color</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#fff&#34;</span> &gt;}}青{{&lt; /<span style="color:#f92672">colored</span> &gt;}}
{{&lt; <span style="color:#f92672">colored</span> <span style="color:#a6e22e">bg</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#fff&#34;</span> <span style="color:#a6e22e">color</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#000&#34;</span> &gt;}}白{{&lt; /<span style="color:#f92672">colored</span> &gt;}}
</code></pre></div><p><span class="colored" style="background:#00f;color:#fff;">青</span>

<span class="colored" style="background:#fff;color:#000;">白</span>
</p>
<h3 id="imagehtmlについて">image.htmlについて</h3>
<p>これも自作です。サムネイルを表示し、サムネイルがクリックあるいはタップされると元画像が拡大表示されます。<strong>Lightbox2</strong> を利用していますが有名なのでLightbox2の説明は省略します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:image.html" data-lang="html:image.html">&lt;<span style="color:#f92672">figure</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .Get &#34;</span><span style="color:#a6e22e">class</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;img-wrapper&#34;</span>&gt;
    &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .Get &#34;</span><span style="color:#a6e22e">link</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span> <span style="color:#a6e22e">data-lightbox</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .Get &#34;</span><span style="color:#a6e22e">data-lightbox</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span> <span style="color:#a6e22e">data-title</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .Get &#34;</span><span style="color:#a6e22e">data-title</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span>&gt;
      &lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .Get &#34;</span><span style="color:#a6e22e">src</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .Get &#34;</span><span style="color:#a6e22e">width</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span>/&gt;
    &lt;/<span style="color:#f92672">a</span>&gt;
  &lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">figure</span>&gt;
</code></pre></div><p>Markdown中ではこのように使います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-md:hoge.md" data-lang="md:hoge.md">{{% image src=&#34;resize/thumbnail.png&#34; link=&#34;gazou.png&#34; class=&#34;&#34; data-lightbox=&#34;images&#34; data-title=&#34;caption&#34; %}}
</code></pre></div><p><code>src</code>でサムネイルの場所を指定、<code>link</code>で大きいサイズの画像を指定します。パスはそれぞれPage Resourcesの仕様に則っているので記事ファイル(<code>.md</code>)と同じ階層からの相対パスです。</p>
<p><code>class</code>の有無を問わず機能するので、CSSなどで何か表示を変えたい時だけ<code>class=&quot;fuga&quot;</code>などと指定すればOKです。</p>
<h3 id="steamhtmlについて">steam.htmlについて</h3>
<p>Steamのウィジェットを表示するShortcodeです。</p>
<p>TwitterやYouTubeなどはHugo側にデフォルトで用意されているのですがSteamは無かったので用意しました(参考記事のものをそのまま利用)。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:steam.html" data-lang="html:steam.html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;embed steam-link&#34;</span>&gt;
  &lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;steam-link&#34;</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://store.steampowered.com/widget/{{ index .Params 0 }}/&#34;</span> <span style="color:#a6e22e">frameborder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span>&gt;&lt;/<span style="color:#f92672">iframe</span>&gt;&lt;/<span style="color:#f92672">iframe</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><p>CSSも弄っておきました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css:style.css" data-lang="css:style.css">.<span style="color:#a6e22e">steam-link</span> {
  <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">450</span><span style="color:#66d9ef">px</span>;
  <span style="color:#66d9ef">height</span>: <span style="color:#ae81ff">200</span><span style="color:#66d9ef">px</span>;
  <span style="color:#66d9ef">max-width</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
}
</code></pre></div><p>Markdownの中ではこう使います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-md:hoge.md" data-lang="md:hoge.md">{{&lt; <span style="color:#f92672">steam</span> <span style="color:#a6e22e">814380</span> &gt;}}
</code></pre></div><p>実際に使うとこんな感じになります。</p>
<div class="embedded steam-link">
    <iframe class="steam-link" src="https://store.steampowered.com/widget/814380/" frameborder="0"></iframe>
</div>

<h4>参考記事</h4>
<ul>
<li><a href="https://foresuke.com/post/hugo_embed/" target="_blank">Hugoの記事にコンテンツを埋め込む – ふぉれすけ広場</a>
</li>
</ul>
<h2 id="toc目次を追加">TOC(目次)を追加</h2>
<p>サイトを作って記事を幾つか書いてみたところ、テキスト量の多い記事が増えてきたので目次を追加してみました。</p>
<p>正直無くても良いかなと思っていたのですが特にそんな事はなかったですね。あった方が良いです。</p>
<p>下記Hugo公式Docsにもあるように、元々 <strong>TOC(Table of Contents)</strong> はHugo側の機能としてデフォルトで存在しているため、ユーザーは <strong>機能を呼び出すだけで利用可能</strong> です。</p>
<p>公式Docs: <a href="https://gohugo.io/content-management/toc/#readout" target="_blank">Table of Contents | Hugo</a>
</p>
<p>これを利用すれば、見出し行を<code>## 見出し2</code>や<code>### 見出し3</code>のようにMarkdown中に記述するだけで自動でHugoがTOCを出力してくれます。</p>
<p>各記事の中に目次を追加したかったので、記事用テンプレートの<code>ROOT/layouts/_default/single.html</code>を下記のように編集しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:single.html" data-lang="html:single.html"><span style="color:#75715e">&lt;!-- 省略 --&gt;</span>
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content-wrapper&#34;</span>&gt;
  {{- if .Params.toc }}
      {{- with .TableOfContents }}
      &lt;<span style="color:#f92672">aside</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;xToc&#34;</span>&gt;
          &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;xToc_title&#34;</span>&gt;目次&lt;/<span style="color:#f92672">div</span>&gt;
          {{ . }}
      &lt;/<span style="color:#f92672">aside</span>&gt;
      {{- end }}
  {{- end }}
  &lt;<span style="color:#f92672">main</span>&gt;
    {{ with .Content }}{{ . }}{{ else }}This content is empty. {{ end }}
  &lt;/<span style="color:#f92672">main</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
<span style="color:#75715e">&lt;!-- 省略 --&gt;</span>
</code></pre></div><p>実を言うと、</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:single.html" data-lang="html:single.html">{{ .TableOfContents }}
</code></pre></div><p>この1行だけでもTOCは呼び出せます。しかし各記事のFrontMatter内で<code>toc: true</code>を設定した場合のみ目次が表示されるように</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:single.html" data-lang="html:single.html">{{- if .Params.toc }}
</code></pre></div><p>という行で条件分岐をしています。</p>
<p>また、CSSに関しては次のように設定しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css:style.css" data-lang="css:style.css">.<span style="color:#a6e22e">xToc</span> {
  <span style="color:#66d9ef">background</span>: <span style="color:#ae81ff">#282C34</span>;
  <span style="color:#66d9ef">border</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#D0AF4C</span>;
  <span style="color:#66d9ef">border-radius</span>: <span style="color:#ae81ff">.3</span><span style="color:#66d9ef">em</span>;
  <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">1.2</span><span style="color:#66d9ef">em</span> <span style="color:#ae81ff">1.5</span><span style="color:#66d9ef">em</span> <span style="color:#ae81ff">.8</span><span style="color:#66d9ef">em</span> <span style="color:#ae81ff">1.5</span><span style="color:#66d9ef">em</span>;
  <span style="color:#66d9ef">line-height</span>: <span style="color:#ae81ff">1.7</span><span style="color:#66d9ef">em</span>;
  <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">70</span><span style="color:#66d9ef">%</span>;
  <span style="color:#66d9ef">margin</span>: <span style="color:#66d9ef">auto</span>;
  <span style="color:#66d9ef">font-size</span>: <span style="color:#ae81ff">1.1</span><span style="color:#66d9ef">em</span>;
}
.<span style="color:#a6e22e">xToc_title</span> {
  <span style="color:#66d9ef">font-size</span>: <span style="color:#ae81ff">1.2</span><span style="color:#66d9ef">em</span>;
  <span style="color:#66d9ef">font-weight</span>: <span style="color:#66d9ef">bolder</span>;
}
.<span style="color:#a6e22e">xToc</span> <span style="color:#f92672">ul</span> {
  <span style="color:#66d9ef">list-style-type</span>: <span style="color:#66d9ef">none</span>;
  <span style="color:#66d9ef">padding-left</span>: <span style="color:#ae81ff">0.8</span><span style="color:#66d9ef">em</span>;
}
.<span style="color:#a6e22e">xToc</span> <span style="color:#f92672">li</span> {
  <span style="color:#66d9ef">padding-top</span>: <span style="color:#ae81ff">0</span> <span style="color:#75715e">!important</span>;
}
.<span style="color:#a6e22e">xToc</span> <span style="color:#f92672">li</span>:<span style="color:#a6e22e">hover</span> {
  <span style="color:#66d9ef">border-left</span>: <span style="color:#ae81ff">.3</span><span style="color:#66d9ef">em</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#D0AF4C</span>;
  <span style="color:#66d9ef">margin-left</span>: <span style="color:#ae81ff">-.3</span><span style="color:#66d9ef">em</span>;
}
.<span style="color:#a6e22e">xToc</span> <span style="color:#f92672">li</span> <span style="color:#f92672">&gt;</span> <span style="color:#f92672">ul</span> {
  <span style="color:#66d9ef">padding-left</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span>;
  <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
}
.<span style="color:#a6e22e">xToc</span> <span style="color:#f92672">a</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#c0c0c0</span> <span style="color:#75715e">!important</span>;
  <span style="color:#66d9ef">font-weight</span>: <span style="color:#66d9ef">normal</span>;
  <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">block</span>;
  <span style="color:#66d9ef">border-bottom</span>: <span style="color:#66d9ef">dashed</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">#999</span>;
  <span style="color:#66d9ef">margin-left</span>: <span style="color:#ae81ff">.5</span><span style="color:#66d9ef">em</span>;
}
.<span style="color:#a6e22e">xToc</span> <span style="color:#f92672">a</span>:<span style="color:#a6e22e">hover</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#FFD700</span> <span style="color:#75715e">!important</span>;
}
</code></pre></div><p>Hugo側が自動で出力してくれるTOCは<code>&lt;li&gt;&lt;/li&gt;</code>と<code>&lt;ul&gt;&lt;/ul&gt;</code>によって構成されていますので、それに合わせてCSSを編集する必要があります。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://maku77.github.io/hugo/template/table-of-contents.html" target="_blank">各ページに目次を表示する (.TableOfContents) | まくまくHugo/Goノート</a>
</li>
</ul>
<h2 id="faviconを設定">faviconを設定</h2>
<p>Hugo Classicにはデフォルトで<code>static/images/site.webmanifest</code>ファイルがあります(<code>exampleSite</code>というディレクトリの中にあります)。</p>
<p>従って、やることと言えばfavicon用<code>.png</code>ファイルの作成と<code>header.html</code>への追記のみですね。faviconに関しては特に言う事は無いです。</p>
<p><code>.png</code>ファイルは自前のアイコン(トップページに表示されるやつです)をリサイズしただけですね。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html:header.html" data-lang="html:header.html">&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;apple-touch-icon&#34;</span> <span style="color:#a6e22e">sizes</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;180x180&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/images/apple-touch-icon.png&#34;</span>&gt;
&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;icon&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;image/png&#34;</span> <span style="color:#a6e22e">sizes</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;16x16&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/images/favicon-16x16.png&#34;</span>&gt;
&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;icon&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;image/png&#34;</span> <span style="color:#a6e22e">sizes</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;32x32&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/images/favicon-32x32.png&#34;</span>&gt;
&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;icon&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;image/png&#34;</span> <span style="color:#a6e22e">sizes</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;64x64&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/images/favicon-64x64.png&#34;</span>&gt;
&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;icon&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;image/png&#34;</span> <span style="color:#a6e22e">sizes</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;128x128&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/images/favicon-128x128.png&#34;</span>&gt;
&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;manifest&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/images/site.webmanifest&#34;</span>&gt;
</code></pre></div><h4>参考リンク</h4>
<ul>
<li><a href="https://favicon-generator.mintsu-dev.com" target="_blank">Favicon ジェネレーター</a>
</li>
<li><a href="https://developer.mozilla.org/ja/docs/Web/Manifest" target="_blank">ウェブアプリマニフェスト | MDN</a>
</li>
</ul>
<h2>次回へ続く</h2>
<p>今回はHugoテーマカスタマイズの2回目でした。</p>
<p>次回はテーマカスタマイズの続き(機能面寄り)を予定しています。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://snagimmo.net/dev/build-website-using-hugo2/">この記事</a>
で説明&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

                    ]]>
            </content:encoded>
        </item>
        <item>
            <title>Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1</title>
            <link>https://snagimmo.net/dev/build-website-using-hugo3/</link>
            <pubDate>Tue, 22 Jun 2021 20:00:00 +0900</pubDate>
            <guid>https://snagimmo.net/dev/build-website-using-hugo3/</guid>
            <description>このサイトは Hugoというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。
 第0回: Hugoで個人サイト制作(0) Hugo導入以前 第1回: Hugoで個人サイト制作(1) Hugo導入 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート 第3回(今回) 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開  今回はHugoテーマをカスタマイズしていきます。前回までの記事がある程度汎用性のある記事だったのに対し、ここからは個人的・個別具体的な話になると思います。
サイト管理用リポジトリについて 第1回の記事でも紹介した通り、このサイトではHugo Classic (goodroot/hugo-classic)というテーマをカスタマイズして使っています。
全体としては、下...</description>
            <content:encoded>
                    <![CDATA[
                    <p>このサイトは <a href="https://gohugo.io" target="_blank">Hugo</a>
というツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。</p>
<ul>
<li>第0回: <a href="https://snagimmo.net/dev/build-website-using-hugo0/">Hugoで個人サイト制作(0) Hugo導入以前</a>
</li>
<li>第1回: <a href="https://snagimmo.net/dev/build-website-using-hugo1/">Hugoで個人サイト制作(1) Hugo導入</a>
</li>
<li>第2回: <a href="https://snagimmo.net/dev/build-website-using-hugo2/">Hugoで個人サイト制作(2) コンテンツ管理とテンプレート</a>
</li>
<li><strong>第3回(今回)</strong></li>
<li>第4回: <a href="https://snagimmo.net/dev/build-website-using-hugo4/">Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2</a>
</li>
<li>第5回: <a href="https://snagimmo.net/dev/build-website-using-hugo5/">Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3</a>
</li>
<li>第6回: <a href="https://snagimmo.net/dev/build-website-using-hugo6/">Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4</a>
</li>
<li>第7回: <a href="https://snagimmo.net/dev/build-website-using-hugo7/">Hugoで個人サイト制作(7) Hugoサイトの公開</a>
</li>
</ul>
<p>今回はHugoテーマをカスタマイズしていきます。前回までの記事がある程度汎用性のある記事だったのに対し、ここからは個人的・個別具体的な話になると思います。</p>
<h2 id="サイト管理用リポジトリについて">サイト管理用リポジトリについて</h2>
<p><a href="https://snagimmo.net/dev/build-website-using-hugo1/">第1回の記事</a>
でも紹介した通り、このサイトでは<a href="https://github.com/goodroot/hugo-classic" target="_blank">Hugo Classic (goodroot/hugo-classic)</a>
というテーマをカスタマイズして使っています。</p>
<p>全体としては、下記のように3つのリポジトリを用意してサイト関連のファイル群を管理しています。(恐らくもっと良い管理法はあると思うのですが暫定的にこうしています)</p>
<ol>
<li>fork済みテーマリポジトリ(公開): <a href="https://github.com/snagimmo/hugo-classic" target="_blank">snagimmo/hugo-classic</a>
</li>
<li>サイト編集用リポジトリ(非公開): snagimmo/hugo-neoclassic</li>
<li>サイト公開用リポジトリ(公開): <a href="https://github.com/snagimmo/snagimmo.github.io" target="_blank">snagimmo/snagimmo.github.io</a>
</li>
</ol>
<p>テーマ用リポジトリはforkなので勿論publicリポジトリですが、このHugoサイト編集用のリポジトリは非公開(private)です。編集途中のファイルやHugoサイトのビルドに関係ないスクリプト(<code>.bat</code>, <code>.sh</code>など)も置いているので非公開にしてあります。</p>
<p>編集用リポジトリの名前についてはhugo-classicをベースにしようと決めたので <strong>hugo-neoclassic</strong> にしました。</p>
<p>また、非公開の編集用リポジトリから公開用リポジトリ(GitHub Pages)へCircleCIを使って自動pushされるようにしていますが、この話はまた別の記事に載せることとします。</p>
<h2 id="テーマ用ファイルのコピーと上書き">テーマ用ファイルのコピーと上書き</h2>
<p>Hugoではテーマファイルを<code>ROOT/themes/&lt;THEME&gt;</code>から<code>ROOT/</code>直下にコピーしてから編集することで、テーマファイルよりも自分の編集したファイルが優先してビルドされるような仕組みになっています。</p>
<p>従って、いきなりサイト用ディレクトリ直下(<code>ROOT/</code>)にテーマをcloneするよりも<code>ROOT/themes</code>以下にテーマリポジトリをcloneしてから<code>ROOT/</code>にコピーし、サイト用ファイルとして編集した方が後々楽になると思います。</p>
<p>サイトの新規作成時には下記コマンド群を実行することで</p>
<ul>
<li>テーマファイル(<code>ROOT/themes</code>以下のファイル)群</li>
<li>それらの上書きファイル・追加ファイル(<code>ROOT/</code>直下にある<code>themes</code> <strong>以外</strong> のファイル)群</li>
</ul>
<p>の棲み分けが出来るようになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Hugoコマンドで新規サイト作成&amp;Gitリポジトリ化</span>
hugo new site SITE_NAME
cd SITE_NAME
git init

<span style="color:#75715e"># themesディレクトリ直下にテーマをclone</span>
cd themes
git clone git@github.com:USER_NAME/THEME_NAME.git

<span style="color:#75715e"># cloneしたテーマ内のファイルをサイト用ディレクトリへコピー</span>
cd ..
cp -v -R ./themes/THEME_NAME/* ./
</code></pre></div><h2 id="手を加えるべきファイル">手を加えるべきファイル</h2>
<p>実際にテーマを編集する前にHugo Classicテーマのどの部分を弄れば良いかあたりをつけました。</p>
<p>結果、大体下記のファイルを編集すればHugo Classicテーマが改造出来るらしいことが分かりました。構造が分かってしまえば簡単<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>ですね。</p>
<ul>
<li>テーマ全体の設定(<code>config.toml</code>)</li>
<li>テーマ全体のCSS(<code>static/css/style.css</code>)</li>
<li>フォントのCSS(<code>static/css/fonts.css</code>)</li>
<li>ヘッダとフッタ関連
<ul>
<li><code>layouts/partials/header.html</code></li>
<li><code>layouts/partials/head_custom.html</code></li>
<li><code>layouts/partials/footer.html</code></li>
<li><code>layouts/partials/foot_custom.html</code></li>
</ul>
</li>
<li>ページ新規作成<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>時のテンプレート(<code>archetypes/default.md</code>)</li>
<li>その他各種テンプレート(前回記事で解説)
<ul>
<li><code>layouts/_default/single.html</code></li>
<li><code>layouts/_default/list.html</code></li>
<li><code>layouts/_default/terms.html</code></li>
</ul>
</li>
<li>ドキュメントルートの各種ファイル
<ul>
<li><code>layouts/404.html</code>: 404ページ設定</li>
<li><code>layouts/robots.txt</code>: クローラ用設定
<ul>
<li>これは<code>static/robots.txt</code>へ移動することに</li>
</ul>
</li>
<li><code>static/CNAME</code>: 独自ドメインを追加したいのでCNAMEファイルを追加</li>
</ul>
</li>
</ul>
<h2 id="テーマを弄る前に">テーマを弄る前に</h2>
<p>Hugoの過去のバージョンアップでMarkdown用のレンダラーが <strong>Goldmark</strong> に変更された影響で、デフォルトではHugo用のMarkdownファイル内にHTMLを書いても読み込まれない<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>設定になっています。</p>
<p>まずは<code>ROOT/config.toml</code>(YAMLの場合もあります)を編集して下記の項目を追加し、Markdown内のHTMLが読み込まれるようにします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml:config.toml" data-lang="toml:config.toml">[<span style="color:#a6e22e">markup</span>]
  [<span style="color:#a6e22e">markup</span>.<span style="color:#a6e22e">goldmark</span>.<span style="color:#a6e22e">renderer</span>]
    <span style="color:#a6e22e">unsafe</span> = <span style="color:#66d9ef">true</span>
</code></pre></div><h2 id="ヘッダや背景や文字の色を変更">ヘッダや背景や文字の色を変更</h2>
<p>最初に一番分かりやすいヘッダの色と全体(<code>&lt;body&gt;</code>など)の背景色・文字色を変えて雰囲気を確認したいなと思い、<code>layouts/partials</code>以下のファイル群と<code>style.css</code>を編集しました。</p>
<p>私はダークモードでWebサイトを見ることが多く、手元の各種ソフト・ツールもほぼ暗色系や紺色の背景で統一しています。そこでWebサイトも暗い色の背景にしたいなと思っていました。</p>
<p>一方で暗色系の背景に対して文字やその他の色も暗色系にしてしまうと見辛くなってしまうと思った<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>ので、思い切って紺色に対してコントラストのある黄色を採用することにしました。</p>
<p>夜空と月をイメージして辛子色の<span class="colored" style="background:#d0af4c;color:#000;">#d0af4c</span>
と濃紺色の<span class="colored" style="background:#0f0f1f;color:#fff;">#0f0f1f</span>
 をベースカラーにしてみました。</p>
<p>下記のコミット等で弄っています。テーマ・デザイン弄りの試行錯誤は正直面白くない上に役立たないと思うので省略します。</p>
<ul>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/a2bd3f836070e590051842003c604b9931e44ad9" target="_blank">modified some colors and header design · snagimmo/hugo-classic@a2bd3f8</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/1f92cd9650fa7f43d307eb3130c057dffe4070b3" target="_blank">change colors and so on · snagimmo/hugo-classic@1f92cd9</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/8d0aeaafb8fd196a8bf3fcb54251cdc775ca4119" target="_blank">change header colors · snagimmo/hugo-classic@8d0aeaa</a>
</li>
</ul>
<h2 id="シンタックスハイライトを改良">シンタックスハイライトを改良</h2>
<h3 id="行番号やファイル名表示の追加">行番号やファイル名表示の追加</h3>
<p>デフォルトのままだとフォントの大きさやらデザインやらが気になったので、ここも変えることに。</p>
<p>初めに行番号の表示をしたり偶数行だけ背景色変更したりスクロールバー改造や左上にQiita風の言語&amp;ファイル名表示を施したりなど色々と弄りました。</p>
<ul>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/e7a8283aa7d3bfa35f6a8cceebf5c839e45cce4f" target="_blank">change highlighting · snagimmo/hugo-classic@e7a8283</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/eb35e231523d56fcc04d97821832920786b0eb54" target="_blank">finished editing code, pre · snagimmo/hugo-classic@eb35e23</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/a61cc16b832d6e174a4ea46f3d76e521b850ffa4" target="_blank">changed even-numbered rows‘ color · snagimmo/hugo-classic@a61cc16</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/13bc748c5a23c451cafc1c88700918eb9fe1495c" target="_blank">added filename to code blocks · snagimmo/hugo-classic@13bc748</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/2bb2ac62efef52cabaf3a44171e85613e251ff2a" target="_blank">fixed line-height for blocks · snagimmo/hugo-classic@2bb2ac6</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/59dbfabf748dc6261d74ca16d6eaecee41c1c629" target="_blank">finished code blocks · snagimmo/hugo-classic@59dbfab</a>
</li>
</ul>
<p>この途中でJavaScriptの簡易スクリプトを追加し、ファイルタイプやファイル名を自動判別してQiita風<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>に表示してくれるよう改良しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js:codeblock-filename.js" data-lang="js:codeblock-filename.js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">list</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">getElementsByClassName</span>(<span style="color:#e6db74">&#34;highlight&#34;</span>);

<span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">list</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">code</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">firstElementChild</span>.<span style="color:#a6e22e">firstElementChild</span>;
  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">code</span>){
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">codeType</span> <span style="color:#f92672">=</span>  <span style="color:#a6e22e">code</span>.<span style="color:#a6e22e">className</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#34;:&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">?</span> <span style="color:#a6e22e">code</span>.<span style="color:#a6e22e">className</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#34;:&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">:</span> <span style="color:#a6e22e">code</span>.<span style="color:#a6e22e">className</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#34;:&#34;</span>)[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/language-/</span>, <span style="color:#e6db74">&#39;&#39;</span>);
  }

  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">codeType</span>){
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">div</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;div&#39;</span>);
    <span style="color:#a6e22e">div</span>.<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">codeType</span>;
    <span style="color:#a6e22e">div</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#39;code-name&#39;</span>);
    <span style="color:#a6e22e">code</span>.<span style="color:#a6e22e">parentNode</span>.<span style="color:#a6e22e">insertBefore</span>(<span style="color:#a6e22e">div</span>, <span style="color:#a6e22e">code</span>);
  }
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js:codeblock-to-line.js" data-lang="js:codeblock-to-line.js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">codeBlocks</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">getElementsByClassName</span>(<span style="color:#e6db74">&#39;highlight&#39;</span>);

<span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">codeBlocks</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">code</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">codeBlocks</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">firstElementChild</span>.<span style="color:#a6e22e">firstElementChild</span>;
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#e6db74">/lang/</span>.<span style="color:#a6e22e">test</span>(<span style="color:#a6e22e">code</span>.<span style="color:#a6e22e">className</span>)){
      <span style="color:#66d9ef">break</span>;
  }
  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">code</span>){
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">lines</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">code</span>.<span style="color:#a6e22e">innerHTML</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">/\n/</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">codeLine</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
    <span style="color:#a6e22e">lines</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">line</span>){
      <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">line</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span>){
        <span style="color:#a6e22e">codeLine</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;&lt;div class=&#34;code-line&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">line</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&lt;/div&gt;&#39;</span>;
      }
    })
    <span style="color:#a6e22e">code</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">codeLine</span>;
  }
}
</code></pre></div><p>こちらの<code>codeblock-filename.js</code>はファイル名表示用のスクリプトで、<code>codeblock-to-line.js</code>はPygments(後述)で表示する際に行番号を追加する為のスクリプトです。</p>
<p>ちなみにここでHugo側からのスクリプト呼び出しに失敗し、少し詰まりました。</p>
<p>結論から言えば、Hugoのテンプレート内で<code>ROOT/static/js/hoge.js</code>といったローカルスクリプトを呼び出す時は下記のように記述するのが正しいらしいです。</p>
<p>呼び出し元はフッター用テンプレートの<code>ROOT/layouts/partials/footer.html</code>です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- 良い例 --&gt;</span>
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/hoge.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;

<span style="color:#75715e">&lt;!-- 悪い例 --&gt;</span>
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;./js/hoge.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;js/hoge.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/static/js/hoge.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;./static/js/hoge.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;static/js/hoge.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;../static/js/hoge.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/../static/js/hoge.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><p><code>ROOT/static</code>直下に居ることが前提で尚且つ<code>/</code>から始めるのが正しい記法のようです。悪い例の方では全てスクリプト読み込みに失敗しました。</p>
<p>少し古め(2018年頃)の記事では<code>src=&quot;js/hoge.js&quot;</code>としている記事も見かけるのですが、少なくとも私が使っているHugo ver0.80においてはエラーになるようでした。</p>
<h3 id="シンタックスハイライト用ツールの選定">シンタックスハイライト用ツールの選定</h3>
<p>また、良い機会なのでシンタックスハイライター<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>も色々試してみました。</p>
<ul>
<li>Pygments (Hugoデフォルト)</li>
<li>highlight.js</li>
<li>Prism.js</li>
</ul>
<p>色々試した中で厄介だったのは、HugoデフォルトのPygmentsとhighlight.jsの衝突です。</p>
<p>当然のことですが、ハイライターによって挿入されるHTMLタグ構造がまちまちなので<code>ROOT/static/css/style.css</code>などのCSSもハイライター毎にブランチ等切って個別対処する必要があります。</p>
<ul>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/6cf1457307c9621b6fdc937eaa350277e0733c43" target="_blank">added prism.js and removed highlight.js · snagimmo/hugo-classic@6cf1457</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/9be5e21961f4e20a0bd20342c963633000744a09" target="_blank">finished pygments and added prism files · snagimmo/hugo-classic@9be5e21</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/284a158269b0c47ce868a233a116ca1847d4ac78" target="_blank">current best settings for prism.js · snagimmo/hugo-classic@284a158</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/d1c13a32d4f283f0905567894b574549d0bb29a9" target="_blank">Merge branch ‘modified-prism‘ into modified · snagimmo/hugo-classic@d1c13a3</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/19c726740d0d4a7df43a43eaba1ac0d1ac4dc9c8" target="_blank">merged some changes of descendant file · snagimmo/hugo-classic@19c7267</a>
</li>
</ul>
<p>結果、最終的には <strong>Prism.js</strong> をメインとして採用しました。
構文解析がそこそこ優れている事と、スキンが豊富でCSSを編集すれば自由に色設定可能なのと、何より扱いやすいのが主な理由です。</p>
<p>というわけで、暫定的ではありますがPrism.jsに関しては下記のような形に落ち着きました。ちょっと細かいデザインに時間を掛けすぎてしまったかなという気がしますが……(この記事書きながらまた<code>static/css/prism.css</code>を微調整していました)。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp:test.cpp" data-lang="cpp:test.cpp"><span style="color:#75715e">#ifndef TEST_CPP
</span><span style="color:#75715e">#define TEST_CPP
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(){
  <span style="color:#66d9ef">int</span> N;
  cin <span style="color:#f92672">&gt;&gt;</span> N;

  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> N; i<span style="color:#f92672">++</span>){
    string S;
    cin <span style="color:#f92672">&gt;&gt;</span> S;
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
<span style="color:#75715e">#endif </span><span style="color:#75715e">//TEST_CPP
</span></code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python:test.py" data-lang="python:test.py"><span style="color:#f92672">import</span> time
<span style="color:#75715e"># Quick, count to ten!</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
    <span style="color:#75715e"># (but not *too* quick)</span>
    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.5</span>)
    <span style="color:#66d9ef">print</span> i
</code></pre></div><ul>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/3e44a8c111e5c4442b18da418989125f1384387d" target="_blank">adopted changes of style.css on private repo · snagimmo/hugo-classic@3e44a8c</a>
</li>
<li><a href="https://github.com/snagimmo/hugo-classic/commit/e09ff6694779f1fb4fa4b329a7e7832135a77354" target="_blank">merged ‘modified‘ · snagimmo/hugo-classic@e09ff66</a>
</li>
</ul>
<p>一応Hugoデフォルトの <strong>Pygments</strong> によるハイライトも可能になるようブランチを切っておきました。……が、Prism.jsで十分なので多分使わないですね。</p>
<h4>参考記事</h4>
<ul>
<li><a href="https://susisu.hatenablog.com/entry/2017/08/06/235706" target="_blank">ソースコードの右上に言語名を表示するやつ - Object.create(null)</a>
</li>
<li><a href="https://t-salad.com/hatena-code/" target="_blank">はてなブログのコードブロックをカスタマイズする | 前菜の備忘録</a>
</li>
<li><a href="https://aakira.app/blog/2018/12/code-block-title/" target="_blank">HugoのコードブロックにQiitaのようなTitleをつける | AABrain</a>
</li>
<li><a href="https://www.officeiko.co.jp/post/tech-go-hugo-syntax-highlight/" target="_blank">Hugoのシンタックスハイライトを設定する</a>
</li>
<li><a href="https://midorimici.com/posts/hugo-code-name/" target="_blank">【Hugo】コードブロック内にファイル名を表示する | みどりみちのブログ</a>
</li>
<li><a href="https://blog.abekoh.dev/post/how-to-build-this-blog/" target="_blank">Hugo, Github Pages, CircleCIつかってブログ構築 • abekoh‘s tech note</a>
</li>
<li><a href="https://wemo.tech/535" target="_blank">CSSでスクロールバーのデザインをカスタマイズする。 | WEMO</a>
</li>
</ul>
<h2>次回へ続く</h2>
<p>今回はHugoテーマカスタマイズの1回目でした。</p>
<p>次回はテーマカスタマイズの続きを予定しています。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>テーマによってファイルパス・ファイル名が異なるのでテーマ毎に調べる必要あり&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><code>hugo new new_contents.md</code>コマンド等で記事を新規作成した場合&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>ローカルファイルに悪意あるHTMLを自ら書き込むことも書き込まれることもほぼあり得ないと考えた為、ここでは<code>unsafe = true</code>にしています&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>いまだにリンクの色が<span class="colored" style="background:#a0a0a0;color:#222;">#a0a0a0</span>
というグレーなので他の色にしようか迷っている&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>コードブロックの言語指定で<code>JavaScript</code>とだけ書けば<code>JavaScript</code>と表示され、<code>js:hoge.js</code>と書けば<code>hoge.js</code>と表示される&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p>ハイライターという呼称はあまり好きではないですが&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

                    ]]>
            </content:encoded>
        </item>
        <item>
            <title>Hugoで個人サイト制作(2) コンテンツ管理とテンプレート</title>
            <link>https://snagimmo.net/dev/build-website-using-hugo2/</link>
            <pubDate>Tue, 08 Jun 2021 22:30:00 +0900</pubDate>
            <guid>https://snagimmo.net/dev/build-website-using-hugo2/</guid>
            <description>このサイトは Hugoというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。
 第0回: Hugoで個人サイト制作(0) Hugo導入以前 第1回: Hugoで個人サイト制作(1) Hugo導入 第2回(今回) 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開  今回はHugoテーマを改造するためHugoのコンテンツ管理・各種テンプレートについて調べた内容をまとめました。少々長いですが1つのページにまとめたかったのでどうかお許しを。
テーマをカスタマイズする前に 早速前回の記事で採用した Hugo Classic | Hugo Themesをいじって行きたいのですが、Hugoには独特の Shortcode , Partia...</description>
            <content:encoded>
                    <![CDATA[
                    <p>このサイトは <a href="https://gohugo.io" target="_blank">Hugo</a>
というツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。</p>
<ul>
<li>第0回: <a href="https://snagimmo.net/dev/build-website-using-hugo0/">Hugoで個人サイト制作(0) Hugo導入以前</a>
</li>
<li>第1回: <a href="https://snagimmo.net/dev/build-website-using-hugo1/">Hugoで個人サイト制作(1) Hugo導入</a>
</li>
<li><strong>第2回(今回)</strong></li>
<li>第3回: <a href="https://snagimmo.net/dev/build-website-using-hugo3/">Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1</a>
</li>
<li>第4回: <a href="https://snagimmo.net/dev/build-website-using-hugo4/">Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2</a>
</li>
<li>第5回: <a href="https://snagimmo.net/dev/build-website-using-hugo5/">Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3</a>
</li>
<li>第6回: <a href="https://snagimmo.net/dev/build-website-using-hugo6/">Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4</a>
</li>
<li>第7回: <a href="https://snagimmo.net/dev/build-website-using-hugo7/">Hugoで個人サイト制作(7) Hugoサイトの公開</a>
</li>
</ul>
<p>今回はHugoテーマを改造するためHugoのコンテンツ管理・各種テンプレートについて調べた内容をまとめました。少々長いですが1つのページにまとめたかったのでどうかお許しを。</p>
<h2 id="テーマをカスタマイズする前に">テーマをカスタマイズする前に</h2>
<p>早速前回の記事で採用した <a href="https://themes.gohugo.io/hugo-classic/" target="_blank">Hugo Classic | Hugo Themes</a>
をいじって行きたいのですが、Hugoには独特の <strong>Shortcode</strong> , <strong>Partial Template</strong> などの概念があります。</p>
<p>Hugo公式ではこの仕組みを <strong>Template</strong> と呼んでいます。</p>
<p>まずはこれらをきちんと理解しないとテーマのカスタマイズは難しそうだなと感じたので少し調べてみました。</p>
<h2 id="hugoのコンテンツ管理について">Hugoのコンテンツ管理について</h2>
<p>Hugoはテーマによって</p>
<ul>
<li>どのテンプレートを使用するか</li>
<li>どのようなファイル/ディレクトリ構成にするのか</li>
<li>テンプレートにどのようなファイル名を採用するか<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
</ul>
<p>がかなり異なっている為、カスタマイズしたい場合は自分で選んだテーマに合わせて適宜調べる必要があります。</p>
<p>Hugo公式Docsに関しては下記2つの中で必要になった部分を見ていくと良いです。</p>
<ul>
<li><a href="https://gohugo.io/content-management/" target="_blank">Content Management</a>
</li>
<li><a href="https://gohugo.io/templates/" target="_blank">Templates</a>
</li>
</ul>
<h3 id="lookup-order探索順序について">Lookup Order(探索順序)について</h3>
<p>また、少し上で「テンプレートにどのようなファイル名を採用するかがテーマによって異なる」と書きましたが、これが意外と重要です。</p>
<p>Hugoは基本的に各テンプレートファイルを <strong>決められた順番・決められたファイルパスで探索</strong> します。その優先順位について書かれているのがこちらです。ここは軽く目を通しておいた方が後々助かると思います。</p>
<ul>
<li><a href="https://gohugo.io/templates/lookup-order/" target="_blank">Hugo‘s Lookup Order</a>
</li>
</ul>
<p>日本語でしっかりとした解説をして下さっているgarretlabさんのサイトもおすすめです。</p>
<ul>
<li><a href="https://garretlab.web.fc2.com/hugo/template/shortcode/" target="_blank">ショートコード</a>
</li>
<li><a href="https://garretlab.web.fc2.com/hugo/contents/structure/" target="_blank">構成</a>
</li>
<li><a href="https://garretlab.web.fc2.com/hugo/template/order/" target="_blank">決定規則(検索順序)</a>
</li>
</ul>
<p>こちらの記事も参考にさせて頂きました。</p>
<ul>
<li><a href="https://blog.chick-p.work/hugo-site-directory/" target="_blank">HUGO のディレクトリ構成</a>
</li>
</ul>
<h2 id="hugo-templatingの記法について">Hugo Templatingの記法について</h2>
<p>公式Docsより: <a href="https://gohugo.io/templates/introduction/" target="_blank">Introduction to Hugo Templating</a>
</p>
<blockquote>
<p>Hugo uses Go’s <code>html/template</code> and <code>text/template</code> libraries as the basis for the templating.</p>
<p>The following is only a primer on Go Templates. For an in-depth look into Go Templates, check the official <a href="https://golang.org/pkg/text/template/" target="_blank">Go docs</a>
.</p>
</blockquote>
<p>上記にもあるように、Hugoでは基本的にGoの<code>html/template</code>と<code>text/template</code>ライブラリを踏襲した記法を採用していて、Hugo公式Docsの解説内容もGoテンプレートの入門に過ぎないので詳しくはGo言語自体のDocsをあたってくれ、だそうです。</p>
<p>ただこれだけだとちょっと不親切なので、日本語でざっくり説明します。</p>
<ul>
<li>HTMLファイルやMarkdownファイルの中でHugoテンプレートを呼び出す為の記法</li>
<li>基本的に<code>{{</code>と<code>}}</code>でテンプレートを囲み、呼び出す</li>
<li>テンプレート名の直後に引数(Arguments)を与える事でそれぞれのテンプレートに見合った挙動をさせる仕組み</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- これは一つの例です --&gt;</span>
{{ template &#34;ARGUMENTS&#34; . }}
</code></pre></div><p>※ 例えば<code>{{</code>と<code>}}</code> に<code>&lt; &gt;</code>が挟まれている場合は、外側の<code>{{</code>と内側の<code>&lt;</code>の間に <strong>スペースを空けずに記述するのが正しい記法</strong> です。</p>
<h2 id="hugoサイトの全体像と概念">Hugoサイトの全体像と概念</h2>
<p>Hugoのサイト構成に関して自分なりに理解した内容をざっくりと書いておきます。</p>
<ul>
<li>Hugoの静的サイトは <strong>ページ(Page)</strong> と <strong>テンプレート(Template)</strong> から生成される</li>
<li>ページ内で呼び出せるテンプレートが <strong>ショートコード(Shortcodes)</strong></li>
<li>テンプレート内で呼び出せるテンプレートが <strong>インクルード(Includes)</strong></li>
<li>変数と関数はこれらの内部で呼び出したり条件分岐させたりするのに使う</li>
<li>各ページ・テンプレートから呼び出す画像・動画などの <strong>リソース(Resources)</strong></li>
</ul>
<p>その他の重要な概念がこちらです。</p>
<ul>
<li><code>index.md</code>あるいは<code>_index.md</code>という特殊な名前のファイルを含むディレクトリを認識して木のようなディレクトリ構造を実現する仕組みが <strong>ページバンドル(Page Bundle)</strong>
<ul>
<li>各記事にあたるディレクトリが <strong>リーフバンドル(Leaf Bundle)</strong></li>
<li>各セクションにあたるディレクトリが <strong>ブランチバンドル(Branch Bundle)</strong></li>
</ul>
</li>
<li>各タグ・カテゴリーなどの総称である <strong>タクソノミー(Taxonomy)</strong></li>
</ul>
<h3 id="ページとテンプレートについて">ページとテンプレートについて</h3>
<h4 id="ページpageについて">ページ(Page)について</h4>
<ul>
<li><code>content</code>ディレクトリ以下に置かれる</li>
<li>基本的にMarkdownとHTMLに対応
<ul>
<li>AsciiDoc、RST、Pandocも利用可能</li>
<li>詳しくはこちら: <a href="https://gohugo.io/content-management/formats/" target="_blank">Content Formats</a>
</li>
</ul>
</li>
</ul>
<h4 id="テンプレートtemplatesについて">テンプレート(Templates)について</h4>
<ul>
<li>
<p><code>layouts</code>ディレクトリ以下に置かれる</p>
</li>
<li>
<p>基本的にHTMLで表現される</p>
<ul>
<li>XMLやJSONを利用することもある</li>
</ul>
</li>
<li>
<p>Markdown中に埋め込んでしまうと事実上 <strong>Hugo用のファイル</strong> となってしまうので汎用性を持たせたい場合は注意</p>
</li>
<li>
<p>ページを構成する代表的なテンプレートファイルは3種類ある</p>
<ol>
<li>記事 (<code>layouts/_default/single.html</code>)</li>
<li>セクション (<code>layouts/_default/list.html</code>)</li>
<li>タクソノミー (<code>layouts/_default/terms.html</code>)</li>
</ol>
<ul>
<li><strong>Hugoのテーマで中心になるのはこの3ファイル</strong> であることが多い</li>
<li>なお、前述のように記事はLeaf BundleでセクションはBranch Bundleでもある</li>
</ul>
</li>
</ul>
<h4 id="ページとテンプレートの関係">ページとテンプレートの関係</h4>
<p>各種ページと基本3種テンプレートの対応関係は次の通りです。</p>
<ul>
<li>各タクソノミー(タグ・カテゴリー)用テンプレートが<code>terms.html</code>
<ul>
<li><a href="https://snagimmo.net/categories/" target="_blank">https://snagimmo.net/categories/</a>
: カテゴリー一覧</li>
<li><a href="https://snagimmo.net/tags/" target="_blank">https://snagimmo.net/tags/</a>
: タグ一覧</li>
</ul>
</li>
<li>各セクション・各タクソノミー要素の記事一覧用テンプレートが<code>list.html</code>
<ul>
<li><a href="https://snagimmo.net/dev/" target="_blank">https://snagimmo.net/dev/</a>
: devセクションの記事一覧</li>
<li><a href="https://snagimmo.net/categories/website/" target="_blank">https://snagimmo.net/categories/website/</a>
: websiteカテゴリの記事一覧</li>
<li><a href="https://snagimmo.net/tags/hugo" target="_blank">https://snagimmo.net/tags/hugo</a>
: Hugoタグの記事一覧</li>
</ul>
</li>
<li>各記事用テンプレートが<code>single.html</code>
<ul>
<li><a href="https://snagimmo.net/dev/build-website-using-hugo2/" target="_blank">https://snagimmo.net/dev/build-website-using-hugo2/</a>
: 記事</li>
</ul>
</li>
</ul>
<h3 id="その他のテンプレートについて">その他のテンプレートについて</h3>
<h4 id="ショートコードshortcodesについて">ショートコード(Shortcodes)について</h4>
<ul>
<li><strong>ページ(大抵Markdown)の中で</strong> Hugo Templateを呼び出す為の機能</li>
<li><code>{{&lt; shortcode &quot;ARGUMENTS&quot; &gt;}}</code>のような記法で文中に埋め込む
<ul>
<li>前述の通り<code>{{</code>と<code>&lt;</code>の間には半角スペースを入れずに書く</li>
</ul>
</li>
</ul>
<h4 id="インクルードincludesについて">インクルード(Includes)について</h4>
<ul>
<li><strong>テンプレート(大抵HTML)の中で</strong> 別のHugo Templateを呼び出す為の機能</li>
<li>インクルードの種類には<code>partial</code>, <code>template</code>などがある
<ul>
<li><code>partial</code>は <strong>ユーザーが定義</strong>した <strong>Partial Template</strong> をインクルードする</li>
<li><code>template</code>は <strong>Hugoが内部で用意</strong>している <strong>Internal Template</strong> などをインクルードする</li>
</ul>
</li>
<li>例えば下記のような形
<ul>
<li><code>{{ partial &quot;header.html&quot; . }}</code></li>
<li><code>{{ template &quot;_internal/opengraph.html&quot; . }}</code></li>
</ul>
</li>
</ul>
<h4 id="変数variablesと関数functionsについて">変数(Variables)と関数(Functions)について</h4>
<ul>
<li>基本的に <a href="https://golang.org/pkg/text/template/#hdr-Functions" target="_blank">Goのtext/templateの文法</a>
と変わらず</li>
<li><strong>変数(Variables)</strong> とはHugoがページ生成時に保持している値のこと
<ul>
<li><code>.Site.XXX</code>や<code>.Page.XXX</code>などがある
<ul>
<li><code>config.toml</code>に記述した値(サイト全体で保持される)にアクセスするのが<code>.Site.XXX</code></li>
<li>各ページ内で設定・保持された値にアクセスするのが<code>.Page.XXX</code>や<code>.Params.XXX</code></li>
</ul>
</li>
</ul>
</li>
<li><strong>関数(Functions)</strong> は<code>if</code>, <code>slice</code>, <code>range</code>など他の言語でよく見るもの</li>
<li>これらも前述のHugo(Go) Templatingの記法に則ってソース中で呼び出す
<ul>
<li><code>{{ if eq xxx &quot;yyy&quot; }}</code>のような形</li>
</ul>
</li>
</ul>
<h3 id="ブランチバンドルとリーフバンドルについて">ブランチバンドルとリーフバンドルについて</h3>
<p>サイト全体の記事構造を一つの木に見立て、各記事を葉っぱ(Leaf)、それらを束ねる各セクションを枝(Branch)と見なしたもの</p>
<h4 id="ブランチバンドルbranch-bundlesについて">ブランチバンドル(Branch Bundles)について</h4>
<ul>
<li><code>content</code>以下にあるディレクトリは<code>_index.md</code>という特殊ファイルがある場合 <strong>Branch Bundles</strong> として扱われる</li>
<li>要するに <strong>セクション(Section)</strong> のこと<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
<li>セクションというのは<code>content</code>ディレクトリ以下に置かれた <strong>サブディレクトリ</strong> のことで、基本的にローカルディレクトリの構造にサイト側のパスも追従する</li>
<li>セクションは多重化可能 (<code>content/section1/sub-section1</code> のような形)</li>
</ul>
<h4 id="リーフバンドルleaf-bundlesについて">リーフバンドル(Leaf Bundles)について</h4>
<ul>
<li><code>content</code>以下にあるディレクトリは<code>index.md</code><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>という特殊ファイルがある場合 <strong>Leaf Bundles</strong> として扱われる</li>
<li>要するに <strong>記事</strong> のこと</li>
<li>Branch Bundlesに比べて直感的でないが、こちらの <strong>Leaf Bundlesも主にディレクトリのことを指す</strong> 点に注意</li>
<li>つまり、ページ(Page) は実は<code>page-desu.md</code>のような単一Markdownファイルとしてだけでなく、<code>index.md</code>という特殊ファイルを含んだディレクトリ<code>page-desu</code>としても配置することが出来る</li>
<li>特殊ファイルとは言うものの、名前を変えるだけでOK</li>
<li>中身は<code>page-desu.md</code>と<code>page-desu/index.md</code>とで変える必要はない</li>
</ul>
<p>公式Docs: <a href="https://gohugo.io/content-management/page-bundles" target="_blank">Page Bundles</a>
</p>
<h3 id="ページリソースについて">ページリソースについて</h3>
<p>これは上記のLeaf Bundlesについて理解できていれば簡単です。</p>
<p><strong>ページリソース(Page Resources)</strong> とは、各ページ内で使用する画像・動画などの <strong>リソース(Resources)</strong> 管理に関する仕組みです。</p>
<h4 id="ページリソースpage-resources機能があると何が嬉しいか">ページリソース(Page Resources)機能があると何が嬉しいか</h4>
<ul>
<li>
<p>Hugoのリソース管理は元々<code>static</code>ディレクトリで全て行われており、その事にユーザーから不満が出ていた</p>
</li>
<li>
<p>各ページ内のリソースを<code>static/images/gazou.png</code>として<code>content</code>とは全く別のディレクトリで管理する必要があった</p>
</li>
<li>
<p>このPage Resourcesという仕組みによって各Leaf Bundles(ディレクトリ)内でリソース管理を行うことが可能になった</p>
</li>
<li>
<p>Leaf Bundlesとして認識されたディレクトリ内、つまり<code>index.md</code>と同じ階層以下にその記事から読み込むファイル群を配置できる</p>
<ul>
<li><code>page-desu</code>ディレクトリをLeaf Bundlesとすると、<code>page-desu/gazou.png</code>として配置することも<code>page-desu/img/gazou.png</code>として配置することも可能</li>
<li><code>index.md</code>と同じ階層以下であればどの深さでもリソースを配置することが出来る</li>
</ul>
</li>
</ul>
<p>公式Docsはこちら: <a href="https://gohugo.io/content-management/page-resources/" target="_blank">Page Resources</a>
</p>
<h2 id="タクソノミーtaxonomyについて">タクソノミー(Taxonomy)について</h2>
<p>実は上記2つのBundles以外に、もう一つHugoのページ(Page)の中核を成す概念があります。</p>
<p>それが <strong>タクソノミー(Taxonomy)</strong> です。</p>
<p>よくブログなどで各記事に設定された「タグ」や「カテゴリ」があると思いますが、あれらをまとめてHugoではタクソノミーという名前で呼び、管理しています。</p>
<p>このタクソノミー内のタグやカテゴリなどの要素ごとにページが自動生成されます。その際に呼び出されるのが<code>layouts/_default/terms.html</code>という訳です。</p>
<p>タクソノミーに関する公式Docsはこちらです。</p>
<ul>
<li><a href="https://gohugo.io/content-management/taxonomies" target="_blank">Taxonomies</a>
</li>
<li><a href="https://gohugo.io/templates/taxonomy-templates" target="_blank">Taxonomy Templates</a>
</li>
<li><a href="https://gohugo.io/variables/taxonomy" target="_blank">Taxonomy Variables</a>
</li>
</ul>
<p>日本語解説に関してもgarretlabさんの記事がよくまとまっていて参考になります。</p>
<ul>
<li><a href="https://garretlab.web.fc2.com/hugo/template/taxonomy/" target="_blank">コンテンツ分類(Taxonomy)</a>
</li>
</ul>
<h3 id="タクソノミーテンプレートの注意点">タクソノミーテンプレートの注意点</h3>
<p>タクソノミーに関するテンプレートを <strong>タクソノミーテンプレート(Taxonomy Template)</strong> と言いますが、これを扱う際は注意が必要です。</p>
<p>タクソノミー内の値には<code>.Data.Terms</code>や<code>.Data.Pages</code>といった形でアクセスします。</p>
<p>つまり<code>.Data</code>の下にぶら下がる<code>.Data.XXX</code>といった形で記述するのですが、これは似たような<code>.Site.Data.XXX</code>といった形を持つ <strong>データテンプレート(Data Template)</strong> とは似て非なる <strong>全くの別物</strong> です。</p>
<p>先に書いたように<code>.Site.XXX</code>というのは基本的に <strong><code>config.toml</code>ファイルに書かれたサイト全体で共有可能な設定値</strong> を読み込むのに使います。</p>
<p>この<code>.Site.Data.XXX</code>も似たようなもので、<code>data/data-area/data-desu.toml</code>内に記述した値をデータテンプレートから取り出す為に使います。</p>
<p>ですので繰り返しになりますが、タクソノミーがデフォルトで保持する<code>.Data.Terms</code>は<code>.Site.Data.XXX</code>とは全くの別物なわけです。</p>
<p>公式ではタクソノミーテンプレート用の変数を<code>.Data.Terms</code>ではなく<code>.Site.Taxonomies.XXX</code>として扱う方法も紹介されています。</p>
<ul>
<li><a href="https://gohugo.io/templates/taxonomy-templates/#render-a-sites-taxonomies" target="_blank">Taxonomy Templates #render-a-sites-taxonomies</a>
</li>
</ul>
<blockquote>
<p>If you wish to display the list of all keys for your site’s taxonomy, you can retrieve them from the .Site variable available on every page.</p>
</blockquote>
<p>こちらも公式からの引用ですが、例えば下の<code>.Site.Taxonomies.tags</code>を利用した例ではサイト全体のタグ一覧を表示することが出来ます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">ul</span>&gt;
    {{ range .Site.Taxonomies.tags }}
            &lt;<span style="color:#f92672">li</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .Page.Permalink }}&#34;</span>&gt;{{ .Page.Title }}&lt;/<span style="color:#f92672">a</span>&gt; {{ .Count }}&lt;/<span style="color:#f92672">li</span>&gt;
    {{ end }}
&lt;/<span style="color:#f92672">ul</span>&gt;
</code></pre></div><h2>次回へ続く</h2>
<p>今回はHugoサイトの全体像とHugoテンプレートに関する話でした。</p>
<p>次回はテーマ改良を予定しています。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>例えばタクソノミーに関しては<code>layouts/_default/terms.html</code>, <code>layouts/_default/terms.html.html</code>, <code>layouts/category/terms.html</code>などのバリエーションが存在する (詳細: <a href="https://gohugo.io/templates/lookup-order/#examples-layout-lookup-for-taxonomy-pages" target="_blank">Taxonomy Templates</a>
)&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>厳密には違うものの、セクション以外のBranch Bundleはホームやタクソノミーしかないので事実上セクションを指しているようなものとした (詳細: <a href="https://gohugo.io/content-management/page-bundles/" target="_blank">Page Bundles</a>
)&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>頭にアンダースコア<code>_</code>が付いていない点に注意&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

                    ]]>
            </content:encoded>
        </item>
        <item>
            <title>Hugoで個人サイト制作(1) Hugo導入</title>
            <link>https://snagimmo.net/dev/build-website-using-hugo1/</link>
            <pubDate>Mon, 07 Jun 2021 23:30:00 +0900</pubDate>
            <guid>https://snagimmo.net/dev/build-website-using-hugo1/</guid>
            <description>このサイトは Hugoというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。
 第0回: Hugoで個人サイト制作(0) Hugo導入以前 第1回(今回) 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開  今回は静的サイトジェネレータHugoの導入がメインです。
Hugoを導入する ということで、早速本題に入っていきます。
OSがWindows10 Homeなので、Hugo公式のインストールガイドに沿って パッケージマネージャのScoop でインストールしました。
上記インストールガイド内にHomebrewやMacPortsやChocolateyを利...</description>
            <content:encoded>
                    <![CDATA[
                    <p>このサイトは <a href="https://gohugo.io" target="_blank">Hugo</a>
というツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。</p>
<ul>
<li>第0回: <a href="https://snagimmo.net/dev/build-website-using-hugo0/">Hugoで個人サイト制作(0) Hugo導入以前</a>
</li>
<li><strong>第1回(今回)</strong></li>
<li>第2回: <a href="https://snagimmo.net/dev/build-website-using-hugo2/">Hugoで個人サイト制作(2) コンテンツ管理とテンプレート</a>
</li>
<li>第3回: <a href="https://snagimmo.net/dev/build-website-using-hugo3/">Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1</a>
</li>
<li>第4回: <a href="https://snagimmo.net/dev/build-website-using-hugo4/">Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2</a>
</li>
<li>第5回: <a href="https://snagimmo.net/dev/build-website-using-hugo5/">Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3</a>
</li>
<li>第6回: <a href="https://snagimmo.net/dev/build-website-using-hugo6/">Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4</a>
</li>
<li>第7回: <a href="https://snagimmo.net/dev/build-website-using-hugo7/">Hugoで個人サイト制作(7) Hugoサイトの公開</a>
</li>
</ul>
<p>今回は静的サイトジェネレータHugoの導入がメインです。</p>
<h2 id="hugoを導入する">Hugoを導入する</h2>
<p>ということで、早速本題に入っていきます。</p>
<p>OSがWindows10 Homeなので、<a href="https://gohugo.io/getting-started/installing/" target="_blank">Hugo公式のインストールガイド</a>
に沿って パッケージマネージャの<strong>Scoop</strong> でインストールしました。</p>
<p>上記インストールガイド内にHomebrewやMacPortsやChocolateyを利用したインストール方法も載っているのでHugoのインストールで悩む方はそんなにいないと思います。</p>
<p>Scoop自体のインストール方法は <a href="https://scoop.sh" target="_blank">Scoopの公式サイト</a>
に載っているのでそちらを参照しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-PowerShell" data-lang="PowerShell">scoop install hugo
</code></pre></div><p>上記インストール作業の後にPSやGit Bashなどから<code>hugo</code>コマンドが叩ければ無事インストール完了です。自分の場合はインストール後にOSごと一応再起動しておきました。</p>
<h2 id="サイトファイルの新規作成">サイト/ファイルの新規作成</h2>
<p>Hugoでは新規にサイトを作成する際<code>hugo new site</code>コマンドを実行することでディレクトリが自動生成されます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo new site &lt;SITE_NAME&gt;
</code></pre></div><p>また、<code>hugo new</code>コマンドによってファイルを新規作成することも可能で、その場合は下記を実行すると<code>new-dir</code>ディレクトリの直下に<code>new_contents.md</code>が生成されます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo new new_dir/new_contents.md
</code></pre></div><h2 id="hugoディレクトリの構造">Hugoディレクトリの構造</h2>
<p>例えば、<code>hugo new site hoge</code>として作成された<code>hoge</code>ディレクトリには下記のディレクトリ群がデフォルトで含まれています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ hugo new site hoge
<span style="color:#75715e">#(省略)</span>
$ ls -A ./hoge
archetypes  config.toml  content  data  layouts  static  themes
</code></pre></div><p>Hugoディレクトリの構造に関しては下記リンクが参考になります。</p>
<ul>
<li><a href="https://gohugo.io/getting-started/directory-structure/" target="_blank">Directory Structure</a>
</li>
<li><a href="https://blog.chick-p.work/hugo-site-directory/" target="_blank">HUGO のディレクトリ構成</a>
</li>
</ul>
<p>この<code>hoge/themes</code>以下にHugoテーマ用のリポジトリをcloneしたりsubmodule addしたりして置いておくとテーマが適用されてプレビュー可能になります。</p>
<h2 id="テーマを選ぶ">テーマを選ぶ</h2>
<p>Hugo用のテーマは <a href="https://themes.gohugo.io" target="_blank">Hugo themes</a>
というサイトから選びました。</p>
<p>最初に気に入ったテーマが8つありましたが、自分はその中でもこちらの <strong>Hugo Classic</strong> なるテーマのシンプルさに惹かれました。</p>
<div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://themes.gohugo.io/hugo-classic/" data-iframely-url="//cdn.iframe.ly/NMqrLZw?card=small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>
<ul>
<li><a href="https://themes.gohugo.io/hugo-classic/" target="_blank">Hugo Classic | Hugo Themes</a>
</li>
<li><a href="https://github.com/goodroot/hugo-classic" target="_blank">goodroot/hugo-classic</a>
</li>
</ul>
<p>選んだテーマをどのようにして自分のサイトに取り入れるかは様々です。</p>
<ul>
<li>Hugoテーマのリポジトリを直接clone</li>
<li>Hugoテーマのリポジトリをforkしてカスタマイズ</li>
<li>Hugoテーマのリポジトリをサブモジュール化 (<code>git submodule add</code>)</li>
</ul>
<p>自分は上記Hugo Classicを下記リポジトリへforkした後にカスタマイズして使っています。(CSSなど汚い部分がありますがご容赦下さい)</p>
<ul>
<li><a href="https://github.com/snagimmo/hugo-classic" target="_blank">snagimmo/hugo-classic</a>
</li>
</ul>
<h2 id="サイトのプレビュー">サイトのプレビュー</h2>
<p>Hugoにはサイト上のファイル群を編集する度に自動でプレビュー&amp;更新が行われる <strong>LiveReload</strong> 機能があります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo server
</code></pre></div><p>というコマンドをターミナルから実行することで、<code>http://localhost:1313</code>をデフォルトURLとしてHugo用プレビューサーバが立ち上がります。</p>
<p><strong>Draft</strong>(下書き記事)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>を含めたプレビューをするためには<code>-D</code>オプションを付けて</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo server -D
</code></pre></div><p>などとする必要があります。この<code>-D</code>オプションが無い場合は <strong>公開設定をしたファイルしかプレビューされない</strong> 仕組みになっています。</p>
<p><code>hugo server</code>にはその他に様々なオプションがあり、</p>
<ul>
<li><code>--buildDrafts</code>, <code>-D</code>: 下書き(draft)記事も含めてプレビューする</li>
<li><code>--ignoreCache</code>: キャッシュを無視してプレビュー</li>
<li><code>--noHTTPCache</code>: HTTPキャッシュを作成しない</li>
<li><code>--disableFastRender</code>: ファイル変更がある度にサイト全体をリビルド</li>
<li><code>--buildFuture</code>, <code>-F</code>: 作成日時が現在時刻より進んだ記事もプレビュー</li>
<li><code>--port &lt;PORT&gt;</code>, <code>-p &lt;PORT&gt;</code>: プレビューサーバがlistenするポートを指定<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
</ul>
<p>などを使い分けることで自分の望んだ状態でサイトプレビューを利用することが可能です。便利ですね。</p>
<p>これらのオプションは<code>hugo server --help</code>でヘルプとして一覧表示することが出来ます。</p>
<p>または公式Docsだとこちらのページに書いてあります。</p>
<ul>
<li><a href="https://gohugo.io/commands/hugo_server/#options" target="_blank">hugo server</a>
</li>
</ul>
<p>ちなみに自分はいつも下記コマンドを実行しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-PowerShell" data-lang="PowerShell">hugo server -D --ignoreCache --noHTTPCache --disableFastRender --buildFuture
</code></pre></div><h2 id="サイトのビルドと公開">サイトのビルドと公開</h2>
<p>公開用ファイルのビルドは<code>server</code>等オプションなしの</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo
</code></pre></div><p>で実行できます。Hugo用ディレクトリに移動後<code>hugo</code>の4文字を入力してEnterを押すだけです。</p>
<p><code>hugo</code>コマンドでビルドを実行すると<code>hoge/public</code>ディレクトリ以下に全てのビルド済みファイル群が出力されます。ホスティングサービスや各公開用サーバにはこの<code>public</code>ディレクトリ以下の公開用ファイルのみを配置すれば良い、というわけです。</p>
<p>なお、公開までの大まかな流れはQiitaのこの記事が分かりやすいと思います。</p>
<ul>
<li><a href="https://qiita.com/peaceiris/items/ef38cc2a4b5565d0dd7c" target="_blank">Hugo で静的なサイト・ブログを構築しよう - Qiita</a>
</li>
</ul>
<h2>次回へ続く</h2>
<p>今回はHugoの導入と簡単な説明をしました。</p>
<p>次回はテーマ改良に向けてHugoサイトの全体像を把握し、Hugo Templateを理解します。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>各MarkdownのFrontMatter内に<code>draft: true</code>と記述することで下書き扱いになり、<code>draft: false</code>か無指定の場合は公開される&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Hugoサーバが使うデフォルトのポート番号は<code>1313</code>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

                    ]]>
            </content:encoded>
        </item>
        <item>
            <title>Hugoで個人サイト制作(0) Hugo導入以前</title>
            <link>https://snagimmo.net/dev/build-website-using-hugo0/</link>
            <pubDate>Sun, 06 Jun 2021 16:20:00 +0900</pubDate>
            <guid>https://snagimmo.net/dev/build-website-using-hugo0/</guid>
            <description>このサイトは Hugoというツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。
 第0回(今回) 第1回: Hugoで個人サイト制作(1) Hugo導入 第2回: Hugoで個人サイト制作(2) コンテンツ管理とテンプレート 第3回: Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1 第4回: Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2 第5回: Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3 第6回: Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4 第7回: Hugoで個人サイト制作(7) Hugoサイトの公開  なお、今回はHugo導入以前のMarkdown管理体制への移行に際して考えた事などがメインです。
Hugoを導入したきっかけ 実はHugoを導入した背景には、テキストファイル管理体制の変更がありました。
昔からPC上にメモを残すようにはしていたのですが、長い間管理する手間に悩んでいました。
最初はtxtファイルに殴り書きしていたのですがそれは流石に非効率...</description>
            <content:encoded>
                    <![CDATA[
                    <p>このサイトは <a href="https://gohugo.io" target="_blank">Hugo</a>
というツールを使って作っています。その過程であれこれ取った作業メモを載せていくシリーズ記事です。</p>
<ul>
<li><strong>第0回(今回)</strong></li>
<li>第1回: <a href="https://snagimmo.net/dev/build-website-using-hugo1/">Hugoで個人サイト制作(1) Hugo導入</a>
</li>
<li>第2回: <a href="https://snagimmo.net/dev/build-website-using-hugo2/">Hugoで個人サイト制作(2) コンテンツ管理とテンプレート</a>
</li>
<li>第3回: <a href="https://snagimmo.net/dev/build-website-using-hugo3/">Hugoで個人サイト制作(3) Hugoテーマのカスタマイズ1</a>
</li>
<li>第4回: <a href="https://snagimmo.net/dev/build-website-using-hugo4/">Hugoで個人サイト制作(4) Hugoテーマのカスタマイズ2</a>
</li>
<li>第5回: <a href="https://snagimmo.net/dev/build-website-using-hugo5/">Hugoで個人サイト制作(5) Hugoテーマのカスタマイズ3</a>
</li>
<li>第6回: <a href="https://snagimmo.net/dev/build-website-using-hugo6/">Hugoで個人サイト制作(6) Hugoテーマのカスタマイズ4</a>
</li>
<li>第7回: <a href="https://snagimmo.net/dev/build-website-using-hugo7/">Hugoで個人サイト制作(7) Hugoサイトの公開</a>
</li>
</ul>
<p>なお、今回はHugo導入以前のMarkdown管理体制への移行に際して考えた事などがメインです。</p>
<h2 id="hugoを導入したきっかけ">Hugoを導入したきっかけ</h2>
<p>実はHugoを導入した背景には、<strong>テキストファイル管理体制の変更</strong>がありました。</p>
<p>昔からPC上にメモを残すようにはしていたのですが、長い間管理する手間に悩んでいました。</p>
<p>最初はtxtファイルに殴り書きしていたのですがそれは流石に非効率が過ぎるということで、iOSからクラウドで同期できる <a href="https://simplenote.com/" target="_blank">Simplenote</a>
というアプリをtxtと並行して3年ほど使っていました。</p>
<p>Simplenoteは使いやすく軽量で良いアプリではあるものの、データが全てクラウド上で保管されてしまうのです。</p>
<p>つまり、直接アプリ上でローカルファイルとして文書を管理する事が出来ないのです。</p>
<p>これでは、例えば<code>grep</code>などで内容を横断検索した時のような効率が損なわれます。</p>
<p>確かにSimplenoteにもエクスポート機能はあるのですが、書いたその時点で自動的にローカルファイルと同期される状態が望ましいなと思い、代替となるテキスト管理手段を探していました。</p>
<h2 id="全てmarkdownへ移行">全てMarkdownへ移行</h2>
<p>色々と調べる中で、「txtやアプリ上で管理する体制をやめ、全てMarkdownにしてしまおう」と思いつきました。</p>
<p>というのも、例えばtxtファイルにメモを取りためると出てくる問題の一つとして、</p>
<p><strong>記法が統一されなくなりがち</strong></p>
<p>といった問題点があったからです。</p>
<p>つまり、<strong>ファイル形式によって記法が予め決められている</strong>方が助かるな、と思った訳です。そこで記法が決まっているMarkdownが候補に挙がりました。</p>
<p>実は「Markdownは箇条書きスタイルに向いている」ぐらいの認識しか持っていなかったので全てのメモをMarkdownにしてしまうのも考え物だなと思ったのですが、冷静に考えると</p>
<ul>
<li>元々HTMLを簡易的に記述する目的で開発された言語
<ul>
<li>HTMLタグも埋め込んで利用可能</li>
</ul>
</li>
<li>GitHubでよく見る<code>README.md</code>などもMarkdown</li>
<li>TrelloやSlack<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>などの有名なツール群も軒並みMarkdown記法に対応</li>
<li>YAMLなどのFrontMatterも使える(場合がある)</li>
</ul>
<p>などなどメリットがかなりあることに気付き、思いきって手元のローカルファイルのメモを全てMarkdownに置き換えることにしました。</p>
<h2 id="markdownつながりでhugoへ到達">MarkdownつながりでHugoへ到達</h2>
<p>以前から、個人で何かやるなら「ブログではなくサイトにしたい」と考えていました。記事も記事以外も載せられるメディアの方が良いなと思っていたので、ここは余り悩まずWebサイトにしようと決めました。</p>
<p>そうした中で、色々現在の制作ツールを調べていきました。</p>
<p>また、ネット上で情報発信しているエンジニア諸氏の記事などをよく読んでいた影響か、「あまりゴチャゴチャしていないスッキリとした <strong>テキスト主体</strong> のサイトが良いな」と思うようになっていました。</p>
<p>「この人のサイト良いな」と思う度にWappalyzerやWhatRunsなどのChrome拡張機能を通じてどんなツールでそのサイトを構築したのかを何となく把握していたので、<strong>静的サイトジェネレータ</strong> という単語に辿り着くまでそう時間はかかりませんでした。</p>
<p>静的サイトジェネレータは基本的にMarkdownなどのファイルから静的ファイル(動的な生成過程のないhtmlなど)を生成するのに使います。</p>
<p>そして生成されたファイル群をNetlifyやGitHub Pagesなどのホスティングサービスで公開する、というのがサイト公開までの一連の流れです。</p>
<p>他にも静的サイトジェネレータの候補はGatsby.jsやNext.jsやHexoやJekyllなど幾つかありました<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>が、Goで書かれていて一番<strong>高速</strong>とのことで <strong><a href="https://gohugo.io" target="_blank">Hugo</a>
</strong> を選ぶ事にしました。</p>
<div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://gohugo.io/" data-iframely-url="//cdn.iframe.ly/h9iI9vR?card=small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>
<h2>次回へ続く</h2>
<p>今回は導入以前の流れを振り返っただけでした。</p>
<p>次回以降はHugoの導入やテーマ改良など具体的な話をしていきます。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>厳密にはMarkdown記法とは異なりますが&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>ここに一通り載ってます→ <a href="https://jamstack.org/generators/" target="_blank">Static Site Generators - Top Open Source SSGs | Jamstack</a>
&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

                    ]]>
            </content:encoded>
        </item>
        <item>
            <title>このサイトについて</title>
            <link>https://snagimmo.net/blog/2021/06/about-this-site/</link>
            <pubDate>Fri, 04 Jun 2021 19:40:11 +0900</pubDate>
            <guid>https://snagimmo.net/blog/2021/06/about-this-site/</guid>
            <description>初めまして。管理人の すなぎも(snagimmo) と申します。
SNSもあるこの時代ですが、記事を書き溜める場所が欲しいなと以前から思っており、こうして個人サイトを作ってみました。
2021年6月現在は何もコンテンツが無いですが、これからちょっとずつ更新していこうと思います。
なお余談ですが、サイトのタイトルは「すなぎめも」と読みます。
よろしくお願いします。</description>
            <content:encoded>
                    <![CDATA[
                    <p>初めまして。管理人の <strong>すなぎも(snagimmo)</strong> と申します。</p>
<p>SNSもあるこの時代ですが、記事を書き溜める場所が欲しいなと以前から思っており、こうして個人サイトを作ってみました。</p>
<p>2021年6月現在は何もコンテンツが無いですが、これからちょっとずつ更新していこうと思います。</p>
<p>なお余談ですが、サイトのタイトルは「すなぎめも」と読みます。</p>
<p>よろしくお願いします。</p>

                    ]]>
            </content:encoded>
        </item>
    </channel>
</rss>
